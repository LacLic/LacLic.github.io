<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LacLic&#39;s Blog</title>
  
  <subtitle>Living with bustle, hearing of isolation.</subtitle>
  <link href="http://laclic.github.io/atom.xml" rel="self"/>
  
  <link href="http://laclic.github.io/"/>
  <updated>2021-03-14T15:02:29.498Z</updated>
  <id>http://laclic.github.io/</id>
  
  <author>
    <name>LacLic Vanilla</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PTA-旋转骰子</title>
    <link href="http://laclic.github.io/2021/03/14/PTA-%E6%97%8B%E8%BD%AC%E9%AA%B0%E5%AD%90/"/>
    <id>http://laclic.github.io/2021/03/14/PTA-%E6%97%8B%E8%BD%AC%E9%AA%B0%E5%AD%90/</id>
    <published>2021-03-14T14:20:43.000Z</published>
    <updated>2021-03-14T15:02:29.498Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录">目录</h2><p><a href="##%E9%A2%98%E6%96%87">题文</a><br><a href="##%E9%A2%98%E6%84%8F">题意</a><br><a href="##%E6%80%9D%E8%B7%AF">思路</a><br><a href="##%E4%BB%A3%E7%A0%81">代码</a></p><hr><h2 id="题文">题文</h2><p>玛莎有n个骰子，每个骰子的6个面上都恰好有一个0到9之间的数字。</p><p>现在玛莎将利用这n个筛子来制作新数字。她把n个骰子摆成一排，然后从左到右查看骰子的上表面并读取，即可得到一个新数字。随后她不断的旋转每个骰子的面就可以得到不同的新数字。旋转骰子需要满足以下规则：</p><p>1、制作的数字不能包含前导零；</p><p>2、制作新数字时不需要使用所有的骰子；</p><p>3、使用骰子旋转，无法将数字9转换为数字6，反之亦然。</p><p>给定n个骰子，玛莎可以用它们构成从1到x的所有整数。玛莎想知道，对于给定的n个骰子，这个x的最大取值是多少呢？<br>输入格式:</p><p>第一行仅一个整数n，表示骰子的数量（1≤n≤3）。</p><p>接下来n行，每行包含6个整数a[i][j]（0≤a[i][j]≤9），表示第i个骰子的第j个面上的数字。<br>输出格式:</p><p>输出一个整数，即最大数x，玛莎可以使用她的骰子构成数字从1到x。如果无法构成1，则输出0。</p><p>输入样例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">0 1 3 5 6 8</span><br><span class="line">1 2 4 5 7 8</span><br><span class="line">2 3 4 6 7 9</span><br></pre></td></tr></table></figure><p>输出样例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">98</span><br></pre></td></tr></table></figure><h2 id="题意">题意</h2><p>给定n组数（骰子），每组数有6个数，现在要求你每组中取出一个数来，组成一个新的数。玛莎可以用它们构成从1到x的所有整数。现在她想知道，对于给定的n个骰子，这个x的最大取值是多少呢？</p><h2 id="思路">思路</h2><p>由于n&lt;=3，最多只有3位数999，可以暴力每个尝试搜索组合过去，若无法组合则停止并输出答案。</p><p>这里使用二进制状态表示法来记录当前骰子是否被使用</p><h2 id="代码">代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1000*6*6*6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num[<span class="number">3</span>][<span class="number">6</span>]; <span class="comment">// n组数（n个骰子上的数）</span></span><br><span class="line"><span class="keyword">int</span> digits[<span class="number">3</span>],digit; <span class="comment">// 各位上的数字，总共有几位</span></span><br><span class="line"><span class="keyword">int</span> n,status; <span class="comment">// n，n个骰子的状态码</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> layer)</span> </span>&#123; <span class="comment">// 递归层数==当前所处i数的位数</span></span><br><span class="line">    <span class="keyword">if</span>(layer&gt;digit) &#123; <span class="comment">// 问题边界，递归层数高于总位数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j) &#123;</span><br><span class="line">        <span class="keyword">int</span> now = <span class="number">0b001</span>&lt;&lt;j; <span class="comment">// 当前在考虑哪组数</span></span><br><span class="line">        <span class="keyword">if</span>(status&amp;now) &#123; <span class="comment">// 如果这个骰子没有被使用</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;++i) &#123; <span class="comment">// 寻找符合条件的数</span></span><br><span class="line">                <span class="keyword">if</span>(num[j][i]==digits[layer]) &#123;</span><br><span class="line">                    status^=now;</span><br><span class="line">                    <span class="keyword">if</span>(dfs(layer+<span class="number">1</span>)) &#123;</span><br><span class="line">                        status^=now;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 通过</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    status^=now;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 搜索不到，退出递归并返回false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="comment">// 预处理</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;<span class="number">1</span>;++i) &#123;</span><br><span class="line">        digits[i] = x%<span class="number">10</span>; <span class="comment">// 记录各位上的数</span></span><br><span class="line">        x/=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span>(!x) &#123;</span><br><span class="line">            digit = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dfs(<span class="number">0</span>); <span class="comment">// 进入递归</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">&quot;in.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">switch</span> (n) &#123; <span class="comment">// 可以通过循环实现，这里由于n较小，就直接一一罗列</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: status = <span class="number">0b001</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: status = <span class="number">0b011</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>: status = <span class="number">0b111</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">6</span>;++j) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) &#123;</span><br><span class="line">        max*=<span class="number">10</span>; <span class="comment">// 找最多能组成几位数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;max;++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!cal(i)) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目录&quot;&gt;目录&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;##%E9%A2%98%E6%96%87&quot;&gt;题文&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;##%E9%A2%98%E6%84%8F&quot;&gt;题意&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;##%E6%80%9D%E8%B7%AF&quot;&gt;思路</summary>
      
    
    
    
    
    <category term="c++" scheme="http://laclic.github.io/tags/c/"/>
    
    <category term="PTA" scheme="http://laclic.github.io/tags/PTA/"/>
    
    <category term="dfs" scheme="http://laclic.github.io/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>CH0103-0x00「基本算法」例题-最短Hamilton路径</title>
    <link href="http://laclic.github.io/2021/03/09/CH0103-0x00%E3%80%8C%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95%E3%80%8D%E4%BE%8B%E9%A2%98-%E6%9C%80%E7%9F%ADHamilton%E8%B7%AF%E5%BE%84/"/>
    <id>http://laclic.github.io/2021/03/09/CH0103-0x00%E3%80%8C%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95%E3%80%8D%E4%BE%8B%E9%A2%98-%E6%9C%80%E7%9F%ADHamilton%E8%B7%AF%E5%BE%84/</id>
    <published>2021-03-09T07:14:19.000Z</published>
    <updated>2021-03-09T09:58:13.316Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>有N个地方，分别标记为0到N-1，现在给定每两个地点之间的距离，要你求出最短的经过所有地方的路程。</p><p>其中，$N&lt;=20$</p><h2 id="思路">思路</h2><p>动态规划，记录两个状态</p><ol><li>现在所在地</li><li>已经过的地方（使用二进制表示，经过的为1，未经过的为0）</li></ol><p>当上述两个条件完全一致时，就可以直接调用之前dfs算出来的值</p><h2 id="代码">代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> table2[<span class="number">20</span>]; <span class="comment">// 位数表，方便直接存取对应位数据</span></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">20</span>][<span class="number">1024</span>*<span class="number">1024</span>+<span class="number">6</span>]; <span class="comment">// 使用二进制记录已经过的地点</span></span><br><span class="line"><span class="keyword">int</span> hamiton[<span class="number">20</span>][<span class="number">20</span>]; <span class="comment">// 读取输入</span></span><br><span class="line"><span class="keyword">int</span> N,dst,to_end=<span class="number">1</span>; <span class="comment">// dst：目的地，to_end</span></span><br><span class="line"><span class="keyword">int</span> status=<span class="number">0</span>; <span class="comment">// 路径记录状态码</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> ret = <span class="number">-1</span>; <span class="comment">// 记录最小值，一开始利用数据类型的特点设定为最大值</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(dp[now][status]) <span class="keyword">return</span> dp[now][status]; <span class="comment">// 若已计算过，则直接返回算过的值</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(status==to_end) <span class="keyword">return</span> hamiton[now][dst]; <span class="comment">// 问题边界</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;dst;++i) &#123; <span class="comment">// 函数主体</span></span><br><span class="line">    <span class="keyword">if</span>(table2[i]&amp;status) <span class="keyword">continue</span>; <span class="comment">// 已经经过的路径就不走了</span></span><br><span class="line">    status |= table2[i]; <span class="comment">// 通过位运算标记已经过的地点</span></span><br><span class="line">    <span class="keyword">int</span> tmp = hamiton[now][i]+dfs(i); <span class="comment">// 获取dfs值</span></span><br><span class="line">    status ^= table2[i]; <span class="comment">// 还原原的状态，为下一次查找做准备</span></span><br><span class="line">    <span class="keyword">if</span>(ret&gt;tmp) ret = tmp; <span class="comment">// 检测是否为最短路径</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  dp[now][status] = ret; <span class="comment">// 记录最短路径</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin); // 读取输入</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 预处理2次方表</span></span><br><span class="line">  table2[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">20</span>;++i) &#123;</span><br><span class="line">    table2[i] = table2[i<span class="number">-1</span>]&lt;&lt;<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 清零dp数组</span></span><br><span class="line">  <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line">  dst = N<span class="number">-1</span>; <span class="comment">// 终点，最后才需要到达</span></span><br><span class="line">  <span class="keyword">if</span>(N==<span class="number">1</span>) &#123; <span class="comment">// N==1的情况</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;dst;++i) &#123; <span class="comment">// 记录问题边界（经过了除最后一个地方外的所有地方）</span></span><br><span class="line">      to_end = (to_end&lt;&lt;<span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i) &#123; <span class="comment">// 读取输入</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;++j) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;hamiton[i][j]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    status += table2[<span class="number">0</span>]; <span class="comment">// 从第一个地方（0）出发</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,dfs(<span class="number">0</span>)); <span class="comment">// 递归输出</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;有N个地方，分别标记为0到N-1，现在给定每两个地点之间的距离，要你求出最短的经过所有地方的路程。&lt;/p&gt;
&lt;p&gt;其中，$N&amp;lt;=20$&lt;/p&gt;
&lt;h2 id=&quot;思路&quot;&gt;思路&lt;/h2&gt;
&lt;p&gt;动态规划，记录两个状态&lt;/p&gt;
&lt;ol</summary>
      
    
    
    
    
    <category term="c++" scheme="http://laclic.github.io/tags/c/"/>
    
    <category term="dynamic programming" scheme="http://laclic.github.io/tags/dynamic-programming/"/>
    
    <category term="contest hunter" scheme="http://laclic.github.io/tags/contest-hunter/"/>
    
  </entry>
  
  <entry>
    <title>FZU2021-0xd7-吉哥系列故事——恨7不成妻</title>
    <link href="http://laclic.github.io/2021/03/08/FZU2021-0xd7-%E5%90%89%E5%93%A5%E7%B3%BB%E5%88%97%E6%95%85%E4%BA%8B%E2%80%94%E2%80%94%E6%81%A87%E4%B8%8D%E6%88%90%E5%A6%BB/"/>
    <id>http://laclic.github.io/2021/03/08/FZU2021-0xd7-%E5%90%89%E5%93%A5%E7%B3%BB%E5%88%97%E6%95%85%E4%BA%8B%E2%80%94%E2%80%94%E6%81%A87%E4%B8%8D%E6%88%90%E5%A6%BB/</id>
    <published>2021-03-08T10:36:56.000Z</published>
    <updated>2021-03-09T09:09:30.379Z</updated>
    
    <content type="html"><![CDATA[<p>非常好的一道题目，需要及其清晰的思路，以及对取模的理解，受益匪浅！</p><h2 id="题意">题意</h2><p>有个人很讨厌7相关的数，现在他给定你L和R，要你求取[L,R]中（闭区间，取L和R两端）所有于7<strong>无关</strong>的数的平方和。</p><p>定义：只要满足以下<strong>任意一个</strong>条件即为与7<strong>有关</strong>的数</p><ol><li>任意一位为7（数字中带有7）</li><li>所有位上数字之和为7</li><li>可被7整除</li></ol><p>数据范围：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="14.903ex" height="2.52ex" role="img" focusable="false" viewBox="0 -864 6587 1114"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(681, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1125.7, 0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(2162.4, 0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mo" transform="translate(3107.2, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(3496.2, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3996.2, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msup" transform="translate(4440.9, 0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500, 0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1000, 393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(500, 0)"></path></g></g></g><g data-mml-node="mo" transform="translate(6198, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p><p>由于最后数非常大，要求答案对10^9+7取模</p><h2 id="思路">思路</h2><p>数位DP，备忘录算法，将已经算好的位存储到数组中，方便直接读取</p><p>状态转移方程：</p><p>$(now+sum)^2=cnt<em>now^2+2</em>now*Σsum+Σsum^2$</p><p>DP状态为：当前所处位数、当前各位数之和对7取模的余数、当前数对7取模的余数</p><p>取模的性质：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a+b取模 == （a取模 + b取模）取模</span><br><span class="line">a*b取模 == （a取模*b取模）*取模</span><br><span class="line">a^N取模 == （a取模^N）取模</span><br></pre></td></tr></table></figure><h2 id="代码">代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">dp</span>{</span></span><br><span class="line">  ll cnt;</span><br><span class="line">  ll sum;</span><br><span class="line">  ll sq_sum;</span><br><span class="line">}DP;</span><br><span class="line"></span><br><span class="line">DP dp[<span class="number">18</span>][<span class="number">7</span>][<span class="number">7</span>]; <span class="comment">// dp[bits][num on bits sum%7][this num%7]</span></span><br><span class="line">ll table10[<span class="number">19</span>];</span><br><span class="line"><span class="keyword">char</span> digits[<span class="number">18</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">DP <span class="title">dfs</span><span class="params">(<span class="keyword">bool</span> isMax,<span class="keyword">int</span> layer,<span class="keyword">int</span> prev_digits_sum,<span class="keyword">int</span> prev_mod7)</span> </span>{</span><br><span class="line">  <span class="comment">// layer==0为个位，1为十位，以此类推...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// edge</span></span><br><span class="line">  <span class="keyword">if</span>(layer==<span class="number">-1</span>) { <span class="comment">// 当前处于-1层，为问题边界，只返回当前数是否与7相关</span></span><br><span class="line">    <span class="keyword">if</span>(prev_digits_sum==<span class="number">0</span>||prev_mod7==<span class="number">0</span>) {</span><br><span class="line">      <span class="keyword">return</span> {<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>};</span><br><span class="line">    }<span class="keyword">else</span> {</span><br><span class="line">      <span class="keyword">return</span> {<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>};</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">// note</span></span><br><span class="line">  <span class="keyword">if</span>(!isMax&amp;&amp;dp[layer][prev_digits_sum][prev_mod7].cnt) {</span><br><span class="line">    <span class="keyword">return</span> dp[layer][prev_digits_sum][prev_mod7];</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">// get max</span></span><br><span class="line">  <span class="keyword">int</span> maxx = isMax?digits[layer]:<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// check every digit</span></span><br><span class="line">  DP ret = {<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>};</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=maxx;++i) {</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">7</span>) <span class="keyword">continue</span>;</span><br><span class="line">    ll now = i*table10[layer]%MOD;</span><br><span class="line">    DP tmp = dfs(isMax&amp;&amp;i==maxx,layer<span class="number">-1</span>,(prev_digits_sum+i)%<span class="number">7</span>,(prev_mod7+table10[layer]%<span class="number">7</span>*i)%<span class="number">7</span>);</span><br><span class="line">    ret.cnt = (ret.cnt + tmp.cnt)%MOD;</span><br><span class="line">    ret.sum = (ret.sum + now*tmp.cnt%MOD + tmp.sum)%MOD;</span><br><span class="line">    ret.sq_sum = (ret.sq_sum + tmp.cnt*((now*now)%MOD)%MOD + <span class="number">2</span>*((now*tmp.sum)%MOD)%MOD + tmp.sq_sum)%MOD;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">// take note in dp</span></span><br><span class="line">  <span class="keyword">if</span>(!isMax) {</span><br><span class="line">    dp[layer][prev_digits_sum][prev_mod7] = ret;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">cal</span><span class="params">(ll x)</span> </span>{</span><br><span class="line">  <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(;x;x/=<span class="number">10</span>) {</span><br><span class="line">    digits[len] = x%<span class="number">10</span>;</span><br><span class="line">    ++len;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> dfs(<span class="literal">true</span>,len<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>).sq_sum;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="comment">// freopen("in.txt","r",stdin); // 读取输入</span></span><br><span class="line">  <span class="comment">// initialize</span></span><br><span class="line">  <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">  table10[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">18</span>;++i) {</span><br><span class="line">    table10[i] = table10[i<span class="number">-1</span>]*<span class="number">10</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> N;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</span><br><span class="line">  ll L,R;</span><br><span class="line">  <span class="keyword">for</span>(;N;--N) {</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;L,&amp;R);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(cal(R)-cal(L<span class="number">-1</span>)+MOD)%MOD);</span><br><span class="line">  }</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;非常好的一道题目，需要及其清晰的思路，以及对取模的理解，受益匪浅！&lt;/p&gt;
&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;有个人很讨厌7相关的数，现在他给定你L和R，要你求取[L,R]中（闭区间，取L和R两端）所有于7&lt;strong&gt;无关&lt;/strong&gt;的数的平方和。&lt;/</summary>
      
    
    
    
    
    <category term="FZUACM" scheme="http://laclic.github.io/tags/FZUACM/"/>
    
    <category term="c++" scheme="http://laclic.github.io/tags/c/"/>
    
    <category term="dynamic programming" scheme="http://laclic.github.io/tags/dynamic-programming/"/>
    
  </entry>
  
  <entry>
    <title>Android开发-gradle sync出错解决: Failed to open zip file.</title>
    <link href="http://laclic.github.io/2021/02/22/Android%E5%BC%80%E5%8F%91-gradle-sync%E5%87%BA%E9%94%99%E8%A7%A3%E5%86%B3-Failed-to-open-zip-file/"/>
    <id>http://laclic.github.io/2021/02/22/Android%E5%BC%80%E5%8F%91-gradle-sync%E5%87%BA%E9%94%99%E8%A7%A3%E5%86%B3-Failed-to-open-zip-file/</id>
    <published>2021-02-22T14:41:10.000Z</published>
    <updated>2021-03-13T05:23:55.274Z</updated>
    
    <content type="html"><![CDATA[<p>Created by: © LacLic</p><h2 id="错误发生">错误发生</h2><p>进行gradle sync的时候，下载完文件发现出现报错<code>Failed to open zip file.</code></p><p> 报错：<em>无法打开zip文件，gradle的缓存文件损坏（可能是网络连接超时的缘故）</em></p><p><img src="https://i.loli.net/2021/02/22/p25ztxFT4S9q7bV.png" alt="1.png"></p><h2 id="解决方案">解决方案</h2><p>删除原来的缓存文件，重新下载gradle包丢入缓存文件夹即可，详见<a href="##%E9%94%99%E8%AF%AF%E5%8E%9F%E5%9B%A0">错误原因</a></p><h2 id="错误原因">错误原因</h2><p>错误报告中显示，无法打开zip文件，使用<code>ctrl+shift+R</code>进行全局搜索，寻找关于<code>.zip</code>文件的信息</p><p><img src="https://i.loli.net/2021/02/22/iPnbyKzGJ5qrTFU.png" alt="2.png"></p><p>找到下载所需的gradle包的网址，丢入浏览器下载zip文件（记得删除里面的反斜杠，那是用来逃逸冒号的）</p><p>将下载好的文件丢入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\[用户]\.gradle\wrapper\dists\gradle-[版本号]-all\[奇怪的序列]\</span><br></pre></td></tr></table></figure><p>的目录下后，重新进行gradle sync或者直接试运行程序</p><p><img src="https://i.loli.net/2021/02/22/25k8K1J9OVzAwlI.png" alt="3.png"></p><p>成功！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Created by: © LacLic&lt;/p&gt;
&lt;h2 id=&quot;错误发生&quot;&gt;错误发生&lt;/h2&gt;
&lt;p&gt;进行gradle sync的时候，下载完文件发现出现报错&lt;code&gt;Failed to open zip file.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; 报错：&lt;em&gt;无法打开</summary>
      
    
    
    
    
    <category term="android" scheme="http://laclic.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android开发-百分比布局percentLayout的gradle依赖添加与报错</title>
    <link href="http://laclic.github.io/2021/02/22/Android%E5%BC%80%E5%8F%91-%E7%99%BE%E5%88%86%E6%AF%94%E5%B8%83%E5%B1%80%E7%9A%84gradle%E4%BE%9D%E8%B5%96%E6%B7%BB%E5%8A%A0%E4%B8%8E%E6%8A%A5%E9%94%99/"/>
    <id>http://laclic.github.io/2021/02/22/Android%E5%BC%80%E5%8F%91-%E7%99%BE%E5%88%86%E6%AF%94%E5%B8%83%E5%B1%80%E7%9A%84gradle%E4%BE%9D%E8%B5%96%E6%B7%BB%E5%8A%A0%E4%B8%8E%E6%8A%A5%E9%94%99/</id>
    <published>2021-02-22T12:40:34.000Z</published>
    <updated>2021-03-13T05:24:19.431Z</updated>
    
    <content type="html"><![CDATA[<p>Created by: © LacLic</p><h2 id="错误发生">错误发生</h2><p>在工程文件夹的app/build.gradle的依赖中添加<code>compile 'com.android.support:percent:24.2.1'</code>的时候，出现的报错（代码来自《第一行代码（第二版）》）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Version 28 (intended for Android Pie and below) is the last version of the legacy support library, so we recommend that you migrate to AndroidX libraries when using Android Q and moving forward. The IDE can help with this: Refactor &gt; Migrate to AndroidX...</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/22/IuriaKpYSZgCDQe.png" alt="1.png"></p><h2 id="解决方案">解决方案</h2><p><font color=#cc3f40>谷歌开发者文档注：</font></p><blockquote><p>此工件及其类已弃用。请改用 ConstraintLayout 和关联布局。</p></blockquote><hr><p>将</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile &#39;com.android.support:percent:24.2.1&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation &quot;androidx.percentlayout:percentlayout:1.0.0&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即可，之后记得点击视窗上端的<code>sync now</code></p><p><img src="https://i.loli.net/2021/02/22/ZCYhavm4z2lAgKS.png" alt="2.png"></p><h2 id="错误原因">错误原因</h2><p>考虑到书本教程<strong>过时了</strong>，没有办法及时同步开发工具的更新。</p><p>一开始的确是<code>compile</code>开头的方式引入依赖</p><p>后来改为了下图中红色的样式</p><p><img src="https://i.loli.net/2021/02/22/dplx8nhmI6MAisD.png" alt="3.png"></p><p>再后来才改为<code>implementation &quot;androidx.percentlayout:percentlayout:1.0.0&quot;</code>的形式</p><p>我们到谷歌的 <a href="https://developer.android.google.cn/jetpack/androidx/releases/percentlayout?hl=zh-cn">开发者文档</a> 中查询到</p><p><img src="https://i.loli.net/2021/02/22/flehy16c2C3Uuki.png" alt="4.png"></p><p>这个工件已被谷歌官方弃用，但仍旧是可以使用的。猜测：应该是为了方便熟悉这个工件不愿使用其他布局的程序员（要与时俱进啊！），或者是为了方便旧项目的维护而保留的（毕竟一改就要改一堆）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Created by: © LacLic&lt;/p&gt;
&lt;h2 id=&quot;错误发生&quot;&gt;错误发生&lt;/h2&gt;
&lt;p&gt;在工程文件夹的app/build.gradle的依赖中添加&lt;code&gt;compile &#39;com.android.support:percent:24.2.1&#39;&lt;/code</summary>
      
    
    
    
    
    <category term="android" scheme="http://laclic.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android开发-手绘图文详解活动的生命周期</title>
    <link href="http://laclic.github.io/2021/02/21/Android%E5%BC%80%E5%8F%91-%E6%89%8B%E7%BB%98%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%E6%B4%BB%E5%8A%A8%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://laclic.github.io/2021/02/21/Android%E5%BC%80%E5%8F%91-%E6%89%8B%E7%BB%98%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%E6%B4%BB%E5%8A%A8%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2021-02-21T11:09:19.000Z</published>
    <updated>2021-03-13T05:24:37.618Z</updated>
    
    <content type="html"><![CDATA[<p>Created by: © LacLic</p><p>绘图软件为 GoodNotes 5</p><h2 id="详解">详解</h2><ol><li>打开app，第一个活动Acitivity入栈，调用3个act1方法</li><li>点击按钮button，第二个活动入栈，调用2个act1方法，3个act2方法</li></ol><p><img src="https://i.loli.net/2021/02/21/KIptrYC5FJAbXBz.jpg" alt="Android-2.jpg"></p><ol start="3"><li>点击menu，调用act2的创建菜单方法</li><li>点击菜单选项option，调用选项选择方法</li></ol><p><img src="https://i.loli.net/2021/02/21/cdeJlCb1rtBqwOz.jpg" alt="Android-3.jpg"></p><ol start="5"><li>点击button，对话dialog活动入栈，调用act2的1个方法，调用对话活动actDlg的3个方法</li><li>点击返回，finish()了actDlg，调用actDlg的的3个方法，调用act2的1个方法</li></ol><p><img src="https://i.loli.net/2021/02/21/Nsxj4dmMQInzFGh.jpg" alt="Android-4.jpg"></p><ol start="7"><li>点击返回，finish()了act2，调用act2的3个方法，调用act1的2个方法</li><li>再次点击返回，finish()了act1，调用了act1的3个方法，并退出app</li></ol><p><img src="https://i.loli.net/2021/02/21/4KsxUREH1c2hvWA.jpg" alt="Android-5.jpg"></p><h3 id="总结">总结</h3><p>当新活动不完全置顶（上一个活动还有效）时，只会调用上一个活动的onPause。<br>恢复后，只会调用onResume。</p><p>当新活动完全置顶（上一个活动完全被遮盖），会调用onPasue和onStop。<br>恢复后，会调用onResume和onStart。</p><p>当一个活动finish()后，会调用onPasue, onStop与onDestroy。<br>启动时，会调用onResume, onStart和onCreate。</p><h3 id="启动与终止的对应关系">启动与终止的对应关系</h3><table><thead><tr><th style="text-align:center">onCreate</th><th style="text-align:center">onStart</th><th style="text-align:center">onResume</th><th style="text-align:center">onPasue</th><th style="text-align:center">onStop</th><th style="text-align:center">onDestroy</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">—</td><td style="text-align:center">—</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">—</td><td style="text-align:center">—</td><td style="text-align:center">—</td><td style="text-align:center">—</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">—</td><td style="text-align:center">—</td><td style="text-align:center">—</td><td style="text-align:center">—</td><td style="text-align:center">—</td><td style="text-align:center">—</td></tr></tbody></table><p><img src="https://i.loli.net/2021/02/21/8XdvikqcteGJM7U.png" alt="6CJJ_GG1BA92GB2BSS_YYLQ.png"><br>图来自《第一行代码（第二版）》</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Created by: © LacLic&lt;/p&gt;
&lt;p&gt;绘图软件为 GoodNotes 5&lt;/p&gt;
&lt;h2 id=&quot;详解&quot;&gt;详解&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;打开app，第一个活动Acitivity入栈，调用3个act1方法&lt;/li&gt;
&lt;li&gt;点击按钮button，第二个活</summary>
      
    
    
    
    
    <category term="Android" scheme="http://laclic.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces-Approximating a Constant Range</title>
    <link href="http://laclic.github.io/2021/02/19/Codeforces-Approximating-a-Constant-Range/"/>
    <id>http://laclic.github.io/2021/02/19/Codeforces-Approximating-a-Constant-Range/</id>
    <published>2021-02-19T12:11:02.000Z</published>
    <updated>2021-02-19T15:05:04.305Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个长度位n的数组a，相邻的数的差小于等于1（|a<del>i+1</del> - a<del>i</del>| ≤ 1），现在求它的一个最大区间的长度，这个区间要求：最大值和最小值之差不大于1。</p><p>2 ≤ n ≤ 100 000</p><p>1 ≤ a_i ≤ 100 000</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>从头遍历：</p><ol><li>给当前符合条件的数组计算长度。</li><li>保存相同数的长度，以准备下一个不符合原先条件的数。</li><li>设定一个max保存最大值</li></ol><p><img src="https://i.loli.net/2021/02/19/CKxVOPG5S9zo1fb.gif" alt="黑板.gif"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100006</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> prev = a[<span class="number">0</span>], max=<span class="number">1</span>, bias=<span class="number">0</span>, same=<span class="number">1</span>, has_made=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i) &#123;</span><br><span class="line">    <span class="keyword">int</span> dif = a[i] - prev;</span><br><span class="line">    <span class="keyword">if</span>(dif==<span class="number">0</span>) &#123;</span><br><span class="line">      ++same;</span><br><span class="line">      ++has_made;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(bias==dif || !bias) &#123;</span><br><span class="line">        ++has_made;</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123; <span class="comment">// 2 3 2 2 2 2 2 2 2 1 2</span></span><br><span class="line">        has_made = same+<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      same = <span class="number">1</span>;</span><br><span class="line">      prev = a[i];</span><br><span class="line">      bias = -dif;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(has_made&gt;max) &#123;</span><br><span class="line">      max = has_made;</span><br><span class="line">      <span class="comment">// printf(&quot;%d %d\n&quot;,i ,max);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,max);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给定一个长度位n的数组a，相邻的数的差小于等于1（|a&lt;del&gt;i+1&lt;/del&gt; - a&lt;del&gt;i&lt;/del&gt;| ≤ 1），现在求它的一</summary>
      
    
    
    
    
    <category term="c++" scheme="http://laclic.github.io/tags/c/"/>
    
    <category term="codeforces" scheme="http://laclic.github.io/tags/codeforces/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces-Two_Bases</title>
    <link href="http://laclic.github.io/2021/02/19/Codeforces-Two-Bases/"/>
    <id>http://laclic.github.io/2021/02/19/Codeforces-Two-Bases/</id>
    <published>2021-02-19T10:41:17.000Z</published>
    <updated>2021-02-19T15:08:25.622Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>对于一个n位，bx进制的数X，一个m位，by进制的数Y，比较它们的大小</p><p>1 ≤ n ≤ 10, 2 ≤ bx ≤ 40</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>进制转换后比较大小</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="comment">// 40**9 == 262,144,000,000,000</span></span><br><span class="line"><span class="comment">//                2,147,483,648 (int32)</span></span><br><span class="line"><span class="comment">//    9,223,372,036,854,775,807 (long long)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">cal</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> n,<span class="keyword">const</span> <span class="keyword">int</span> X)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> digits[<span class="number">10</span>];</span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">long</span> ret=<span class="number">0</span>, power=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;digits[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) &#123;</span><br><span class="line">    ret += power*digits[i];</span><br><span class="line">    power *= X;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">  <span class="keyword">int</span> n,m,X,Y;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;X);</span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">long</span> res_X = cal(n,X);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;m,&amp;Y);</span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">long</span> res_Y = cal(m,Y);</span><br><span class="line">  <span class="keyword">if</span>(res_X==res_Y) <span class="built_in">putchar</span>(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="built_in">putchar</span>(res_X&gt;res_Y?<span class="string">&#x27;&gt;&#x27;</span>:<span class="string">&#x27;&lt;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;对于一个n位，bx进制的数X，一个m位，by进制的数Y，比较它们的大小&lt;/p&gt;
&lt;p&gt;1 ≤ n ≤ 10, 2 ≤ bx ≤ 40&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="c++" scheme="http://laclic.github.io/tags/c/"/>
    
    <category term="codeforces" scheme="http://laclic.github.io/tags/codeforces/"/>
    
  </entry>
  
  <entry>
    <title>FZU2021-0xd6-F(x)</title>
    <link href="http://laclic.github.io/2021/02/17/FZU2021-0xd6-F-x/"/>
    <id>http://laclic.github.io/2021/02/17/FZU2021-0xd6-F-x/</id>
    <published>2021-02-17T15:19:20.000Z</published>
    <updated>2021-02-18T02:26:33.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>对于x的每一位，A<del>n</del><br>F(x) = A<del>n</del> * 2^n-1^ + A<del>n-1</del> * 2^n-2^ + … + A<del>2</del> * 2 + A<del>1</del> * 1</p><p>即：F(x) 表示，将x看作未进位的二进制数，转换为十进制后的结果</p><p>现在给定你两个数A和B，要求求出从0到B（取两端，闭区间）的数中，有多少个数（取任意一个数为X），使得F(X)&lt;F(A)</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先，暴力枚举是不可能的，10^9^，500ms肯定不够，必定超时。</p><p>其次，我们观察到，X全部取9肯定是F(X)最大的情况，且如果一个大的数成立，将其中任意位上的数变小，变小的数一定成立。</p><p>所以，我们按位只要找出大的且成立的数，统计出比它小且一定成立的数，就能解决问题。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>dp备忘录(memorandum)算法，4600取自：F(999 999 999) == 4599，10取自最多一共有10位数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1000000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ISMAX 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTMAX 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">10</span>][<span class="number">4600</span>],fA; <span class="comment">// fA == f(A)</span></span><br><span class="line"><span class="keyword">char</span> digits[<span class="number">10</span>]; <span class="comment">// note every digit of B</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">go</span><span class="params">(<span class="keyword">int</span> length, <span class="keyword">int</span> isMax, <span class="keyword">int</span> has_gained)</span> </span>&#123; <span class="comment">// has_gained += f(now we choose)</span></span><br><span class="line">  <span class="comment">// check this dp</span></span><br><span class="line">  <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/// ensure has_gained &lt;= fA</span></span><br><span class="line">  <span class="keyword">if</span>(has_gained &gt; fA) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/// we&#x27;ve traversed all the digits, this is the edge of the recursion</span></span><br><span class="line">  <span class="keyword">if</span>(length==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="comment">/// search the memorandum</span></span><br><span class="line">  <span class="keyword">if</span>(!isMax &amp;&amp; dp[length<span class="number">-1</span>][fA-has_gained]) <span class="keyword">return</span> dp[length<span class="number">-1</span>][fA-has_gained];</span><br><span class="line">  <span class="comment">/// check whether we&#x27;ve got to the max num of the digit</span></span><br><span class="line">  <span class="keyword">int</span> maxx = isMax ? digits[length<span class="number">-1</span>] : <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// go to next dp</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;<span class="number">1</span>;++i) &#123;</span><br><span class="line">    <span class="comment">/// go out of the roop</span></span><br><span class="line">    <span class="keyword">if</span>(i==maxx) &#123;</span><br><span class="line">      ret += go(length<span class="number">-1</span>, ISMAX &amp;&amp; isMax, has_gained + (i*(<span class="number">1</span>&lt;&lt;length<span class="number">-1</span>)));</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">int</span> temp = go(length<span class="number">-1</span>, NOTMAX, has_gained + (i*(<span class="number">1</span>&lt;&lt;length<span class="number">-1</span>)));</span><br><span class="line">      <span class="comment">// cut the branch if the return value of go() is 0, which means has_gained must bigger than fA next time</span></span><br><span class="line">      <span class="keyword">if</span>(!temp) <span class="keyword">break</span>;</span><br><span class="line">      ret += temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// note this dp in memorandum</span></span><br><span class="line">  <span class="keyword">if</span>(!isMax) dp[length<span class="number">-1</span>][fA-has_gained] = ret;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// return</span></span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// f(x)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ret = <span class="number">0</span>,power = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(;x;x/=<span class="number">10</span>) &#123;</span><br><span class="line">    ret += x%<span class="number">10</span> * power;</span><br><span class="line">    power *= <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get how many digits does x has</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">len_of</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    digits[length] = x%<span class="number">10</span>;</span><br><span class="line">    x/=<span class="number">10</span>;</span><br><span class="line">    ++length;</span><br><span class="line">  &#125;<span class="keyword">while</span> (x);</span><br><span class="line">  <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// printf(&quot;%d&quot;,len_of(999999999));</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">  <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">  dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> T,A,B;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=T;++i) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;A,&amp;B);</span><br><span class="line">    fA = f(A);</span><br><span class="line">    <span class="keyword">int</span> len = len_of(B);</span><br><span class="line">    <span class="comment">// printf(&quot;%d\n&quot;,go(len,ISMAX,0));</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Case #%d: %d\n&quot;</span>,i,go(len,ISMAX,<span class="number">0</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;对于x的每一位，A&lt;del&gt;n&lt;/del&gt;&lt;br&gt;F(x) = A&lt;del&gt;n&lt;/del&gt; * 2^n-1^ + A&lt;del&gt;n-1&lt;/de</summary>
      
    
    
    
    
    <category term="FZUACM" scheme="http://laclic.github.io/tags/FZUACM/"/>
    
    <category term="c++" scheme="http://laclic.github.io/tags/c/"/>
    
    <category term="dynamic programming" scheme="http://laclic.github.io/tags/dynamic-programming/"/>
    
  </entry>
  
  <entry>
    <title>FZU2021-0xd5-不要62</title>
    <link href="http://laclic.github.io/2021/02/14/FZU2021-0xd5-%E4%B8%8D%E8%A6%8162/"/>
    <id>http://laclic.github.io/2021/02/14/FZU2021-0xd5-%E4%B8%8D%E8%A6%8162/</id>
    <published>2021-02-14T03:46:53.000Z</published>
    <updated>2021-02-14T03:50:32.002Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>题目已经是中文了，就缩略说一下。</p><p>对于从n到m的数（闭区间，两端n和m要算），一共有多少个不含62且不含4的数？</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>算出从1到n，从1到m的符合题意的数的个数，相减即得</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>记得要删掉freopen啊！头一回吃了一个OLE(output limit exceed)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">has4</span><span class="params">(<span class="keyword">int</span> now)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(;now;now/=<span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(now%<span class="number">10</span>==<span class="number">4</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">has62</span><span class="params">(<span class="keyword">int</span> now)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(;now&gt;=<span class="number">62</span>;now/=<span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(now%<span class="number">100</span>==<span class="number">62</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1000001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n,m;</span><br><span class="line">  a[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1000000</span>;++i) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!has62(i)&amp;&amp;!has4(i)) a[i] = a[i<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> a[i] = a[i<span class="number">-1</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[m]-a[n<span class="number">-1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;题目已经是中文了，就缩略说一下。&lt;/p&gt;
&lt;p&gt;对于从n到m的数（闭区间，两端n和m要算），一共有多少个不含62且不含4的数？&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    
    <category term="FZUACM" scheme="http://laclic.github.io/tags/FZUACM/"/>
    
    <category term="c++" scheme="http://laclic.github.io/tags/c/"/>
    
    <category term="dynamic programming" scheme="http://laclic.github.io/tags/dynamic-programming/"/>
    
  </entry>
  
  <entry>
    <title>WriteUP-MISC(SP)-Seraph_JACK&#39;s red packet</title>
    <link href="http://laclic.github.io/2021/02/12/WriteUP-MISC-Seraph-JACK-s-red-packet/"/>
    <id>http://laclic.github.io/2021/02/12/WriteUP-MISC-Seraph-JACK-s-red-packet/</id>
    <published>2021-02-12T15:05:15.000Z</published>
    <updated>2021-02-13T02:42:00.887Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Seraph-JACK的新年红包（MISC，SP）"><a href="#Seraph-JACK的新年红包（MISC，SP）" class="headerlink" title="Seraph_JACK的新年红包（MISC，SP）"></a>Seraph_JACK的新年红包（MISC，SP）</h2><p>我个人属于菜狗，研究该题（？）路程过于坎坷，坚持了15个小时（中间睡了个觉），<del>主要是为了红包</del>。</p><h2 id="解红包过程"><a href="#解红包过程" class="headerlink" title="解红包过程"></a>解红包过程</h2><h3 id="开门见山"><a href="#开门见山" class="headerlink" title="开门见山"></a>开门见山</h3><p><img src="https://i.loli.net/2021/02/12/ZWVKghYziDRGTF4.png" alt="1.png"></p><p>中间大大一个hint死活看不见，<del>虽然最后解出来才知道怎么用</del>。</p><h3 id="开门网页源代码"><a href="#开门网页源代码" class="headerlink" title="开门网页源代码"></a>开门网页源代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>2021 新年快乐！<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;packet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span>2021 新年快乐<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;desc&quot;</span>&gt;</span>输入口令领取红包<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/help.html&quot;</span>&gt;</span>(?)<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span>输入口令：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pwdIn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;btn-box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;submit()&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">submit</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// hint: check GET /main.go</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> code = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#pwdIn&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> data = <span class="keyword">new</span> URLSearchParams();</span></span><br><span class="line"><span class="javascript">        data.append(<span class="string">&quot;code&quot;</span>, code);</span></span><br><span class="line"><span class="javascript">        fetch(<span class="string">&quot;/red_packet&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">            method: <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line">            body: data</span><br><span class="line"><span class="javascript">        &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line">            if (res.status === 200) &#123;</span><br><span class="line"><span class="javascript">                res.text().then(<span class="function"><span class="params">b</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">window</span>.location.href = b;</span></span><br><span class="line">                &#125;)</span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&quot;口令错误！&quot;</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#btn</span> &#123;</span></span><br><span class="line">        cursor: pointer;</span><br><span class="line">        border-radius: 8px;</span><br><span class="line">        font-size: xx-large;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#ffe24b</span>;</span></span><br><span class="line">        padding: 8px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    body &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#desc</span> &#123;</span></span><br><span class="line">        display: block;</span><br><span class="line">        font-size: large;</span><br><span class="line">        color: white;</span><br><span class="line">        text-align: center;</span><br><span class="line">        margin-top: 20px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#desc</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#ea0909</span>;</span></span><br><span class="line">        font-size: xx-small;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#pwdIn</span> &#123;</span></span><br><span class="line">        width: 180px;</span><br><span class="line">        font-size: large;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#pwd</span> &#123;</span></span><br><span class="line">        display: inline-block;</span><br><span class="line">        margin-top: 150px;</span><br><span class="line">        margin-bottom: 80px;</span><br><span class="line">        text-align: center;</span><br><span class="line">        font-size: large;</span><br><span class="line">        color: white;</span><br><span class="line"></span><br><span class="line">        padding: 16px;</span><br><span class="line">        border-radius: 8px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#btn-box</span> &#123;</span></span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: center;</span><br><span class="line">        margin-bottom: 20px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#title</span> &#123;</span></span><br><span class="line">        color: white;</span><br><span class="line">        font-weight: bolder;</span><br><span class="line">        font-size: xxx-large;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        margin: auto;</span><br><span class="line">        padding-top: 50px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#packet</span> &#123;</span></span><br><span class="line">        background-color: red;</span><br><span class="line">        border-radius: 8px;</span><br><span class="line">        padding: 2px 8px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先知道了，我们POST的口令，就是code的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> code = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#pwdIn&quot;</span>).value;</span><br><span class="line">        <span class="keyword">var</span> data = <span class="keyword">new</span> URLSearchParams();</span><br><span class="line">        data.append(<span class="string">&quot;code&quot;</span>, code);</span><br><span class="line">        fetch(<span class="string">&quot;/red_packet&quot;</span>, &#123;</span><br><span class="line">            method: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">            body: data</span><br></pre></td></tr></table></figure><p>然后看到了/main.go，<del>老瞎子经别人提醒之后才发现上面还有个/help.html</del></p><p><img src="https://i.loli.net/2021/02/12/emgxM2KszotBIuh.png" alt="2.png"></p><h3 id="main-go"><a href="#main-go" class="headerlink" title="/main.go"></a>/main.go</h3><p>发现main函数源码，<del>怎么是go写的，我爬了</del></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;crypto/sha256&quot;</span></span><br><span class="line"><span class="string">&quot;flag&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;2021 Happy new year!&quot;</span>)</span><br><span class="line"></span><br><span class="line">listen := flag.String(<span class="string">&quot;listen&quot;</span>, <span class="string">&quot;:11451&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">superSecretSalt := flag.String(<span class="string">&quot;salt&quot;</span>, <span class="string">&quot;this_is_not_the_salt&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">redPacket := flag.String(<span class="string">&quot;packet&quot;</span>, <span class="string">&quot;no_packet_here&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">flag.Parse()</span><br><span class="line"></span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line">r.POST(<span class="string">&quot;/red_packet&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">key := ctx.PostForm(<span class="string">&quot;code&quot;</span>)</span><br><span class="line">val := []<span class="keyword">byte</span>(key + *superSecretSalt)</span><br><span class="line">hash := sha256.Sum256(val[:])</span><br><span class="line"></span><br><span class="line">result := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">32</span>; i++ &#123;</span><br><span class="line">result += <span class="keyword">int</span>(hash[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> result == <span class="number">2021</span> &#123;</span><br><span class="line">ctx.Header(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/plain; charset=utf-8&quot;</span>)</span><br><span class="line">ctx.String(<span class="number">200</span>, *redPacket)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ctx.Status(http.StatusForbidden)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.NoRoute(gin.WrapH(http.FileServer(http.Dir(<span class="string">&quot;./static&quot;</span>))))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := r.Run(*listen); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看了一下，主要就是，主函数通过post方法获取code的值（是一个字符串），加上*redPacket字符串后，经过sha256加密，所得的每一位ascii码之和为2021时，KEY则为答案</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">superSecretSalt := flag.String(<span class="string">&quot;salt&quot;</span>, <span class="string">&quot;this_is_not_the_salt&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">redPacket := flag.String(<span class="string">&quot;packet&quot;</span>, <span class="string">&quot;no_packet_here&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">flag.Parse()</span><br><span class="line"></span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line">r.POST(<span class="string">&quot;/red_packet&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">key := ctx.PostForm(<span class="string">&quot;code&quot;</span>)</span><br><span class="line">val := []<span class="keyword">byte</span>(key + *superSecretSalt)</span><br><span class="line">hash := sha256.Sum256(val[:])</span><br><span class="line"></span><br><span class="line">result := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">32</span>; i++ &#123;</span><br><span class="line">result += <span class="keyword">int</span>(hash[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> result == <span class="number">2021</span> &#123;</span><br><span class="line">ctx.Header(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/plain; charset=utf-8&quot;</span>)</span><br><span class="line">ctx.String(<span class="number">200</span>, *redPacket)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ctx.Status(http.StatusForbidden)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>中，的<code>val := []byte(key + *superSecretSalt)</code> val就是key字符串和superSecretSalt指向的字符串相加</p><p>hash就是val经过sha256加密后的字符串<code>hash := sha256.Sum256(val[:])</code></p><p>如果结果为2021则通过口令<code>if result == 2021</code></p><h3 id="help-html"><a href="#help-html" class="headerlink" title="/help.html"></a>/help.html</h3><p><del>经过好心人指示</del>，眼瞎的我终于发现了help.html</p><p>打开来是这个</p><p><img src="https://i.loli.net/2021/02/12/PpNdLuTI1H6z3gh.png" alt="3.png"></p><p>源代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;再 放 送&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;span&gt;The character is: <span class="string">&#x27;&lt;span id=&quot;ch&quot;&gt;&lt;/span&gt;&#x27;</span>&lt;/span&gt;</span><br><span class="line">&lt;button onclick=<span class="string">&quot;left()&quot;</span>&gt;Go left&lt;/button&gt;</span><br><span class="line">&lt;button onclick=<span class="string">&quot;right()&quot;</span>&gt;Go right&lt;/button&gt;</span><br><span class="line">&lt;button onclick=<span class="string">&quot;back()&quot;</span>&gt;Go back&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="string">&quot;320K2/5oM1L(...省略剩下字符，一共16384个字符)&quot;</span></span><br><span class="line">    <span class="keyword">var</span> cur = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    update();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> p = <span class="built_in">parseInt</span>(<span class="built_in">window</span>.location.hash.substr(<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(p)) cur = p;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="comment">// ignore</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">&quot;#ch&quot;</span>).innerHTML = data[cur];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">left</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur &gt; <span class="number">8192</span>) &#123;</span><br><span class="line">            alert(<span class="string">&quot;Can&#x27;t go further!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">window</span>.location.hash = (cur * <span class="number">2</span>).toString();</span><br><span class="line">        update();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">right</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur &gt; <span class="number">8192</span>) &#123;</span><br><span class="line">            alert(<span class="string">&quot;Can&#x27;t go further!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">window</span>.location.hash = (cur * <span class="number">2</span> + <span class="number">1</span>).toString();</span><br><span class="line">        update();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">back</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur === <span class="number">1</span>) &#123;</span><br><span class="line">            alert(<span class="string">&quot;Can&#x27;t go back!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">window</span>.location.hash = <span class="built_in">Math</span>.floor(cur / <span class="number">2</span>).toString();</span><br><span class="line">        update();</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>仔细看了看，是每次走左(cur✖2)，是每次走右（cur✖2＋1），或是返回（cur➗2）</p><p>回显一个值：data的cur索引（data[cur]）对应字符</p><p>所以data是个索引表，考虑爆破它</p><p>爆破代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">&quot;320K2/5oM1Lu8mmsTg8_(...省略)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">50</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">ofstream outfile;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recur</span><span class="params">(<span class="keyword">int</span> sum, <span class="keyword">int</span> layer)</span> </span>&#123;</span><br><span class="line">ans[layer] = sum;</span><br><span class="line"><span class="keyword">if</span>(sum&gt;<span class="number">8192</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=layer;++i) &#123;</span><br><span class="line"><span class="comment">// printf(&quot;%c&quot;,s[ans[i]]);</span></span><br><span class="line">outfile &lt;&lt; s[ans[i]];</span><br><span class="line">&#125;</span><br><span class="line">outfile &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">recur(sum*<span class="number">2</span>,layer+<span class="number">1</span>);</span><br><span class="line">recur(sum*<span class="number">2</span>+<span class="number">1</span>,layer+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">outfile.open(<span class="string">&quot;out.txt&quot;</span>);</span><br><span class="line">recur(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">// printf(&quot;%d&quot;,&#x27;1&#x27;);</span></span><br><span class="line">outfile.close();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2o2l_h4ppy_new_ye4r</span></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://i.loli.net/2021/02/12/v7sQ4DgIjWpkhEq.png" alt="W@_7J_CG85AN_BR411_3YYY.png"></p><p>找到了2021_salt.html</p><p><img src="https://i.loli.net/2021/02/12/p4RrTnUjuzkl5NP.png" alt="4.png"></p><h3 id="回到main-go"><a href="#回到main-go" class="headerlink" title="回到main.go"></a>回到main.go</h3><p><code>superSecretSalt</code>有了，就是<code>2o2l_h4ppy_new_ye4r</code></p><p>想想和其他也没关系了，剩下就是sha256爆破，用go写了个爆破程序</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;crypto/sha256&quot;</span></span><br><span class="line"><span class="string">&quot;flag&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;2021 Happy new year!&quot;</span>)</span><br><span class="line"></span><br><span class="line">superSecretSalt := flag.String(<span class="string">&quot;salt&quot;</span>, <span class="string">&quot;2o2l_h4ppy_new_ye4r&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment">// redPacket := flag.String(&quot;packet&quot;, &quot;no_packet_here&quot;, &quot;&quot;)</span></span><br><span class="line">flag.Parse()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">999999999</span>; i++ &#123;</span><br><span class="line">key := fmt.Sprint(i)</span><br><span class="line"><span class="comment">// key := &quot;1&quot;</span></span><br><span class="line">val := []<span class="keyword">byte</span>(key + *superSecretSalt)</span><br><span class="line">hash := sha256.Sum256(val[:])</span><br><span class="line"></span><br><span class="line">result := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">32</span>; i++ &#123;</span><br><span class="line">result += <span class="keyword">int</span>(hash[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// print(result)</span></span><br><span class="line"><span class="comment">// print(&quot;\n&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> result == <span class="number">2021</span> &#123;</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/12/SZpJt8IzwfmPR5X.png" alt="6.png"></p><p>最后，<code>414134692</code>，即为答案口令</p><p><del>搁着挖矿呢.jpg</del>，还拿了挺多钱，快乐.jpg</p><p><img src="https://i.loli.net/2021/02/13/e2Ood37AkJZLwrI.jpg" alt="5.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Seraph-JACK的新年红包（MISC，SP）&quot;&gt;&lt;a href=&quot;#Seraph-JACK的新年红包（MISC，SP）&quot; class=&quot;headerlink&quot; title=&quot;Seraph_JACK的新年红包（MISC，SP）&quot;&gt;&lt;/a&gt;Seraph_JACK</summary>
      
    
    
    
    
    <category term="brute-force" scheme="http://laclic.github.io/tags/brute-force/"/>
    
    <category term="MISC" scheme="http://laclic.github.io/tags/MISC/"/>
    
    <category term="the Spring Festival" scheme="http://laclic.github.io/tags/the-Spring-Festival/"/>
    
    <category term="special" scheme="http://laclic.github.io/tags/special/"/>
    
    <category term="password" scheme="http://laclic.github.io/tags/password/"/>
    
  </entry>
  
  <entry>
    <title>FZU2021-0xd4-FOUR QUARTERS</title>
    <link href="http://laclic.github.io/2021/02/12/FZU2021-0xd4-FOUR-QUARTERS/"/>
    <id>http://laclic.github.io/2021/02/12/FZU2021-0xd4-FOUR-QUARTERS/</id>
    <published>2021-02-12T15:02:01.000Z</published>
    <updated>2021-02-13T02:31:40.701Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>有两个人比赛，各丢2个硬币，根据正反面情况，（A丢的为表格纵轴，B为横轴），计算二人得分。</p><p>现在要求你输出他们，进行到1-20局的胜负概率</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="做题思路"><a href="#做题思路" class="headerlink" title="做题思路"></a>做题思路</h3><p>首先，对抗性比赛只需要考虑分差，二人的得分情况（2个变量）转变为二人的分差（1个变量）。</p><p>其次，计算每人最终得分的权重，相乘即可。</p><p>最后，分差为负即为lose，正即为win，零即为draw/tie。</p><p><strong>不过要注意的是</strong>，最后输出是有额外格式要求的，但是给定的输出格式并没有详细说明。</p><h3 id="精度思路"><a href="#精度思路" class="headerlink" title="精度思路"></a>精度思路</h3><h4 id="胜负平权重-总权重（下面给的代码就是这个思路）"><a href="#胜负平权重-总权重（下面给的代码就是这个思路）" class="headerlink" title="胜负平权重/总权重（下面给的代码就是这个思路）"></a>胜负平权重/总权重（下面给的代码就是这个思路）</h4><p>这种思路下，最大数据会达到16^20^，也就是2^80^，long long 都不够，只能直接上double / long double（精度要求是小数点后4位，所以适合用浮点类型），实测后，我的本机使用double结果和long double结果一致，但是oj并非如此，使用double是WA，使用long double才能AC。</p><p><strong>要注意</strong>：long double使用的格式控制符是<code>&quot;%Lf&quot;</code></p><h4 id="直接在得分dp数组中储存概率"><a href="#直接在得分dp数组中储存概率" class="headerlink" title="直接在得分dp数组中储存概率"></a>直接在得分dp数组中储存概率</h4><p>这是最优解，全用double或long double，精度上思考量就小了，直接乘下去即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> dif=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">table</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> score; <span class="comment">// A - B</span></span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">  &#125;Table;</span><br><span class="line">  Table table[<span class="number">6</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">4</span>&#125;,&#123;<span class="number">2</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">0</span>,<span class="number">6</span>&#125;,&#123;<span class="number">-3</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">double</span> dp[<span class="number">2</span>][<span class="number">126</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// dp[now][score] = weight;</span></span><br><span class="line">  <span class="keyword">int</span> bias = <span class="number">63</span>;</span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">double</span> weight = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  dp[<span class="number">0</span>][bias] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Round   A wins    B wins    Tie\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> round=<span class="number">1</span>;round&lt;<span class="number">21</span>;++round) &#123; <span class="comment">// round &lt;= 20</span></span><br><span class="line">    <span class="keyword">int</span> now = round%<span class="number">2</span>, pre = !now, min = <span class="number">-3</span>*(round<span class="number">-1</span>), max = <span class="number">3</span>*(round<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">memset</span>(dp[now],<span class="number">0</span>,<span class="keyword">sizeof</span>(dp[now]));</span><br><span class="line">    weight = weight*<span class="number">16</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=min;i&lt;=max;++i) &#123;</span><br><span class="line">      <span class="keyword">if</span>(dp[pre][i+bias]) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">6</span>;++j) &#123;</span><br><span class="line">          dp[now][table[j].score+i+bias] += dp[pre][i+bias]*table[j].weight;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">double</span> win=<span class="number">0</span>, lose=<span class="number">0</span>, draw=dp[now][bias];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;bias;++i) &#123;</span><br><span class="line">      lose += dp[now][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=bias+<span class="number">1</span>;i&lt;<span class="number">126</span>;++i) &#123;</span><br><span class="line">      win += dp[now][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// printf(&quot;    %lld   %lld  %lld  %lld\n&quot;,round,win,lose,draw);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;   %2d   %7.4Lf%%  %7.4Lf%%  %7.4Lf%%\n&quot;</span>,round,<span class="number">1.0</span>*win/weight*<span class="number">100</span>,<span class="number">1.0</span>*lose/weight*<span class="number">100</span>,<span class="number">1.0</span>*draw/weight*<span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;有两个人比赛，各丢2个硬币，根据正反面情况，（A丢的为表格纵轴，B为横轴），计算二人得分。&lt;/p&gt;
&lt;p&gt;现在要求你输出他们，进行到1-20</summary>
      
    
    
    
    
    <category term="FZUACM" scheme="http://laclic.github.io/tags/FZUACM/"/>
    
    <category term="c++" scheme="http://laclic.github.io/tags/c/"/>
    
    <category term="dynamic programming" scheme="http://laclic.github.io/tags/dynamic-programming/"/>
    
    <category term="remains problem" scheme="http://laclic.github.io/tags/remains-problem/"/>
    
  </entry>
  
  <entry>
    <title>FZU2021-0xd3-Space Elevator</title>
    <link href="http://laclic.github.io/2021/02/09/FZU2021-0xd3-Space-Elevator/"/>
    <id>http://laclic.github.io/2021/02/09/FZU2021-0xd3-Space-Elevator/</id>
    <published>2021-02-09T15:06:21.000Z</published>
    <updated>2021-02-09T15:33:37.791Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>牛牛要上天啦！为了让他们在轨道上转，要建造一个高塔（这是要在高塔上把他们踢飞，然后变成卫星？？？）。</p><p>我们有K种方块，第i种方块高为h_i（可以把i当成数组下标），有c_i个，他们最高只能叠到高度a_i（题目说是因为有太空射线，太高容易坏掉，我也不知道什么怪异原理…）</p><p>(1 &lt;= K &lt;= 400)，<br>(1 &lt;= h_i &lt;= 100)，<br>(1 &lt;= c_i &lt;= 10)，<br>(1 &lt;= a_i &lt;= 40000)</p><p>现在请你寻求一种方法，使得叠出最高高度来（只要输出最高高度即可）</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>和前两题一样，是凑数型动态规划。</p><p>只要上一种高度dp（目前求高度 减去 当前种类方块）能凑出，手上还有当前种类方块，该高度dp一定能凑出。</p><p>如果该高度dp已经能凑出了，就不用浪费方块啦。</p><p>不过这题有个特点：<strong>高度限制</strong></p><p>&emsp;也就是说，你要先根据高度排序（从小到大开始），一个个去试，试到当前种类方块不能再往上叠了为止，否则会出现上一个方块叠满了（比如7高度，5个，限高80方块叠到了35），下一种方块（比如5高度，5个，限高25，遍历不到25以后的数据了）根本一个不能叠（只能到35了，但是5高度*5=25，没超限高，外加上7高度*5=60，明显更可行）。所有要先给他们排序。而c++里面库algorithm的sort()函数很好用√。</p><h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3><p>看到数据量后，我去dev-cpp跑了一下for循环看看遍历1600万个数据（400*40000）效率怎么样，结果好像挺好的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">400</span>;++j) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">40000</span>;++i) &#123;</span><br><span class="line">      <span class="keyword">if</span>(i==<span class="number">15</span>);</span><br><span class="line">      <span class="keyword">if</span>(i==<span class="number">69999</span>);</span><br><span class="line">      <span class="keyword">if</span>(i==<span class="number">10000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">单个循环：i to 1600000</span><br><span class="line">Process exited after 0.1482 seconds with return value 0</span><br><span class="line"></span><br><span class="line">双层循环：i to 40000, j to 400</span><br><span class="line">Process exited after 0.1369 seconds with return value 0</span><br></pre></td></tr></table></figure><p>貌似双层还快了点？不过应该只是运气问题，总之1600w数据+3个判断遍历大概只需要0.14s，或者说140ms这样，完全能完成题目时长1s的要求</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">block</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> h;</span><br><span class="line">  <span class="keyword">int</span> a;</span><br><span class="line">  <span class="keyword">int</span> c;</span><br><span class="line">&#125;Block;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义结构体的比大小~</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Block &amp;x,<span class="keyword">const</span> Block &amp;y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x.a &lt; y.a; <span class="comment">// 升序</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin); // 把in.txt内容当成输入，submit的时候要记得注释掉</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 读取输入</span></span><br><span class="line">  <span class="keyword">int</span> K;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;K);</span><br><span class="line">  Block block[K];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;++i) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;block[i].h,&amp;block[i].a,&amp;block[i].c);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 排序~</span></span><br><span class="line">  sort(block,block+K,cmp); <span class="comment">// 三个参数分别为，数组，数组终止处，（可选）数组排序标准函数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 找最大值</span></span><br><span class="line">  <span class="keyword">int</span> max = block[K<span class="number">-1</span>].a;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// dp预备</span></span><br><span class="line">  <span class="keyword">int</span> dp_isTrue[max+<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">int</span> used[max+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(dp_isTrue,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp_isTrue));</span><br><span class="line">  dp_isTrue[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// dp开始</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;++i) &#123;</span><br><span class="line">    <span class="comment">// 情况used[]数组</span></span><br><span class="line">    <span class="built_in">memset</span>(used,<span class="number">0</span>,<span class="keyword">sizeof</span>(used));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=block[i].h;j&lt;=block[i].a;++j) &#123;</span><br><span class="line">      <span class="keyword">if</span>(dp_isTrue[j-block[i].h]&amp;&amp;used[j-block[i].h]&lt;block[i].c&amp;&amp;!dp_isTrue[j]) &#123;</span><br><span class="line">        dp_isTrue[j] = <span class="number">1</span>;</span><br><span class="line">        used[j] = used[j-block[i].h] + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历寻找最大值</span></span><br><span class="line">  <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=max;++i) &#123;</span><br><span class="line">    <span class="keyword">if</span>(dp_isTrue[i]) ans = i;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;牛牛要上天啦！为了让他们在轨道上转，要建造一个高塔（这是要在高塔上把他们踢飞，然后变成卫星？？？）。&lt;/p&gt;
&lt;p&gt;我们有K种方块，第i种方</summary>
      
    
    
    
    
    <category term="FZUACM" scheme="http://laclic.github.io/tags/FZUACM/"/>
    
    <category term="c++" scheme="http://laclic.github.io/tags/c/"/>
    
    <category term="dynamic programming" scheme="http://laclic.github.io/tags/dynamic-programming/"/>
    
  </entry>
  
  <entry>
    <title>FZU2021-0xd2-Dividing</title>
    <link href="http://laclic.github.io/2021/02/09/FZU2021-0xd2-Dividing/"/>
    <id>http://laclic.github.io/2021/02/09/FZU2021-0xd2-Dividing/</id>
    <published>2021-02-09T01:22:42.000Z</published>
    <updated>2021-02-09T01:30:55.819Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>有两个人捡到了一组大理石，价值有1-6元，它们的个数分别有n1-n6个（总数不超过20000个）。</p><p>问，两人想以价值为基准平摊这组大理石，请你设计一个程序告诉他们能不能平摊</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>计算价值总和total，除以2得到target，通过dp计算出，能不能凑出价值为target的大理石组</p><p>剪枝：若total为奇数，必不可能成功</p><p>状态转移同前一题，每种大理石都去试一次</p><p>另外，记录使用大理石个数时，只有之前无法凑出的数字才需要使用新的大理石</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">  <span class="keyword">int</span> n[<span class="number">7</span>];</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> isTrue[<span class="number">60006</span>];</span><br><span class="line">    <span class="comment">// int isTrue[36];</span></span><br><span class="line">    <span class="keyword">int</span> used[<span class="number">60006</span>];</span><br><span class="line">    <span class="comment">// int used[36];</span></span><br><span class="line">  &#125; dp;</span><br><span class="line">  <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d %d %d&quot;</span>,&amp;n[<span class="number">1</span>],&amp;n[<span class="number">2</span>],&amp;n[<span class="number">3</span>],&amp;n[<span class="number">4</span>],&amp;n[<span class="number">5</span>],&amp;n[<span class="number">6</span>]);</span><br><span class="line">    <span class="keyword">if</span>(!n[<span class="number">1</span>]&amp;&amp;!n[<span class="number">2</span>]&amp;&amp;!n[<span class="number">3</span>]&amp;&amp;!n[<span class="number">4</span>]&amp;&amp;!n[<span class="number">5</span>]&amp;&amp;!n[<span class="number">6</span>]) <span class="keyword">break</span>;</span><br><span class="line">    ++cnt;</span><br><span class="line">    <span class="built_in">memset</span>(dp.isTrue,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp.isTrue));</span><br><span class="line">    dp.isTrue[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> target=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">6</span>;++i) &#123;</span><br><span class="line">      target += i*n[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(target%<span class="number">2</span>==<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Collection #%d:\nCan&#x27;t be divided.\n\n&quot;</span>,cnt);</span><br><span class="line">      dp.isTrue[target] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    target /= <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">6</span>;++i) &#123;</span><br><span class="line">      <span class="built_in">memset</span>(dp.used,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp.used));</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=target;++j) &#123;</span><br><span class="line">        <span class="keyword">if</span>(dp.isTrue[j-i]&amp;&amp;dp.used[j-i]&lt;n[i]&amp;&amp;!dp.isTrue[j]) &#123; <span class="comment">// 上一种dp能否凑出相应价值来，上一种dp用了多少第i种石头，该种dp是否之前就能凑出来了</span></span><br><span class="line">          dp.isTrue[j] = <span class="number">1</span>;</span><br><span class="line">          dp.used[j] = dp.used[j-i] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    here: ;</span><br><span class="line">    <span class="keyword">if</span>(dp.isTrue[target]) <span class="built_in">printf</span>(<span class="string">&quot;Collection #%d:\nCan be divided.\n\n&quot;</span>,cnt);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Collection #%d:\nCan&#x27;t be divided.\n\n&quot;</span>,cnt);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;有两个人捡到了一组大理石，价值有1-6元，它们的个数分别有n1-n6个（总数不超过20000个）。&lt;/p&gt;
&lt;p&gt;问，两人想以价值为基准平摊</summary>
      
    
    
    
    
    <category term="FZUACM" scheme="http://laclic.github.io/tags/FZUACM/"/>
    
    <category term="c++" scheme="http://laclic.github.io/tags/c/"/>
    
    <category term="dynamic programming" scheme="http://laclic.github.io/tags/dynamic-programming/"/>
    
  </entry>
  
  <entry>
    <title>深度学习：构建神经网络并识别手写数字</title>
    <link href="http://laclic.github.io/2021/02/08/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%9A%E6%9E%84%E5%BB%BA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%B9%B6%E8%AF%86%E5%88%AB%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97/"/>
    <id>http://laclic.github.io/2021/02/08/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%9A%E6%9E%84%E5%BB%BA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%B9%B6%E8%AF%86%E5%88%AB%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97/</id>
    <published>2021-02-08T04:14:19.000Z</published>
    <updated>2021-02-09T01:46:22.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>可以看出（10个数据，分别是认为该数字为0-9的程度，最后取最高的那个即为结果）基本能正确识别</p><p><img src="https://i.loli.net/2021/02/08/wANkfxl8VdML4Zn.png" alt="Z.png"></p><p>但是1和7，4和9还是不太容易识别的</p><p><img src="https://i.loli.net/2021/02/08/c7LmsOK9vDI3Cbk.png" alt="O.png"></p><h2 id="github链接"><a href="#github链接" class="headerlink" title="github链接"></a>github链接</h2><p><a href="https://github.com/LacLic/hand-writting-num-recognizer">Github</a>.</p><h2 id="全代码（ipynb）"><a href="#全代码（ipynb）" class="headerlink" title="全代码（ipynb）"></a>全代码（ipynb）</h2><h3 id="引入库"><a href="#引入库" class="headerlink" title="引入库"></a>引入库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="comment"># scipy.special for the sigmoid function expit()</span></span><br><span class="line"><span class="keyword">import</span> scipy.special</span><br><span class="line"><span class="comment"># library for plotting arrays</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot</span><br><span class="line"><span class="comment"># (?) ensure the plots are inside this notebook, not an external window</span></span><br><span class="line"><span class="comment"># %matplotlib inline</span></span><br></pre></td></tr></table></figure><h3 id="构建神经网络类"><a href="#构建神经网络类" class="headerlink" title="构建神经网络类"></a>构建神经网络类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">neuralNetwork</span>():</span>  <span class="comment"># neural network class definition</span></span><br><span class="line">    <span class="comment"># initialize the neural network</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, inputNodes, hiddenNodes, outputNodes, learningRate</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># set number of nodes in each input, hidden, output layer</span></span><br><span class="line">        self.iNodes = inputNodes</span><br><span class="line">        self.hNodes = hiddenNodes</span><br><span class="line">        self.oNodes = outputNodes</span><br><span class="line"></span><br><span class="line">        <span class="comment"># learning rate</span></span><br><span class="line">        self.learnRate = learningRate</span><br><span class="line"></span><br><span class="line">        <span class="comment"># link weight matrices, wih and who</span></span><br><span class="line">        <span class="comment"># weight inside the arrays are w_i_j, where link is from node i to node j in the next layer</span></span><br><span class="line">        <span class="comment"># w11 w21</span></span><br><span class="line">        <span class="comment"># w12 w22 etc</span></span><br><span class="line">        self.wih = numpy.random.normal(</span><br><span class="line">            <span class="number">0.0</span>, <span class="built_in">pow</span>(self.hNodes, <span class="number">-0.5</span>), (self.hNodes, self.iNodes))</span><br><span class="line">        self.who = numpy.random.normal(</span><br><span class="line">            <span class="number">0.0</span>, <span class="built_in">pow</span>(self.oNodes, <span class="number">-0.5</span>), (self.oNodes, self.hNodes))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># annoymous func</span></span><br><span class="line">        self.actiFunc = <span class="keyword">lambda</span> x: scipy.special.expit(x)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># train the neural network</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train</span>(<span class="params">self, inputs_list, targets_list</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># convert inputs and targets list to 2d array</span></span><br><span class="line">        inputs = numpy.array(inputs_list, ndmin=<span class="number">2</span>).T</span><br><span class="line">        targets = numpy.array(targets_list, ndmin=<span class="number">2</span>).T</span><br><span class="line"></span><br><span class="line">        <span class="comment"># calculate signals into hidden layer</span></span><br><span class="line">        hidden_inputs = numpy.dot(self.wih, inputs)</span><br><span class="line">        <span class="comment"># calculate the signals emerging from hidden layer</span></span><br><span class="line">        hidden_outputs = self.actiFunc(hidden_inputs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># calculate signals into final output layer</span></span><br><span class="line">        final_inputs = numpy.dot(self.who, hidden_outputs)</span><br><span class="line">        <span class="comment"># calculate the signals emerging from final output layer</span></span><br><span class="line">        final_outputs = self.actiFunc(final_inputs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># error is the difference of target and output</span></span><br><span class="line">        output_errors = targets - final_inputs</span><br><span class="line">        <span class="comment"># hidden layer error is the output_errors, split by weights, recombined at hidden nodes</span></span><br><span class="line">        hidden_errors = numpy.dot(self.who.T, output_errors)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># update the weights for the links between the hidden and output layers</span></span><br><span class="line">        self.who += self.learnRate * \</span><br><span class="line">            numpy.dot((output_errors*final_outputs*(<span class="number">1.0</span>-final_outputs)),</span><br><span class="line">                      numpy.transpose(hidden_outputs))</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        self.who += self.learnRate * \</span></span><br><span class="line"><span class="string">            numpy.dot((output_errors*final_outputs*(1.0-final_outputs)),</span></span><br><span class="line"><span class="string">                      hidden_outputs.T)&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># between the input and hidden layers</span></span><br><span class="line">        self.wih += self.learnRate * \</span><br><span class="line">            numpy.dot((hidden_errors*hidden_outputs *</span><br><span class="line">                       (<span class="number">1.0</span> - hidden_outputs)), numpy.transpose(inputs))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># query the neural network</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query</span>(<span class="params">self, inputs_list</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># convert inputs list to 2d array</span></span><br><span class="line">        inputs = numpy.array(inputs_list, ndmin=<span class="number">2</span>).T</span><br><span class="line"></span><br><span class="line">        <span class="comment"># calculate signals into hidden layer</span></span><br><span class="line">        hidden_inputs = numpy.dot(self.wih, inputs)</span><br><span class="line">        <span class="comment"># calculate the signals emerging from hidden layer</span></span><br><span class="line">        hidden_outputs = self.actiFunc(hidden_inputs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># calculate signals into final output layer</span></span><br><span class="line">        final_inputs = numpy.dot(self.who, hidden_outputs)</span><br><span class="line">        <span class="comment"># calculate the signals emerging from final output layer</span></span><br><span class="line">        final_outputs = self.actiFunc(final_inputs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> final_outputs</span><br></pre></td></tr></table></figure><h3 id="网络布置"><a href="#网络布置" class="headerlink" title="网络布置"></a>网络布置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">input_nodes = <span class="number">784</span>  <span class="comment"># 28*28</span></span><br><span class="line">hidden_nodes = <span class="number">100</span></span><br><span class="line">output_nodes = <span class="number">10</span></span><br><span class="line">learning_rate = <span class="number">0.3</span></span><br><span class="line">network = neuralNetwork(input_nodes, hidden_nodes, output_nodes, learning_rate)</span><br></pre></td></tr></table></figure><h3 id="打开训练数据文件"><a href="#打开训练数据文件" class="headerlink" title="打开训练数据文件"></a>打开训练数据文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;train.csv&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> data_file:</span><br><span class="line">    data_list = data_file.readlines()[<span class="number">1</span>:]  <span class="comment"># 除首行外，全部读取到内存中</span></span><br><span class="line">    <span class="comment"># print(data_list)</span></span><br><span class="line">    data_file.close()</span><br></pre></td></tr></table></figure><h3 id="训练神经网络"><a href="#训练神经网络" class="headerlink" title="训练神经网络"></a>训练神经网络</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> record <span class="keyword">in</span> data_list:</span><br><span class="line">    all_values = record.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="comment"># make data into 0.01 ~ 1.00</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; Remains problem</span></span><br><span class="line"><span class="string">    (why?)</span></span><br><span class="line"><span class="string">    0.01: prevent 0.00 leading to failing to update the weight</span></span><br><span class="line"><span class="string">    1.00: just preventing the output value being 1.00 is enough</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    inputs = (numpy.asfarray(all_values[<span class="number">1</span>:])/<span class="number">255.0</span> * <span class="number">0.99</span>) + <span class="number">0.01</span></span><br><span class="line">    <span class="comment"># create the target output values (all 0.01, except the desired label which is 0.99)</span></span><br><span class="line">    <span class="comment"># numpy.zeros(): use 0 to pad the array</span></span><br><span class="line">    targets = numpy.zeros(output_nodes) + <span class="number">0.01</span></span><br><span class="line">    <span class="comment"># all_values[0] is the label of the record</span></span><br><span class="line">    targets[<span class="built_in">int</span>(all_values[<span class="number">0</span>])] = <span class="number">0.99</span></span><br><span class="line">    network.train(inputs, targets)</span><br></pre></td></tr></table></figure><h3 id="打开测试数据集"><a href="#打开测试数据集" class="headerlink" title="打开测试数据集"></a>打开测试数据集</h3><p>test.csv里的数据集是无标签的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># load the test data CSV file into a list</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.csv&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> test_data_file:</span><br><span class="line">    test_data_list = test_data_file.readlines()[<span class="number">1</span>:]</span><br><span class="line">    test_data_file.close()</span><br></pre></td></tr></table></figure><h3 id="测试数据并输出"><a href="#测试数据并输出" class="headerlink" title="测试数据并输出"></a>测试数据并输出</h3><p>使用test.csv的数据集进行测试输出（无标签）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from test.csv</span></span><br><span class="line">test = test_data_list[<span class="number">0</span>] <span class="comment"># 调度第0个测试数据</span></span><br><span class="line">test_values = test.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">test_inputs = (numpy.asfarray(test_values)/<span class="number">255.0</span> * <span class="number">0.99</span>) + <span class="number">0.01</span></span><br><span class="line">print(network.query(test_inputs))</span><br><span class="line"><span class="comment"># print(test_data_list[0].strip().split(&#x27;,&#x27;))</span></span><br></pre></td></tr></table></figure><p>使用train.csv的数据集进行测试输出（带标签）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from train.csv</span></span><br><span class="line">test = data_list[<span class="number">999</span>]</span><br><span class="line">print(<span class="string">&#x27;Answer is&#x27;</span>, test[<span class="number">0</span>])</span><br><span class="line">test_values = test.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">test_inputs = (numpy.asfarray(test_values[<span class="number">1</span>:])/<span class="number">255.0</span> * <span class="number">0.99</span>) + <span class="number">0.01</span></span><br><span class="line">print(network.query(test_inputs))</span><br></pre></td></tr></table></figure><h2 id="疑难杂症"><a href="#疑难杂症" class="headerlink" title="疑难杂症"></a>疑难杂症</h2><h3 id="tenserflow把numpy卸载了…"><a href="#tenserflow把numpy卸载了…" class="headerlink" title="tenserflow把numpy卸载了…"></a>tenserflow把numpy卸载了…</h3><p>没关系，会安装对应版本的numpy的</p><h3 id="Python关于-matplotlib-inline报错"><a href="#Python关于-matplotlib-inline报错" class="headerlink" title="Python关于%matplotlib inline报错"></a>Python关于%matplotlib inline报错</h3><p>这个是 jupyter notebook 或者 jupyter qtconsole 的专属代码，使用<code>%matplotlib inline</code>这段代码可以输出图像。但是vscode编辑器并没有这个功能。（但这并不妨碍vscode是宇宙第一编辑器的事实）</p><h3 id="FileNotFoundError"><a href="#FileNotFoundError" class="headerlink" title="FileNotFoundError"></a>FileNotFoundError</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PS F:\Programme_works\Python&gt; python -u &quot;f:\Programme_works\Python\DeepLearning\numRecog\neuralNetwork.py&quot;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;f:\Programme_works\Python\DeepLearning\numRecog\neuralNetwork.py&quot;, line 106, in \&lt;module\&gt;</span><br><span class="line">    with open(&#x27;train.csv&#x27;, &#x27;r&#x27;) as data_file:</span><br><span class="line">FileNotFoundError: [Errno 2] No such file or directory: &#x27;train.csv&#x27;</span><br></pre></td></tr></table></figure><p>未找到文件，检查一下文件是否在命令执行时的目录（一般都是vscode打开的文件夹，或者jupyter notebook运行的文件所在的文件夹）</p><h3 id="非jupyter编辑器输出csv图像"><a href="#非jupyter编辑器输出csv图像" class="headerlink" title="非jupyter编辑器输出csv图像"></a>非jupyter编辑器输出csv图像</h3><p>将</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">matplotlib.pyplot.imshow(image_array, cmap=<span class="string">&#x27;Greys&#x27;</span>, interpolation=<span class="string">&#x27;None&#x27;</span>)</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">matplotlib.pyplot.imsave(<span class="string">&#x27;temp.png&#x27;</span>, image_array, cmap=<span class="string">&#x27;Greys&#x27;</span>)</span><br></pre></td></tr></table></figure><p>便会保存在目录下</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;效果&quot;&gt;&lt;/a&gt;效果&lt;/h2&gt;&lt;p&gt;可以看出（10个数据，分别是认为该数字为0-9的程度，最后取最高的那个即为结果）基本能正确识别&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https</summary>
      
    
    
    
    
    <category term="deep learning" scheme="http://laclic.github.io/tags/deep-learning/"/>
    
    <category term="computer vision" scheme="http://laclic.github.io/tags/computer-vision/"/>
    
    <category term="neural network" scheme="http://laclic.github.io/tags/neural-network/"/>
    
  </entry>
  
  <entry>
    <title>FZUACM-动规DP爆锤计划！（持续更新ing...）</title>
    <link href="http://laclic.github.io/2021/02/07/FZUACM-%E5%8A%A8%E8%A7%84DP%E7%88%86%E9%94%A4%E8%AE%A1%E5%88%92%EF%BC%81/"/>
    <id>http://laclic.github.io/2021/02/07/FZUACM-%E5%8A%A8%E8%A7%84DP%E7%88%86%E9%94%A4%E8%AE%A1%E5%88%92%EF%BC%81/</id>
    <published>2021-02-07T03:09:56.000Z</published>
    <updated>2021-03-09T09:56:05.954Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DP教程">DP教程</h2><p>程序员小灰的<a href="https://www.cxyxiaowu.com/4055.html">漫画解DP</a>.</p><p>强推！图很多，思路也很清晰。</p><h2 id="题目题解（内含题目大意）">题目题解（内含题目大意）</h2><p>所有题目复制到百度上都能找到oj题（たぶん）</p><h3 id="00-hex-最短Hamilton路径">00(hex)-最短Hamilton路径</h3><p><a href="https://blog.laclic.ink/2021/03/09/CH0103-0x00%E3%80%8C%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95%E3%80%8D%E4%BE%8B%E9%A2%98-%E6%9C%80%E7%9F%ADHamilton%E8%B7%AF%E5%BE%84/">最短Hamilton路径</a></p><h3 id="01-hex-Charlie’s-Change">01(hex)-Charlie’s Change</h3><p><a href="https://blog.laclic.ink/2021/02/06/FZU2021-0xd1-Charlie-s-Change/">买咖啡-Charlie’s Change</a></p><h3 id="02-hex-Dividing">02(hex)-Dividing</h3><p><a href="https://blog.laclic.ink/2021/02/09/FZU2021-0xd2-Dividing/">分石头-Dividing</a></p><h3 id="03-hex-Space-Elevator">03(hex)-Space Elevator</h3><p><a href="https://blog.laclic.ink/2021/02/09/FZU2021-0xd3-Space-Elevator/">牛牛上天计划-Space Elevator</a></p><h3 id="04-hex-FOUR-QUARTERS">04(hex)-FOUR QUARTERS</h3><p><a href="https://blog.laclic.ink/2021/02/12/FZU2021-0xd4-FOUR-QUARTERS/">投硬币-FOUR QUARTERS</a></p><h3 id="05-hex-不要62">05(hex)-不要62</h3><p><a href="https://blog.laclic.ink/2021/02/14/FZU2021-0xd5-%E4%B8%8D%E8%A6%8162/">No 4 No 62-不要62</a></p><h3 id="06-hex-F-x">06(hex)-F(x)</h3><p><a href="https://blog.laclic.ink/2021/02/17/FZU2021-0xd6-F-x/">F(x)-十进制变二进制再变十进制</a></p><h3 id="07-hex-吉哥系列故事——恨7不成妻">07(hex)-吉哥系列故事——恨7不成妻</h3><p>[吉哥系列故事——恨7不成妻-no 7！](<a href="https://blog.laclic.ink/2021/03/08/FZU2021-0xd7-%E5%90%89%E5%93%A5%E7%B3%BB%E5%88%97%E6%95%85%E4%BA%8B%E2%80%94%E2%80%94%E6%81%A87%E4%B8%8D%E6%88%90%E5%A6%BB/">https://blog.laclic.ink/2021/03/08/FZU2021-0xd7-吉哥系列故事——恨7不成妻/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;DP教程&quot;&gt;DP教程&lt;/h2&gt;
&lt;p&gt;程序员小灰的&lt;a href=&quot;https://www.cxyxiaowu.com/4055.html&quot;&gt;漫画解DP&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;强推！图很多，思路也很清晰。&lt;/p&gt;
&lt;h2 id=&quot;题目题解（内含题目大意）&quot;&gt;题目</summary>
      
    
    
    
    
    <category term="FZUACM" scheme="http://laclic.github.io/tags/FZUACM/"/>
    
    <category term="dynamic programming" scheme="http://laclic.github.io/tags/dynamic-programming/"/>
    
  </entry>
  
  <entry>
    <title>FZU2021-0xd1-Charlie&#39;s Change</title>
    <link href="http://laclic.github.io/2021/02/06/FZU2021-0xd1-Charlie-s-Change/"/>
    <id>http://laclic.github.io/2021/02/06/FZU2021-0xd1-Charlie-s-Change/</id>
    <published>2021-02-06T13:20:56.000Z</published>
    <updated>2021-02-07T03:18:10.967Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>有一个人想买咖啡，现在告诉你一杯咖啡P分钱，他身上有c1,c2,c3,c4个1分,5分,10分,25分硬币。</p><p>问：在不找零的情况下，他至多能用多少个硬币（并输出分别要用多少个硬币）？</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>状态转移（最优子问题）：</p><p>4种硬币，每种都有用/不用的选项</p><p>所以F(e) = min{F(e-1),F(e-5),F(e-10),F(e-25)}</p><p>且F(0) = 0（咖啡不要钱，一个硬币也不能使用）</p><p>接下来就是从简单开始（就像数学归纳法一样，整体思路就是数学中的化归）</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// F(a,b,c,d,e) = min&#123;F(a-1,b,c,d,e-1),F(a,b-1,c,d,e-5),F(a,b,c-1,d,e-10),F(a,b,c,d-1,e-25)&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> money[] = &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">25</span>&#125;;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">dp</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> max[<span class="number">10006</span>]; <span class="comment">// How many coins can be used as much as possible</span></span><br><span class="line">    <span class="keyword">int</span> from[<span class="number">10006</span>]; <span class="comment">// which dp is this dp from</span></span><br><span class="line">  &#125; dp;</span><br><span class="line">  <span class="keyword">int</span> C[<span class="number">4</span>],P;</span><br><span class="line">  <span class="keyword">int</span> used[<span class="number">10006</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d %d&quot;</span>,&amp;P,&amp;C[<span class="number">0</span>],&amp;C[<span class="number">1</span>],&amp;C[<span class="number">2</span>],&amp;C[<span class="number">3</span>]);</span><br><span class="line">    <span class="keyword">if</span>(P==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(dp.max,<span class="number">-10060</span>,<span class="keyword">sizeof</span>(dp.max));</span><br><span class="line">    <span class="built_in">memset</span>(dp.from,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp.from));</span><br><span class="line">    dp.from[<span class="number">0</span>] = <span class="number">-1</span>; <span class="comment">// board</span></span><br><span class="line">    dp.max[<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">// board</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;++i) &#123;</span><br><span class="line">      <span class="built_in">memset</span>(used,<span class="number">0</span>,<span class="keyword">sizeof</span>(used));</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=money[i];j&lt;=P;++j) &#123;</span><br><span class="line">        <span class="keyword">if</span>(dp.max[j-money[i]]&gt;=<span class="number">0</span>&amp;&amp;dp.max[j-money[i]]+<span class="number">1</span>&gt;dp.max[j]&amp;&amp;used[j-money[i]]+<span class="number">1</span>&lt;=C[i]) &#123;</span><br><span class="line">          <span class="comment">// previous dp exists, max increases if use this coin, the used coin num is no more than total coins</span></span><br><span class="line">          dp.max[j] = dp.max[j-money[i]] + <span class="number">1</span>;</span><br><span class="line">          dp.from[j] = j-money[i];</span><br><span class="line">          used[j] = used[j-money[i]] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(dp.max[P]&lt;<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;Charlie cannot buy coffee.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">int</span> now = P; <span class="comment">// derive back</span></span><br><span class="line">      <span class="keyword">int</span> coin[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">      <span class="keyword">while</span>(dp.from[now]!=<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span>(now-dp.from[now]) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">1</span>: ++coin[<span class="number">0</span>]; <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">5</span>: ++coin[<span class="number">1</span>]; <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">10</span>: ++coin[<span class="number">2</span>]; <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">25</span>: ++coin[<span class="number">3</span>]; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        now = dp.from[now];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Throw in %d cents, %d nickels, %d dimes, and %d quarters.\n&quot;</span>,coin[<span class="number">0</span>],coin[<span class="number">1</span>],coin[<span class="number">2</span>],coin[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;有一个人想买咖啡，现在告诉你一杯咖啡P分钱，他身上有c1,c2,c3,c4个1分,5分,10分,25分硬币。&lt;/p&gt;
&lt;p&gt;问：在不找零的情</summary>
      
    
    
    
    
    <category term="FZUACM" scheme="http://laclic.github.io/tags/FZUACM/"/>
    
    <category term="c++" scheme="http://laclic.github.io/tags/c/"/>
    
    <category term="dynamic programming" scheme="http://laclic.github.io/tags/dynamic-programming/"/>
    
  </entry>
  
  <entry>
    <title>FZU2021-0x17-Find a way</title>
    <link href="http://laclic.github.io/2021/02/05/FZU2021-0x17-Find-a-way/"/>
    <id>http://laclic.github.io/2021/02/05/FZU2021-0x17-Find-a-way/</id>
    <published>2021-02-05T13:08:29.000Z</published>
    <updated>2021-02-06T13:20:03.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>有两个人YFF和MCK在宁波，想要去肯德基（KFC）面基，现在告诉你YFF和MCK二人的位置，并告诉你所有KFC店家的位置，以及路况地图。请问至少要走多远（步数*11）才能一起到达KFC（任意一家）见面？</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>由于可能存在多家KFC，使用A*算法可能时间爆炸，我们使用广度优先搜索（bfs），把走到地图上任意位置的步数都标注，最后一个个相加取最小值即可。</p><p>小技巧：把边框用’#’围起来，代表不可通过边界。</p><p>另外，地图上的一家KFC可能被封死。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>另外，初始化边框的时候注意测试非正方形道路（非方阵）情况，不要因为写成同一个数据而debug半天（指我）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> Y[<span class="number">202</span>][<span class="number">202</span>];</span><br><span class="line"><span class="keyword">int</span> M[<span class="number">202</span>][<span class="number">202</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">pos</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> X;</span><br><span class="line">  <span class="keyword">int</span> Y;</span><br><span class="line">&#125;Pos;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">round</span>&#123;</span></span><br><span class="line">  Pos pos;</span><br><span class="line">  <span class="keyword">int</span> step;</span><br><span class="line">&#125;Round;</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;Round&gt; que;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">(<span class="keyword">int</span>(*who)[<span class="number">202</span>])</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(!que.empty()) &#123;</span><br><span class="line">    Round temp = que.front();</span><br><span class="line">    que.pop();</span><br><span class="line">    <span class="keyword">if</span>(who[temp.pos.X+<span class="number">1</span>][temp.pos.Y]==<span class="number">0</span>) &#123;</span><br><span class="line">      que.push(&#123;&#123;temp.pos.X+<span class="number">1</span>,temp.pos.Y&#125;,temp.step+<span class="number">1</span>&#125;);</span><br><span class="line">      who[temp.pos.X+<span class="number">1</span>][temp.pos.Y] = temp.step;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(who[temp.pos.X<span class="number">-1</span>][temp.pos.Y]==<span class="number">0</span>) &#123;</span><br><span class="line">      que.push(&#123;&#123;temp.pos.X<span class="number">-1</span>,temp.pos.Y&#125;,temp.step+<span class="number">1</span>&#125;);</span><br><span class="line">      who[temp.pos.X<span class="number">-1</span>][temp.pos.Y] = temp.step;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(who[temp.pos.X][temp.pos.Y+<span class="number">1</span>]==<span class="number">0</span>) &#123;</span><br><span class="line">      que.push(&#123;&#123;temp.pos.X,temp.pos.Y+<span class="number">1</span>&#125;,temp.step+<span class="number">1</span>&#125;);</span><br><span class="line">      who[temp.pos.X][temp.pos.Y+<span class="number">1</span>] = temp.step;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(who[temp.pos.X][temp.pos.Y<span class="number">-1</span>]==<span class="number">0</span>) &#123;</span><br><span class="line">      que.push(&#123;&#123;temp.pos.X,temp.pos.Y<span class="number">-1</span>&#125;,temp.step+<span class="number">1</span>&#125;);</span><br><span class="line">      who[temp.pos.X][temp.pos.Y<span class="number">-1</span>] = temp.step;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  for(int i=0;i&lt;=6;++i) &#123; // debug</span></span><br><span class="line"><span class="comment">    for(int j=0;j&lt;=6;++j) &#123;</span></span><br><span class="line"><span class="comment">      printf(&quot;%2d&quot;,who[i][j]);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n,m;</span><br><span class="line">  <span class="keyword">char</span> temp;</span><br><span class="line">  Pos YFF,MCK;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)!=EOF) &#123;</span><br><span class="line">    <span class="keyword">int</span> n1 = n+<span class="number">1</span>, m1 = m+<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;Pos&gt; KFC;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n1;++i) &#123;</span><br><span class="line">      Y[i][<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">      Y[i][m1] = <span class="number">-1</span>;</span><br><span class="line">      M[i][<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">      M[i][m1] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m1;++j) &#123;</span><br><span class="line">      Y[<span class="number">0</span>][j] = <span class="number">-1</span>;</span><br><span class="line">      Y[n1][j] = <span class="number">-1</span>;</span><br><span class="line">      <span class="comment">// Y[m1][j] = -1; 低级错误</span></span><br><span class="line">      M[<span class="number">0</span>][j] = <span class="number">-1</span>;</span><br><span class="line">      M[n1][j] = <span class="number">-1</span>;</span><br><span class="line">      <span class="comment">// M[m1][j] = -1; 低级错误</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;=7;++i) &#123; // debug</span></span><br><span class="line"><span class="comment">      for(int j=0;j&lt;=7;++j) &#123;</span></span><br><span class="line"><span class="comment">        printf(&quot;%2d&quot;,Y[i][j]);</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">      printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">      getchar();</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;temp);</span><br><span class="line">        <span class="keyword">switch</span> (temp) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;Y&#x27;</span>: &#123;</span><br><span class="line">            YFF.X = i;</span><br><span class="line">            YFF.Y = j;</span><br><span class="line">            Y[i][j] = <span class="number">0</span>;</span><br><span class="line">            M[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;M&#x27;</span>:&#123;</span><br><span class="line">            MCK.X = i;</span><br><span class="line">            MCK.Y = j;</span><br><span class="line">            Y[i][j] = <span class="number">0</span>;</span><br><span class="line">            M[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;#&#x27;</span>:&#123;</span><br><span class="line">            Y[i][j] = <span class="number">-1</span>;</span><br><span class="line">            M[i][j] = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;.&#x27;</span>:&#123;</span><br><span class="line">            Y[i][j] = <span class="number">0</span>;</span><br><span class="line">            M[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;@&#x27;</span>:&#123;</span><br><span class="line">            Y[i][j] = <span class="number">0</span>;</span><br><span class="line">            M[i][j] = <span class="number">0</span>;</span><br><span class="line">            KFC.push(&#123;i,j&#125;);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    que.push(&#123;YFF,<span class="number">1</span>&#125;);</span><br><span class="line">    Y[YFF.X][YFF.Y] = <span class="number">1</span>;</span><br><span class="line">    go(Y);</span><br><span class="line">    Y[YFF.X][YFF.Y] = <span class="number">0</span>;</span><br><span class="line">    que.push(&#123;MCK,<span class="number">1</span>&#125;);</span><br><span class="line">    M[MCK.X][MCK.Y] = <span class="number">1</span>;</span><br><span class="line">    go(M);</span><br><span class="line">    M[MCK.X][MCK.Y] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> min = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!KFC.empty()) &#123;</span><br><span class="line">      Pos temp = KFC.front();</span><br><span class="line">      KFC.pop();</span><br><span class="line">      <span class="keyword">if</span>(Y[temp.X][temp.Y]==<span class="number">0</span>&amp;&amp;M[temp.X][temp.Y]==<span class="number">0</span>) <span class="keyword">continue</span>; <span class="comment">// 道路被封死</span></span><br><span class="line">      <span class="keyword">if</span>(min&gt;Y[temp.X][temp.Y]+M[temp.X][temp.Y]) &#123;</span><br><span class="line">        min = Y[temp.X][temp.Y]+M[temp.X][temp.Y];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,min*<span class="number">11</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;有两个人YFF和MCK在宁波，想要去肯德基（KFC）面基，现在告诉你YFF和MCK二人的位置，并告诉你所有KFC店家的位置，以及路况地图。请</summary>
      
    
    
    
    
    <category term="FZUACM" scheme="http://laclic.github.io/tags/FZUACM/"/>
    
    <category term="c++" scheme="http://laclic.github.io/tags/c/"/>
    
    <category term="search" scheme="http://laclic.github.io/tags/search/"/>
    
    <category term="broad first search" scheme="http://laclic.github.io/tags/broad-first-search/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces-Knights of a Polygonal Table</title>
    <link href="http://laclic.github.io/2021/02/03/Codeforces-Knights-of-a-Polygonal-Table/"/>
    <id>http://laclic.github.io/2021/02/03/Codeforces-Knights-of-a-Polygonal-Table/</id>
    <published>2021-02-03T01:52:27.000Z</published>
    <updated>2021-02-02T06:15:06.145Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>现在有n个骑士，每个骑士最多能杀k个其他力量弱于自己的骑士（每个骑士的力量都不同），并抢走他们的钱。问：对于每个骑士，当只有自己能杀其他骑士的时候，最多能抢到多少钱。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>将所有骑士，标记上他们原来输入时的位置后（因为输出要按位置顺序输出），重新按力量从小到大排序。当遍历到第i个骑士时，所有第i个之前的骑士所持有的钱数按从大到小排序，取最前的k个（不足k则能抢多少抢多少）。</p><p>实现钱数排序的方法，有个小窍门，就只要在遍历的时候，每次将他前面那个人的钱放入到从大到小排序的容器即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">knight</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> num;</span><br><span class="line">  <span class="keyword">int</span> coin;</span><br><span class="line">&#125;Knight;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n,k;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">  <span class="keyword">int</span> a[n];</span><br><span class="line">  <span class="built_in">map</span>&lt;<span class="keyword">int</span>,Knight&gt; mapp; <span class="comment">// &lt;power,coins&gt;</span></span><br><span class="line">  Knight temp;</span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">long</span> ans[n]; <span class="comment">// 数据较大，需要用long long</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp.coin);</span><br><span class="line">    temp.num = i;</span><br><span class="line">    mapp[a[i]] = temp;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>,greater&lt;<span class="keyword">int</span>&gt;&gt; coins;</span><br><span class="line">  <span class="built_in">map</span>&lt;<span class="keyword">int</span>,Knight&gt;::iterator it=mapp.begin();</span><br><span class="line">  ans[it-&gt;second.num] = it-&gt;second.coin;</span><br><span class="line">  ++coins[it-&gt;second.coin];</span><br><span class="line">  ++it;</span><br><span class="line">  <span class="keyword">for</span>(;it!=mapp.end();++it) &#123;</span><br><span class="line">    ans[it-&gt;second.num] = it-&gt;second.coin;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;::iterator it_coin=coins.begin();it_coin!=coins.end();++it_coin) &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> remain=it_coin-&gt;second;remain;--remain) &#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt&gt;=k) <span class="keyword">goto</span> here;</span><br><span class="line">        ans[it-&gt;second.num] += it_coin-&gt;first;</span><br><span class="line">        ++cnt;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    here: ;</span><br><span class="line">    ++coins[it-&gt;second.coin];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,ans[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;现在有n个骑士，每个骑士最多能杀k个其他力量弱于自己的骑士（每个骑士的力量都不同），并抢走他们的钱。问：对于每个骑士，当只有自己能杀其他骑士</summary>
      
    
    
    
    
    <category term="c++" scheme="http://laclic.github.io/tags/c/"/>
    
    <category term="codeforces" scheme="http://laclic.github.io/tags/codeforces/"/>
    
    <category term="sort" scheme="http://laclic.github.io/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces-Polycarp and Div 3</title>
    <link href="http://laclic.github.io/2021/02/03/Codeforces-Polycarp-and-Div-3/"/>
    <id>http://laclic.github.io/2021/02/03/Codeforces-Polycarp-and-Div-3/</id>
    <published>2021-02-03T01:26:16.000Z</published>
    <updated>2021-02-02T05:54:18.336Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个很长的数字串，现在要你将其分割为很多小子串，使得能被3整除的子数字串最多，输出最多有多少个。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>分情况：<br>对于数字串中，新开始的一位：（mod3代表对3取余）</p><ol><li>若本身mod3就是0，直接成为一个符合条件的串，前面的舍弃</li><li>若与前面串之和mod3为0，则一起成为符合条件的串</li><li>若与前面串之和-最首位后，mod3为0，则成为符合条件的串，最首位舍弃</li><li>都不符合，则前往下一位</li></ol><p>当然有一个可能的例外，比如最首2位都去掉才能变成mod3位0呢？</p><p>答：因为mod3只会有3中情况，0，1，2。最首位（head1）为0则直接自成一串。head1为1时，首第二位（head2）mod3为0则自成一串，head1舍弃；head2 mod3为2，则合成一串；head2为1时，再前往下一位；若再下一位（head3）为0，自成一串；若为1，head1+2+3合成一串，若为2，则head2+3合成一串，舍弃head1，完美填满了所有情况，head1 mod3为2时同理，所以只需要记录一个head1即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">200006</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line">  <span class="keyword">int</span> cnt=<span class="number">0</span>,total=<span class="number">0</span>,head;</span><br><span class="line">  head = a[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;a[i]!=<span class="number">0</span>;) &#123;</span><br><span class="line">    <span class="keyword">if</span>(a[i]%<span class="number">3</span>==<span class="number">0</span>) &#123;</span><br><span class="line">      ++cnt;</span><br><span class="line">      ++i;</span><br><span class="line">      head = a[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">      total = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      total += a[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">      <span class="keyword">if</span>(total%<span class="number">3</span>==<span class="number">0</span>) &#123;</span><br><span class="line">        ++cnt;</span><br><span class="line">        ++i;</span><br><span class="line">        head = a[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(head!=total&amp;&amp;(total-head)%<span class="number">3</span>==<span class="number">0</span>) &#123;</span><br><span class="line">        ++cnt;</span><br><span class="line">        ++i;</span><br><span class="line">        head = a[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      ++i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,cnt);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给定一个很长的数字串，现在要你将其分割为很多小子串，使得能被3整除的子数字串最多，输出最多有多少个。&lt;/p&gt;
&lt;h2 id=&quot;思路&quot;&gt;&lt;a </summary>
      
    
    
    
    
    <category term="c++" scheme="http://laclic.github.io/tags/c/"/>
    
    <category term="codeforces" scheme="http://laclic.github.io/tags/codeforces/"/>
    
    <category term="string" scheme="http://laclic.github.io/tags/string/"/>
    
  </entry>
  
</feed>
