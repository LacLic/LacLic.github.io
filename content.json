{"meta":{"title":"LacLic's Blog","subtitle":"Living with bustle, hearing of isolation.","description":"","author":"LacLic Vanilla","url":"http://laclic.github.io","root":"/"},"pages":[{"title":"tags","date":"2020-11-29T06:38:30.000Z","updated":"2020-11-29T06:43:34.854Z","comments":true,"path":"tags/index.html","permalink":"http://laclic.github.io/tags/index.html","excerpt":"","text":""},{"title":"gallery","date":"2021-03-19T01:16:30.000Z","updated":"2021-03-09T01:16:06.858Z","comments":true,"path":"gallery/index.html","permalink":"http://laclic.github.io/gallery/index.html","excerpt":"","text":""}],"posts":[{"title":"Codeforces-718(Div.1+Div.2)E - Group Photo","slug":"Codeforces-718-Div-1-Div-2-E-Group-Photo","date":"2021-05-14T02:35:56.000Z","updated":"2021-05-14T10:28:31.959Z","comments":true,"path":"2021/05/14/Codeforces-718-Div-1-Div-2-E-Group-Photo/","link":"","permalink":"http://laclic.github.io/2021/05/14/Codeforces-718-Div-1-Div-2-E-Group-Photo/","excerpt":"","text":"很好的BIT题，很大程度上加深了我对BIT的理解。 复杂度 题意 给定n个数，在{1,2,3,…,n}的数组，将每个元素标记为P或C，并分别分配入P,C两个数组。 对于p和c数组中的每个元素，要求： 另外，给定n长度的数组a中每个的值，要求 现在需要求出满足以上要求的PC排列个数(结果对取模) 数据范围 给的t个case种，所有n之和. 思路 由题意，对于给定的有关P和C位置的条件，可以看出，C的间距应当越来越大，P的间距应当越来越小，但是又因为每个地方都需要填充上P或C，猜测C之间/P之间的间距不能太大。（C间距超过1，中间必有连续2个P，一旦PP连续出现，PP间距为0，收缩到最小，之后P必定连续出现，C只能在最后连续出现。同理，反过来也成立）。 观察样例，先找到一种P在前面连续，C在后面连续的形式，PPPPPCCCCC。 但由于P的间距应当越来越小，C的间距约来越大，已经无法在P之间插入C或C之间插入P。 则在其他情况下，首至多只能有1个连续的C，尾至多只能有1个连续的P，则只有以下四种情况: C…P PC…P C…PC PC…PC 其中…的部分形式为CCCCCPCPCPCPCPPPPP 显然，算上上面PPPCCC的形式，这五种形式互不相同，情况分析结束。 下面分析最后一个约束条件： 以下，我们取P为正，C为负 第一种形式很简单，对这n个数逐个检查即可复杂度 后面四种形式考虑先决定交替出现的部分与PPPP部分的分界线，不断将前面的P改为C来实现确定CCCC部分与交替出现部分的分界线。 考虑到是和小于和的形式，我们修改为和相减大于0的形式，使用树桩数组进行维护。 树状数组的核心：insert被减数，query减数，接下来就是构造它们。 构造减数： A组 2a[0] 2a[0]+2a[2] 2a[0]+2a[2]+2a[4] … B组 2a[1] 2a[1]+2a[3] … 构造被减数：（记首尾确定的PC所带来的差值为bias） C组 a[0]+a[1]+a[3]+a[4]+… -a[0]+a[1]+a[3]+a[4]+… a[0]-a[1]+a[3]+a[4]+… -a[0]+a[1]-a[3]+a[4]+… a[0]-a[1]+a[3]-a[4]+… … 可以看出， 我们需要做的尝试是： C1 C2 C3 - A1 C4 - B2 C5 - A1 与 C5 - A1 - A3 同理 C6 - B2 与 C6 - B4 - B2 C7 - A1 与 C7 - A3 - A1 与 C7 - A5 - A3 - A1 以此类推…我们便可以将A和B分入不同的树状数组进行一个个query即可 代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;#define MODD 998244353using namespace std;typedef long long i64;void isr1(vector&lt;i64&gt;&amp;v,int pos) { int n = v.size(); for(;pos&lt;n;pos+=pos&amp;-pos) { ++v[pos]; }}i64 qry(vector&lt;i64&gt;&amp;v,int pos) { i64 ret=0; for(;pos;pos-=pos&amp;-pos) { ret += v[pos]; } return ret;}void sol() { int n; cin &gt;&gt; n; vector&lt;i64&gt; a(n+1); for(int i=1;i&lt;=n;++i) { cin &gt;&gt; a[i]; } i64 ans=0; for(int P=0;P&lt;2;++P) { // 讨论4种情况 for(int C=0;C&lt;2;++C) { i64 bias; int L=1,R=n; // 记录左端和右端 bias=0; // 记录预处理的差值 if(P) { bias+=a[1]; ++L; } if(C) { bias-=a.back(); --R; } vector&lt;i64&gt; pre(n+1),alt(n+1); // 记录前缀和 与 交替前缀和，便于后续构造 for(int i=L;i&lt;=R;++i) { pre[i] = pre[i-1] + a[i]; alt[i] = -a[i] - alt[i-1]; } // itv记录A，B两类的减数，cst代表构造的被减数，v数组用于记录逆序对 vector&lt;i64&gt; itv(n+1),cst(n+1),v; for(int i=L;i&lt;=R;++i) { itv[i] = pre[i-1] + alt[i-1]; // OPOPO cst[i] = bias + pre[R] - pre[i] - alt[i]; // PCPCP v.push_back(itv[i]); v.push_back(cst[i]); } sort(v.begin(),v.end()); v.erase(unique(v.begin(),v.end()),v.end()); vector&lt;i64&gt; t[2]; // 树状数组 for(int i=0;i&lt;2;++i) { t[i].resize(2*n+2); } // 检查每个元素的排名，便于一次查出低于其的所有低于它的元素 for(int i=L;i&lt;=R;++i) { itv[i] = lower_bound(v.begin(),v.end(),itv[i]) - v.begin() + 1; cst[i] = lower_bound(v.begin(),v.end(),cst[i]) - v.begin() + 1; } for(int i=L+1;i&lt;=R;++i) { isr1(t[i%2],itv[i]); ans = (ans + qry(t[i%2],cst[i]-1))%MODD; } if(!P&amp;&amp;!C) { for(int i=L;i&lt;=R;++i) { if(pre[i]&gt;pre[R]-pre[i]) ++ans; } ans %= MODD; } } } cout &lt;&lt; ans &lt;&lt; endl;}int main(int argc, char const *argv[]){ ios_base::sync_with_stdio(false); cin.tie(nullptr); // freopen(\"in.txt\",\"r\",stdin); int T; cin &gt;&gt; T; for(;T;--T) { sol(); } return 0;}","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"},{"name":"problem E","slug":"problem-E","permalink":"http://laclic.github.io/tags/problem-E/"},{"name":"binary indexed tree","slug":"binary-indexed-tree","permalink":"http://laclic.github.io/tags/binary-indexed-tree/"}]},{"title":"Codeforces-718(Div.1+Div.2)D - Explorer Space","slug":"Codeforces-718-Div-1-Div-2-D-Explorer-Space","date":"2021-05-10T11:39:04.000Z","updated":"2021-05-14T02:36:25.616Z","comments":true,"path":"2021/05/10/Codeforces-718-Div-1-Div-2-D-Explorer-Space/","link":"","permalink":"http://laclic.github.io/2021/05/10/Codeforces-718-Div-1-Div-2-D-Explorer-Space/","excerpt":"","text":"从开始爆锤计划到现在，这么久以来头一回在cf做到dp 大概是以前还没做到dp就已经没气了 题意 给定n，m，k，以及n*(m-1)与(n-1)*m的矩阵，两个矩阵分别代表从(i,j)到(i+1,j)或逆向移动所需要的cost 现在要求你从这个矩阵上的每个点出发，经过k次移动回到原来的点所需的最少花费（同一个点可以经过多次，且在k之前可以回到原来的点） 要求对于每个点都要进行一次查询，输出n*m大小的矩阵，对于元素(i,j)，均为该点移动k次后回来的最少cost。 如果回不去的话，则输出一个n*m，里面全是-1的矩阵。 数据范围 思路 爆搜打表的dp题 先证一个东西，对于两个点，形成回环一定不如或等于延原路折返： ↓出发点↓ A/B A A A A B A A A B B B B B B 终点 沿着AB两条路会得到costA和costB，要形成回路则总花费为costA + costB。 不妨设costA &lt;= costB，则原路折返花费为costA + castA &lt;= costA + costB 所以原路折返更优， 如此，我们能发现，其实只要走k/2步出去后原路返回即可，爆搜最大深度（最大递归深度）即刻减为10，最后结果乘以2即可。 那么如果k%2==1呢？显然是回不去的，则只要输出n*m个-1就好 然后开始爆搜，记录3个状态即可，行位置、列位置、剩余步长。 状态转移方程： 上移花费下移花费左移花费左移花费 k==-1的时候返回0 （或者k==0的时候返回移动花费，减少一层递归） 代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182#include &lt;iostream&gt;#include &lt;cstring&gt;#define MAXX 506using namespace std;int r[MAXX][MAXX]; // 1 == 1-&gt;2int d[MAXX][MAXX]; // 1 == 1-&gt;2int dp[MAXX][MAXX][10]; // dp[n][m][k]int drcx[] = {1,-1,0,0};int drcy[] = {0,0,1,-1};int nowx,nowy;int n,m,k;bool inside(int x, int y) { return x&gt;=1&amp;&amp;x&lt;=n&amp;&amp;y&gt;=1&amp;&amp;y&lt;=m; }int dfs(int x, int y, int layer, int dis) { if(layer==0) return dis; int minn = 0x3f3f3f3f; if(dp[x][y][layer]) return dp[x][y][layer]+dis; for(int en=0;en&lt;4;++en) { int re; if(inside(x+drcx[en],y+drcy[en])) { int next_dis; switch(en) { case 0: next_dis=d[x][y]; break; case 1: next_dis=d[x-1][y]; break; case 2: next_dis=r[x][y]; break; case 3: next_dis=r[x][y-1]; } re = dfs(x+drcx[en],y+drcy[en],layer-1,next_dis); if(minn&gt;re) minn = re; } } dp[x][y][layer] = minn; return minn+dis;}int main(int argc, char const *argv[]){ ios_base::sync_with_stdio(false); cin.tie(nullptr); // freopen(\"in.txt\",\"r\",stdin); memset(dp,0,sizeof(dp)); cin &gt;&gt; n &gt;&gt; m &gt;&gt; k; for(int i=1;i&lt;=n;++i) { for(int j=1;j&lt;m;++j) { cin &gt;&gt; r[i][j]; } } for(int i=1;i&lt;n;++i) { for(int j=1;j&lt;=m;++j) { cin &gt;&gt; d[i][j]; } } if(k%2) { for(int i=1;i&lt;=n;++i) { for(int j=1;j&lt;=m;++j) { cout &lt;&lt; \"-1 \"; } cout &lt;&lt; endl; } }else { for(int i=1;i&lt;=n;++i) { for(int j=1;j&lt;=m;++j) { nowx = i; nowy = j; cout &lt;&lt; 2*dfs(i,j,k/2,0) &lt;&lt; \" \"; } cout &lt;&lt; endl; } } return 0;}","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"dynamic programming","slug":"dynamic-programming","permalink":"http://laclic.github.io/tags/dynamic-programming/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"},{"name":"problem D","slug":"problem-D","permalink":"http://laclic.github.io/tags/problem-D/"}]},{"title":"Codeforces-718(Div.1+Div.2)C - Fillomino 2","slug":"Codeforces-718-Div-1-Div-2-C-Fillomino-2","date":"2021-05-10T11:30:09.000Z","updated":"2021-05-10T11:38:36.147Z","comments":true,"path":"2021/05/10/Codeforces-718-Div-1-Div-2-C-Fillomino-2/","link":"","permalink":"http://laclic.github.io/2021/05/10/Codeforces-718-Div-1-Div-2-C-Fillomino-2/","excerpt":"","text":"题意 先给出一个定义，形如以下的数组，我们称之为下三角阵。 1234512 23 3 34 4 4 45 5 5 5 5 给定你一个n以及乱序的{1,2,3,…,n}，要求你在正对角线（从1,1到n,n的这条线）上按给定顺序填入这些数字，接下来，找到一种方法，将这个下三角阵填满，要求，对于任意一个数i，i要出现i次，且要连续出现（任意2个i要相邻） 思路 贪心 由于这n个数互不相等，我们从第一个数先朝左填充，如果左边已经到了下三角阵的边界，则向下填充，给接下来的数留下尽可能连续的区域。 代码 12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;#define MAXX 506int a[MAXX][MAXX];int n,now,cnt;inline bool inside(int x, int y) &#123; return x&lt;=n&amp;&amp;y&gt;=1; &#125;void dfs(int x, int y) &#123; ++cnt; a[x][y] = now; if(cnt!=now&amp;&amp;!a[x][y-1]&amp;&amp;inside(x,y-1)) dfs(x,y-1); if(cnt!=now&amp;&amp;!a[x+1][y]&amp;&amp;inside(x+1,y)) dfs(x+1,y);&#125;int main(int argc, char const *argv[])&#123; ios::sync_with_stdio(false); cin.tie(0); memset(a,0,sizeof(a)); cin &gt;&gt; n; for(int i=1;i&lt;=n;++i) &#123; cin &gt;&gt; a[i][i]; cnt=0; now=a[i][i]; dfs(i,i); &#125; for(int i=1;i&lt;=n;++i) &#123; for(int j=1;j&lt;=i;++j) &#123; cout &lt;&lt; a[i][j] &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; &#125; return 0;&#125;","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"problem C","slug":"problem-C","permalink":"http://laclic.github.io/tags/problem-C/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"},{"name":"greedy","slug":"greedy","permalink":"http://laclic.github.io/tags/greedy/"}]},{"title":"Codeforces-718(Div.1+Div.2)B - Morning Jogging","slug":"Codeforces-718-Div-1-Div-2-B-Morning-Jogging","date":"2021-05-10T11:14:30.000Z","updated":"2021-05-10T11:48:01.051Z","comments":true,"path":"2021/05/10/Codeforces-718-Div-1-Div-2-B-Morning-Jogging/","link":"","permalink":"http://laclic.github.io/2021/05/10/Codeforces-718-Div-1-Div-2-B-Morning-Jogging/","excerpt":"","text":"题目 给定n, m和n*m个数，记点0,1,2,…,n。第i行表示由i-1到i的m种不同路径的。 现在，要你找出m条路径（之前经过的路径不能再经过了），使得之和最少。 要求你以n*m的形式纵向输出m条路径 可能有很多种方法，但你只需要输出一种即可。 思路 找出n*m个数中最小的m个元素归入集合M，将他们排到一横列上去 空白位置都代表其他元素 1 2 3 4 … m M1 M2 … M3 M4 … … Mm 看上去很难，只要一个方法 1 2 3 4 … m 在集合M的个数 M1 M2 … 2 M3 M4 M5 M6 … m-4 Mm-1 Mm … 2 第一行从1输出到m 第二行从m-1输出到m，再从1输出到m-2（用取余的方法即可快速实现） 第三行从3输出到m，再从1输出到2（同样用取余） 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;algorithm&gt;#include &lt;utility&gt;using namespace std;void solve() { int n,m; cin &gt;&gt; n &gt;&gt; m; int cnt[n]={0},a[n][m]; priority_queue&lt;pair&lt;int,int&gt;&gt; q; for(int i=0;i&lt;n;++i) { for(int j=0;j&lt;m;++j) { cin &gt;&gt; a[i][j]; q.push({-a[i][j],i*m+j}); } } for(int i=0;i&lt;n;++i) { sort(a[i],a[i]+m); } for(int j=0;j&lt;m;++j) { pair&lt;int,int&gt; top = q.top(); q.pop(); ++cnt[top.second/m]; } int bias=0; for(int i=0;i&lt;n;++i) { for(int j=0;j&lt;m;++j) { cout &lt;&lt; a[i][(j+m-bias)%m] &lt;&lt; \" \"; } cout &lt;&lt; endl; bias+=cnt[i]; }}int main(int argc, char const *argv[]){ ios::sync_with_stdio(false); cin.tie(0); // freopen(\"in.txt\",\"r\",stdin); int t; cin &gt;&gt; t; for(;t;--t) { solve(); } return 0;}","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"problem B","slug":"problem-B","permalink":"http://laclic.github.io/tags/problem-B/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"Codeforces-718(Div.1+Div.2)A - Sum of 2050","slug":"Codeforces-718-Div-1-Div-2-A-Sum-of-2050","date":"2021-05-10T11:02:39.000Z","updated":"2021-05-10T11:14:01.921Z","comments":true,"path":"2021/05/10/Codeforces-718-Div-1-Div-2-A-Sum-of-2050/","link":"","permalink":"http://laclic.github.io/2021/05/10/Codeforces-718-Div-1-Div-2-A-Sum-of-2050/","excerpt":"","text":"题意 定义2050数：2050, 20500, 205000, … () 给定n要求你输出它最少由多少个2050数组成 题目会给出T个case，其中各有1个n，要求你每次都输出一个结果并换行 如果不能凑，则输出-1 思路 如果能凑，则直接除以2050，将每位数字加起来即可。（vp的时候就没想到这么简单的办法） 代码 12345678910111213141516171819202122232425262728293031#include &lt;iostream&gt;using namespace std;void solve() { long long n; cin &gt;&gt; n; if(n%2050!=0) { cout &lt;&lt; \"-1\" &lt;&lt; endl; return; } n/=2050; int ans=0; for(;n;n/=10) { ans += n%10; } cout &lt;&lt; ans &lt;&lt; endl;}int main(int argc, char const *argv[]){ ios_base::sync_with_stdio(false); cin.tie(nullptr); int t; cin &gt;&gt; t; for(;t;--t) { solve(); } return 0;}","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"problem A","slug":"problem-A","permalink":"http://laclic.github.io/tags/problem-A/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"Codeforces-712(Div.1)C - Travelling Salesman Problem","slug":"Codeforces-712-Div-1-C-Travelling-Salesman-Problem","date":"2021-04-28T15:50:09.000Z","updated":"2021-04-29T07:48:37.619Z","comments":true,"path":"2021/04/28/Codeforces-712-Div-1-C-Travelling-Salesman-Problem/","link":"","permalink":"http://laclic.github.io/2021/04/28/Codeforces-712-Div-1-C-Travelling-Salesman-Problem/","excerpt":"","text":"# When Who Problem Lang Verdict Time Memory 114464873 Apr/28/2021 23:47UTC+8 LacLic C - Travelling Salesman Problem GNU C++11 Accepted 124 ms 1600 KB 题目 题目大意是，给定n和2组长度为n的数组和，代表n个城市的美丽度和起飞价格。当一个人想从城市走到城市时需要花费dollar。一个商人想从第一个城市出发，每个城市经过一次，最后回到第一个城市。问最少要花多少dollar。 数据范围 题意 首先，引理1：肯定要是花费的，只要加上多花费的部分即可。且此时，即等于从i城市到j城市所需花费的dollar（小于0则取0）。 其次，引理2：由于还要回到起点，形成一个哈密顿回路。 123A → B → C↑ ↓F ← E ← D 从而与起始点位置无关，只要找到回路所花费dollar最少即可。 123D → E → F↑ ↓C ← B ← A 显然，由引理1，我们只要找到少花费dollar的方式走到美丽度a最高的城市即可，然后倒序走到美丽度a最低的城市即可。 所以，我们从美丽度a最低的城市开始，取美丽度a低于所在城市中最大的城市，直接飞驰到最高所能达到的城市即可。最终到达美丽度a最高的城市。 举例 对于样例2 123456789Input64 28 43 02 37 10 1 重新排序后 1234567a c a+c0 1 -&gt; 12 3 -&gt; 53 0 -&gt; 34 2 -&gt; 67 1 -&gt; 88 4 -&gt; 12 从上往下，我们用a的值来指代城市。 最佳顺序为 0 -&gt; 2 -&gt; 4 -&gt; 7 -&gt; 8 -&gt; 3 -&gt; 0 如果由4作为出发点，则过程是完全一样的，有 4 -&gt; 7 -&gt; 8 -&gt; 3 -&gt; 0 -&gt; 2 -&gt; 4 是不是很巧妙？ 代码 123456789101112131415161718192021222324252627282930313233#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;utility&gt;using namespace std;int main(int argc, char const *argv[]){ ios::sync_with_stdio(false); cin.tie(0); int n; cin &gt;&gt; n; long long ans=0; vector&lt;pair&lt;int,int&gt;&gt; v; for(int i=0;i&lt;n;++i) { int a,c; cin &gt;&gt; a &gt;&gt; c; v.push_back(make_pair(a,c+a)); ans += c; } sort(v.begin(),v.end()); // sort vector 时先根据first升序，再根据second升序，这个特性对本题无用，只要first升序即可 int maxc = v[0].second; // 记录美丽度低于所在城市的城市，a+c最大的城市 for(int i=1;i&lt;n;++i) { ans += 0&gt;v[i].first-maxc?0:v[i].first-maxc; if(maxc&lt;v[i].second) maxc = v[i].second; // 如果maxc没更新，说明这个城市之前有个a+c更大的城市，我们先在之前那个城市直接飞到之后的城市，这个城市等从美丽度最大的城市回来的时候再经过即可 } cout &lt;&lt; ans &lt;&lt; endl; return 0;}","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"problem C","slug":"problem-C","permalink":"http://laclic.github.io/tags/problem-C/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"},{"name":"div1","slug":"div1","permalink":"http://laclic.github.io/tags/div1/"},{"name":"dp","slug":"dp","permalink":"http://laclic.github.io/tags/dp/"}]},{"title":"Codeforces-712(Div.1)B - 3-Coloring","slug":"Codeforces-712-Div-1-B-3-Coloring","date":"2021-04-27T06:32:01.000Z","updated":"2021-04-27T06:33:41.382Z","comments":true,"path":"2021/04/27/Codeforces-712-Div-1-B-3-Coloring/","link":"","permalink":"http://laclic.github.io/2021/04/27/Codeforces-712-Div-1-B-3-Coloring/","excerpt":"","text":"头一回做互动题，感觉很有意思！ 题目 给定整数n，在n*n格子的矩阵图纸上，给你1，2，3种颜色，要求用这三种颜色涂满这张图纸的每个格子，要求每个相邻的格子不能使用同一种颜色。 Alice觉得这个游戏太简单了，现在，她做出一个要求，每当你在填涂一个格子前，她会说出一个颜色，不能填涂她所说出的颜色。请你完成这张图的填涂。 数据范围 输出要求 输出：颜色 行 列 然后进行cin.frush()刷新输出流让告诉Alice你的选择，Alice会根据你每一步的填涂来决定下一个说出的颜色。 思路 先分析，后做题！ 相邻问题，通常和奇偶位置有关 定义奇数位置为(i+j)%2==1，反之为偶数位置。 只要我们把偶数位置或奇数位置全填上某一种颜色，那么我们一定能胜利（不做证明了）。 显然，alice会给我们指明n*n个不能填涂的颜色，而其中，我们任意取2种颜色（为了方便，我们就取颜色1和颜色2）。最坏的情况，这两种颜色都被指名了次，也就是说，总有一种指名次数。那么，我们往奇数位置/偶数位置全部填上这个颜色即可。 那么我们干脆预留奇数格子给颜色1，偶数格子给颜色2，在填涂的时候，它们互不干扰。在一种格子全部填完后，剩下两种颜色均能填涂另一种格子，被alice指名一个后，就用另一个即可。 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;stack&gt;#include &lt;utility&gt;using namespace std;int n;int main(int argc, char const *argv[]){ ios::sync_with_stdio(false); cin.tie(0); cin &gt;&gt; n; int n2=n*n; stack&lt;pair&lt;int,int&gt; &gt; odd,even; for(int i=1;i&lt;=n;++i) { for(int j=1;j&lt;=n;++j) { if((i+j)&amp;1) { odd.push(make_pair(i,j)); }else { even.push(make_pair(i,j)); } } } pair&lt;int,int&gt; thiz; int color,oe; for(int i=0;i&lt;n2;++i) { int a; cin &gt;&gt; a; if(!odd.empty()&amp;&amp;!even.empty()) { if(a==1) { thiz = even.top(); even.pop(); color = 2; }else { thiz = odd.top(); odd.pop(); color = 1; } }else { stack&lt;pair&lt;int,int&gt; &gt; &amp;other = odd.empty()?even:odd; oe = odd.empty()?2:1; thiz = other.top(); other.pop(); if(oe==a) { color = 3; }else { color = oe; } } cout &lt;&lt; color &lt;&lt; \" \" &lt;&lt; thiz.first &lt;&lt; \" \" &lt;&lt; thiz.second &lt;&lt; \"\\n\"; cout.flush(); } return 0;}","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"problem B","slug":"problem-B","permalink":"http://laclic.github.io/tags/problem-B/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"},{"name":"div1","slug":"div1","permalink":"http://laclic.github.io/tags/div1/"},{"name":"interactive","slug":"interactive","permalink":"http://laclic.github.io/tags/interactive/"}]},{"title":"Codeforces-712(Div.1)A - Balance the Bits","slug":"Codeforces-712-Div-1-A-Balance-the-Bits","date":"2021-04-27T05:46:08.000Z","updated":"2021-04-27T06:17:15.046Z","comments":true,"path":"2021/04/27/Codeforces-712-Div-1-A-Balance-the-Bits/","link":"","permalink":"http://laclic.github.io/2021/04/27/Codeforces-712-Div-1-A-Balance-the-Bits/","excerpt":"","text":"题意 给定t个case，每个case给定n与n长度的字符串（只包含0和1）。要求你输出2个长度为n的（只包含左右括号()）字符串，要求：对于每个1对应的部分，括号方向相同；对于每个0对应的部分，括号方向相反。并且，括号应当符合语法（每个左括号都有对应的右括号，如同数学表达式中的括号一样）。现在要求你判断能否输出这样的两个字符串，如果能，则YES，并输出字符串；如果不能，则NO。 数据范围 且t个case的n之和不超过 Examples 12345678910111213141516171819Input:3610110110100110110141100Output:YES()()()((()))YES()()((()))(())()()()NO 思路 首先进行两个剪枝： 首或尾非1者，必然为NO（显而易见） 1或0的个数为奇数者，必然为NO（必有一个括号因反向而无法配对） 再证一个引理：任意一个YES样例，对于不在开头/结尾两侧的成对1，总能在不影响内外部顺序的情况下凑对 我们将这两个1分别分配左括号(和右括号) 将括号前中后分为三个部分 记作情况1：S1(S2)S3 情况2：当不存在这对括号1时，则会是 S1 S2 S3 以栈的形式存储三个字符串，如果括号匹配成功则()出栈，不成功则继续入栈，以此来记录配对情况 情况1：没有两个括号的时候，S2入栈完毕后，记还剩余x个左括号（x&gt;=0） 情况2：当有两个括号的时候，S2入栈完毕后，还剩余x+1个左括号，这个右括号)入栈后，还剩余x个左括号 证毕。 可见，对于非首尾位置的成对1，可通过分别分配左右括号来消去，从而简化问题。 接下来： 对于任意 10000…001 （中间有偶数个0） 格式的输入，总有如下格式可以符合要求 12345678910111 00 1( () )( )( )1 0000 1( ()() )( )()( )1 000000 1( ()()() )( )()()( ) 一个字符串的00都分配()，另一个的都分配)(，显然是完全能满足题意的。 代码 注：代码中对于成对1的处理是，前一半的1都分配左括号，后一半都分配右括号，效果相同。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include &lt;iostream&gt;#include &lt;stack&gt;using namespace std;void solve() { int n; string s; cin &gt;&gt; n &gt;&gt; s; if(s[0]=='0'||s[n-1]=='0') { cout &lt;&lt; \"NO\" &lt;&lt; endl; return; } int cnt1=0; for(int i=0; i&lt;n; ++i) { if(s[i]=='1') ++cnt1; } if(cnt1%2) { cout &lt;&lt; \"NO\" &lt;&lt; endl; return; }else { cnt1 /= 2; } char ans[2][n+1]; ans[0][n] = ans[1][n] = '\\0'; int has0=0,cntt1=0; for(int i=0; i&lt;n; ++i) { if(s[i]=='1') { ans[0][i] = cntt1&gt;=cnt1?')':'('; ans[1][i] = ans[0][i]; ++cntt1; }else { ans[0][i] = has0?'(':')'; ans[1][i] = has0?')':'('; has0 = !has0; } } cout &lt;&lt; \"YES\" &lt;&lt; endl &lt;&lt; ans[0] &lt;&lt; endl &lt;&lt; ans[1] &lt;&lt; endl;}int main(int argc, char const *argv[]){ ios::sync_with_stdio(false); cin.tie(0); // freopen(\"in.txt\",\"r\",stdin); int t; cin &gt;&gt; t; for(;t;--t) { solve(); } return 0;}","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"problem A","slug":"problem-A","permalink":"http://laclic.github.io/tags/problem-A/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"},{"name":"greedy","slug":"greedy","permalink":"http://laclic.github.io/tags/greedy/"},{"name":"div1","slug":"div1","permalink":"http://laclic.github.io/tags/div1/"}]},{"title":"Codeforces-Div.1及格计划","slug":"Codeforces-Div-1及格计划","date":"2021-04-24T01:28:04.000Z","updated":"2021-04-29T02:57:46.234Z","comments":true,"path":"2021/04/24/Codeforces-Div-1及格计划/","link":"","permalink":"http://laclic.github.io/2021/04/24/Codeforces-Div-1%E5%8F%8A%E6%A0%BC%E8%AE%A1%E5%88%92/","excerpt":"","text":"Problem Set #715 0 solved, 2 after-solved. problem A string and stack Binary Literature WA and TLE Solve. problem B binary search, regular and difference Almost Sorted. not tried Solve. #712 1 solved (problem A), 2 after-solved (B and C). problem A string and stack (greedy?) Balance the Bits. Accepted, WA 4 times Solve. problem B interaction 3-Coloring. not tried Solve. problem C hamiton, TSP, dp, greedy Travelling Salesman Problem. not tried Solve.","categories":[],"tags":[{"name":"algorithm","slug":"algorithm","permalink":"http://laclic.github.io/tags/algorithm/"},{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"div1","slug":"div1","permalink":"http://laclic.github.io/tags/div1/"},{"name":"ACM","slug":"ACM","permalink":"http://laclic.github.io/tags/ACM/"}]},{"title":"Codeforces-715(Div.1)B - Almost Sorted","slug":"Codeforces-715-Div-1-B-Almost-Sorted","date":"2021-04-23T11:52:12.000Z","updated":"2021-04-25T10:59:36.085Z","comments":true,"path":"2021/04/23/Codeforces-715-Div-1-B-Almost-Sorted/","link":"","permalink":"http://laclic.github.io/2021/04/23/Codeforces-715-Div-1-B-Almost-Sorted/","excerpt":"","text":"# When Who Problem Lang Verdict Time Memory 113968118 Apr/23/2021 19:17UTC+8 LacLic B - Almost Sorted GNU C++11 Accepted 62 ms 400 KB 题意 定义一种数组，叫\"almost sorted\"（快要排好序了的）数组。 对于一个有个元素的快要排好序了的数组，里面第到的每个数都必须满足如下的关系：。 给你t组数据，每组数据包含n和k，n代表这个数组里有（1,2,3,4,…,n-1,n）n个数，k代表要求你输出第k个全排列数组（即字典序排序第k个数组）。 比如：n=3时的全排列快要排好序了的数组就是{[1,2,3],[1,3,2],[2,1,3],[3,2,1]}，k=3时就代表[2,1,3]。 数据范围 , 并且所有情况中的之和 思路 可以找规律，列出n为4的8种情况 123456781 2 3 4 // 0b0001 2 4 3 // 0b0011 3 2 4 // 0b0101 4 3 2 // 0b0112 1 3 4 // 0b1002 1 4 3 // 0b1013 2 1 4 // 0b1104 3 2 1 // 0b111 结合n=1,n=2,n=3分别有1,2,4种情况，易知共有种情况，我们对他们进行二进制标号 观察到，前第一位是1；后中的前第一位是2；最后前一半是3，后一半是4，明显和二分有关。 又可以看出 12340b??? -&gt; 1 ? ? ?0b1?? -&gt; 2 1 ? ?0b11? -&gt; 3 2 1 ?0b111 -&gt; 4 3 2 1 可以根据前导1的个数来确定前几位。 也可以看出，一共4个数，而二进制表示码只有3位，利用差分，探究相邻两个数的关系。连续的1所在的差分都是递减的，0所在的差分都是递增的。此时，就可以确定二进制表示码与实际数组的关系：先找到递减序列（由题意可知必定是4321这种逐1递减的形式），那么我们只需要找到尾巴逆向填充上去即可 如: 0b0100111 12345677个二进制码，8位数，则构造1 2 3 4 5 6 7 81 3 2 4 5 6 7 8 // reverse index 1~21 3 2 4 8 7 6 5 // reverse index 4~7 可以看出，只需要对部分二进制表示码中连续的1对应位置逆序即可。 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;void solve() { int n; long long k; cin &gt;&gt; n &gt;&gt; k; --k; long long maxx = 1ll &lt;&lt; ((n-1)&gt;62?62:n-1); // 查最大值，为防止longlong溢出，而且k&lt;1e18，只需要对n-1和62取小即可（2^63 &gt; 9e18） if(k&gt;=maxx) { cout &lt;&lt; \"-1\" &lt;&lt; endl; return; } // 构造数组 int ans[n+1]; for(int i=1;i&lt;=n;++i) { ans[i] = i; } // 进行逆序 int rev = 1; for(int i=0;i&lt;n;++i) { if(k%2) ++rev; else { if(rev==1) { k&gt;&gt;=1; continue; } reverse(ans+n-i,ans+n-i+rev); rev = 1; } k&gt;&gt;=1; } for(int i=1;i&lt;=n;++i) { cout &lt;&lt; ans[i] &lt;&lt; \" \"; } cout &lt;&lt; endl;}int main(int argc, char const *argv[]){ ios::sync_with_stdio(false); cin.tie(0); int t; cin &gt;&gt; t; for(;t;--t) { solve(); } return 0;}","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"math","slug":"math","permalink":"http://laclic.github.io/tags/math/"},{"name":"problem B","slug":"problem-B","permalink":"http://laclic.github.io/tags/problem-B/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"},{"name":"div1","slug":"div1","permalink":"http://laclic.github.io/tags/div1/"},{"name":"difference","slug":"difference","permalink":"http://laclic.github.io/tags/difference/"}]},{"title":"Codeforces#715(Div.1)A - Binary Literature","slug":"Codeforces-715-Div-1-A-Binary-Literature","date":"2021-04-22T06:56:35.000Z","updated":"2021-04-24T08:35:14.052Z","comments":true,"path":"2021/04/22/Codeforces-715-Div-1-A-Binary-Literature/","link":"","permalink":"http://laclic.github.io/2021/04/22/Codeforces-715-Div-1-A-Binary-Literature/","excerpt":"","text":"# When Who Problem Lang Verdict Time Memory 113850007 Apr/22/2021 13:59UTC+8 LacLic A - Binary Literature GNU C++11 Accepted 46 ms 1900 KB 113854107 Apr/22/2021 14:53UTC+8 LacLic A - Binary Literature GNU C++11 Accepted 61 ms 1900 KB 题意 Koyomi Kanou参加了一场二进制（?）写作比赛。给定n和3个二进制字符串（长度为2n），现在要你写出一个长度为3n的新字符串，使得3个字符串中的2个是新字符串的子串。 字串定义距离：对于下面样例中的第二个case，有011001010, 011001010 and 011001010。 每次给出t组数据。 Example Input2 1 00 11 01 3 011001 111010 010001 Output010 011001010 思路 模拟栈（栈是处理字符串常用的数据结构） 首先，对于给定的3个字符串，每个长度为2n，总长度为6n，我们一共能输出3n长度的字符串。 那么，我们将三个字符串塞入（模拟）栈中，栈顶为字符串第一个元素，栈基为字符串最后一个元素。 每次3个栈顶元素，由于只有0和1，必然存在一个数出现2次或以上，我们pop出这个数，并记录到ans中，直到有一个字符串全部pop完毕，此时生成的字串长度在2n到3n之间。 证明：如此，每次必然pop出2个数，最多经过3n次操作，6n个元素全部pop出来。显然最少得经过2n次操作，就能把一个串给pop出来。 此时，已经pop出来的那个（可能不止一个）字符串处理完毕，只剩下至多2个字符串了， 如果已经pop完2个字符串了，直接填充至3n后跑路。√ 如果只pop完1个字符串，剩下2个字符串。 假定已经总共pop了 2n+k 次，那么剩下2个字符串总的字符个数最多（一次最多pop3个元素，最少pop2个元素）就是 2n-2k 个，那么至少有1个字符串的剩余字符数小于等于 n-k 个。 而我们现在刚好还有 3n-(2n+k) = n-k 个字符待填充，就用来填充那个字符串的剩余字符，同样，如果不足3n则补齐后跑路。√ 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;utility&gt;#include &lt;cassert&gt;using namespace std;void solve() &#123; int n; cin &gt;&gt; n; int n2 = n*2, n3 = n*3; vector&lt;string&gt; s(3); for(int i=0;i&lt;3;++i) &#123; cin &gt;&gt; s[i]; // 模拟栈 &#125; int now[3] = &#123;0&#125;; // 模拟栈顶指针 string ans = &quot;&quot;; while(now[0]&lt;n2&amp;&amp;now[1]&lt;n2&amp;&amp;now[2]&lt;n2) &#123; pair&lt;char,int&gt; nowat[3] = &#123;make_pair(s[0][now[0]],0),make_pair(s[1][now[1]],1),make_pair(s[2][now[2]],2)&#125;; sort(nowat,nowat+3,[&amp;](const pair&lt;char,int&gt;&amp;o1,const pair&lt;char,int&gt;&amp;o2) &#123;return o1.first&lt;o2.first;&#125; ); // 巧妙地取出了出现多的那个数 ans += nowat[1].first; if(nowat[0].first==nowat[1].first) ++now[nowat[0].second]; ++now[nowat[1].second]; if(nowat[2].first==nowat[1].first) ++now[nowat[2].second]; &#125; /* Method 1: 处理最后一个字符串，这里用的是给的思路中的写法，61ms */ for(int i=0;i&lt;3;++i) &#123; // slower than next method if(now[i]&lt;ans.size()-n||now[i]&gt;=n2) continue; for(;now[i]&lt;n2;++now[i]) &#123; ans += s[i][now[i]]; &#125; break; &#125; /* Method 2: 直接弃用剩余字符最多的那个字符串，会快很多，46ms，可能是不用调用ans.size() */ // int lowest = 0; // for(int i=1;i&lt;3;++i) &#123; // if(now[lowest]&gt;now[i]) lowest = i; // &#125; // for(int i=0;i&lt;3;++i) &#123; // if(i==lowest||now[i]&gt;=n2) continue; // for(;now[i]&lt;n2;++now[i]) &#123; // ans += s[i][now[i]]; // &#125; // &#125; assert(ans.size()&lt;=n3); // 断言，如果括号内不成立则抛出error ans.resize(n3,&#x27;0&#x27;); // 填充0（1也行） cout &lt;&lt; ans &lt;&lt; endl;&#125;int main(int argc, char const *argv[])&#123; ios::sync_with_stdio(false); cin.tie(NULL); // freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin); int t; cin &gt;&gt; t; for(;t;--t) &#123; solve(); &#125; return 0;&#125;","categories":[],"tags":[{"name":"stack","slug":"stack","permalink":"http://laclic.github.io/tags/stack/"},{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"string","slug":"string","permalink":"http://laclic.github.io/tags/string/"},{"name":"problem A","slug":"problem-A","permalink":"http://laclic.github.io/tags/problem-A/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"},{"name":"div1","slug":"div1","permalink":"http://laclic.github.io/tags/div1/"}]},{"title":"记一次docker桥接失败","slug":"记一次docker桥接失败","date":"2021-04-19T13:21:07.000Z","updated":"2021-04-21T10:50:36.645Z","comments":true,"path":"2021/04/19/记一次docker桥接失败/","link":"","permalink":"http://laclic.github.io/2021/04/19/%E8%AE%B0%E4%B8%80%E6%AC%A1docker%E6%A1%A5%E6%8E%A5%E5%A4%B1%E8%B4%A5/","excerpt":"","text":"创建虚拟机 随便创建个虚拟机即可，进去先su root切换到root账户，然后apt update升级apt 接下来apt install docker或snap install docker下载docker 输入docker --version查看是否有回显版本号 如果是用snap下载的docker，应该会有环境变量的问题 使用vim /etc/profile，在最底下加一行 1export PATH=&quot;/snap/bin/:$PATH&quot; 接下来再docker --version查看是否有回显 创建镜像并安装工具 拉取镜像docker pull ubuntu:latest 创建容器docker create --name=u1 -it ubuntu:latest bash 启动docker start u1并进入容器docker exec -it u1 bash 升级aptapt update 然后预装一些工具包 123456apt install vimapt install curlapt install iproute2apt install net-toolsapt install tracerouteapt install iputils-ping 打包镜像 先退出exit并停止容器docker stop u1 打包成镜像docker commit -a=&quot;laclic&quot; -m=&quot;:)&quot; u1 laclic:latest（-a表示author，-m表示描述，最后表示名称:标签） 创建第二个容器 有打包好的镜像了，我们直接docker create --name=u2 -it laclic:latest bash，里面已经有装好的工具包了 创建新的网桥 1docker network create --internal bdg （–internal标签表示不与外网相连） 整理网桥连接关系 123docker network disconnect bridge u1docker network connect bdg u1docker network connect bdg u2 启动容器并配置u1 启动两个容器 12docker start u1docker start u2 使用docker exec -it u2 bash进入u2并ifconfig查看以太网卡（eth0是默认网桥bridge，eth1是我们新建的bdg） 记录eth1网卡的ip（我这里是172.20.0.3），之后都用[ip.ip.ip.ip]指代。 使用exit退出u2并docker exec -it u1 bash进入u1 重写默认路由 123ip route del defaultip route add default via [ip.ip.ip.ip]&#x2F;&#x2F; 我这里是172.20.0.3，就用 ip route add default via 172.20.0.3 内核启用包转发 回到宿主机（容器默认的包转发都是已经打开的） 12sysctl net.ipv4.conf.all.forwarding&#x3D;1sudo iptables -P FORWARD ACCEPT 如果没有iptables就apt install iptables下一个 至此，如图配置基本完成，但发现u1仍旧无法ping通外网……","categories":[],"tags":[{"name":"network","slug":"network","permalink":"http://laclic.github.io/tags/network/"},{"name":"docker","slug":"docker","permalink":"http://laclic.github.io/tags/docker/"}]},{"title":"Codeforces-Okabe_and_City","slug":"Codeforces-Okabe-and-City","date":"2021-04-16T02:41:44.000Z","updated":"2021-04-18T16:12:22.508Z","comments":true,"path":"2021/04/16/Codeforces-Okabe-and-City/","link":"","permalink":"http://laclic.github.io/2021/04/16/Codeforces-Okabe-and-City/","excerpt":"","text":"不会做…不过搜罗到了2种做法 # When Who Problem Lang Verdict Time Memory 方法 113137862 Apr/16/2021 10:39 UTC+8 LacLic D - Okabe and City GNU C++11 Accepted 3119 ms 17100 KB 方法一 113400410 Apr/18/2021 17:39UTC+8 LacLic D - Okabe and City GNU C++11 Accepted 686 ms 300 KB 方法二 题意 Okabe来到了一个城市，由于怕被学校同学打，他只敢走亮着的地方。现在给定把城市模拟成一个大小的矩阵，再给出个永远亮着的地方。现在Okabe有个魔法，当他站在永恒亮处时，可以花费一个硬币任意点亮一排或一列的地方（但是离开这排或列时，这排或列非永恒点亮的地方就会熄灭），他想从最左上角走到最右下角，请问至少要花费多少个硬币？（无法到达则输出-1） 其中的数据范围 , 思路与代码 法一：边建图边搜索 法二：直接搜点（推荐） 思路1 图（graph） 如果每个点之间建立邻接矩阵，那显然是内存不够的（破G了），又由于图上只有亮点，且每次点亮都是整行/整列点亮，我们考虑以行+列+亮点建图（总共最多个点，显然是足够的） 在永恒亮点时，我们搜上下左右的永恒亮点、点亮上下行左右列、这行列；在临时点亮的行列时，我们搜相邻行列和这一行列的永恒亮点 采用优先队列（堆），来规划优先搜索硬币消耗最少的路径 把消耗的硬币数看作路程，如果使用魔法，则路程+1，没使用则+0 代码1 代码看起来长，其实都是复制黏贴 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218#include &lt;cstdio&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;set&gt;#define MAXX 10006using namespace std;int n,m,k; // 题目输入int drcx[]={0,0,1,-1},drcy[]={1,-1,0,0}; // 原本想用这个改一下大量的复制黏贴，但是考虑到自己比较懒……typedef struct _node { int x,y,tx,ty,s; // x,y: 当前坐标 // tx: 若不为0，表示使用了魔法，点亮了当前行 // ty: 同理如上 // s: 路程}Node;set&lt;int&gt; x[MAXX],y[MAXX]; // 储存每一行/列的永恒亮点，方便遍历typedef struct _mapcmp{ bool operator()(const Node&amp;o1,const Node&amp;o2) { if(o1.x!=o2.x) return o1.x&lt;o2.x; else if(o1.y!=o2.y) return o1.y&lt;o2.y; else if(o1.tx!=o2.tx) return o1.tx&lt;o2.tx; else return o1.ty&lt;o2.ty; }}Mapcmp; // 重写hash，使各个node在map中有唯一表示（忽略路程s）map&lt;Node,bool,Mapcmp&gt; hasBeen; // 记录已经经过的点bool inside(const Node&amp;o) { // 检查点是否在图内 return o.x&gt;=1&amp;&amp;o.x&lt;=n&amp;&amp;o.y&gt;=1&amp;&amp;o.y&lt;=m;}int dij() { typedef struct _cmp { bool operator()(Node const&amp;o1, Node const&amp;o2) { return o1.s&gt;o2.s; } }Cmp; // 堆排序函数，方便寻路时先搜索最短路 priority_queue&lt;Node,vector&lt;Node&gt;,Cmp&gt; heap; // 待搜索堆 heap.push((Node){1,1,0,0,0}); // 从第一个点开始 while(!heap.empty()) { Node thiz; thiz=heap.top(); heap.pop(); if(hasBeen[thiz]) continue; // 已经过的地点就跳过了（因为优先搜索最短路，所以不可能有更短路了） hasBeen[thiz] = 1; // printf(\"%d %d | %d %d s:%d\\n\",thiz.x,thiz.y,thiz.tx,thiz.ty,thiz.s); if(thiz.x==n&amp;&amp;thiz.y==m||thiz.tx==n||thiz.ty==m) return thiz.s; // 已经达到终点 if(thiz.tx) { // 如果当前处于魔法点亮的行 // 此时只能够走到永恒亮点 // 只需要搜索这一行、上一行、下一行 Node tmp; // STAY tmp = thiz; if(inside(tmp)) { tmp.tx = 0; // 重置魔法点亮行为0 tmp.ty = 0; // 重置魔法点亮列为0 （这里应该不需要重置列） for(auto it=x[tmp.x].begin();it!=x[tmp.x].end();++it) { // auto会在编译时判断变量类型，使用auto是为了方便，少打很多字 tmp.y = *it; if(inside(tmp)) heap.push(tmp); // 搜到点了，直接push进去（另外这里没必要判断inside了，永恒亮点必定在图内） } } // DOWN // 同理 tmp = thiz; ++tmp.x; if(inside(tmp)) { tmp.tx = 0; tmp.ty = 0; for(auto it=x[tmp.x].begin();it!=x[tmp.x].end();++it) { tmp.y = *it; if(inside(tmp)) heap.push(tmp); } } // UP tmp = thiz; --tmp.x; if(inside(tmp)) { tmp.tx = 0; tmp.ty = 0; for(auto it=x[tmp.x].begin();it!=x[tmp.x].end();++it) { tmp.y = *it; if(inside(tmp)) heap.push(tmp); } } }else if(thiz.ty) { // 当前处在魔法点亮列 // 同上 Node tmp; // STAY tmp = thiz; if(inside(tmp)) { tmp.tx = 0; tmp.ty = 0; for(auto it=y[tmp.y].begin();it!=y[tmp.y].end();++it) { tmp.x = *it; if(inside(tmp)) heap.push(tmp); } } // RIGHT tmp = thiz; ++tmp.y; if(inside(tmp)) { tmp.tx = 0; tmp.ty = 0; for(auto it=y[tmp.y].begin();it!=y[tmp.y].end();++it) { tmp.x = *it; if(inside(tmp)) heap.push(tmp); } } // UP tmp = thiz; --tmp.y; if(inside(tmp)) { tmp.tx = 0; tmp.ty = 0; for(auto it=y[tmp.y].begin();it!=y[tmp.y].end();++it) { tmp.x = *it; if(inside(tmp)) heap.push(tmp); } } }else { // 当前处在永恒亮点 Node tmp; // DOWN tmp = thiz; ++tmp.x; if(inside(tmp)&amp;&amp;y[tmp.y].count(tmp.x)) { // 搜正下方（永恒亮点） heap.push(tmp); }else { // 如果不是永恒亮点，点亮并搜下一行 if(inside(tmp)) { ++tmp.s; tmp.tx = tmp.x; heap.push(tmp); } } // UP 同理如上 tmp = thiz; --tmp.x; if(inside(tmp)&amp;&amp;y[tmp.y].count(tmp.x)) { heap.push(tmp); }else { if(inside(tmp)) { ++tmp.s; tmp.tx = tmp.x; heap.push(tmp); } } // RIGHT tmp = thiz; ++tmp.y; if(inside(tmp)&amp;&amp;x[tmp.x].count(tmp.y)) { heap.push(tmp); }else { if(inside(tmp)) { ++tmp.s; tmp.ty = tmp.y; heap.push(tmp); } } // LEFT tmp = thiz; --tmp.y; if(inside(tmp)&amp;&amp;x[tmp.x].count(tmp.y)) { heap.push(tmp); }else { if(inside(tmp)) { ++tmp.s; tmp.ty = tmp.y; heap.push(tmp); } } // STAY // 只需要点亮搜索该行该列即可 tmp = thiz; ++tmp.s; tmp.tx = tmp.x; heap.push(tmp); tmp.tx = 0; tmp.ty = tmp.y; heap.push(tmp); } } return -1;}int main(int argc, char const *argv[]){ #pragma clang diagnostic push // 忽略未使用scanf返回值提示 #pragma clang diagnostic ignored \"-Wdeprecated-declarations\" // freopen(\"in.txt\", \"r\", stdin); scanf(\"%d %d %d\",&amp;n,&amp;m,&amp;k); for(;k;--k) { int xx,yy; scanf(\"%d %d\",&amp;xx,&amp;yy); #pragma clang diagnostic pop x[xx].insert(yy); // 建图，记录该行所有的永恒亮点 y[yy].insert(xx); // 同上 } printf(\"%d\",dij()); return 0;} 思路2 直接搜点，只记录所有永恒亮点 用队列来储存待搜索点 当在一个永恒亮点时，遍历搜索所有其他永恒亮点，如果相邻，则直接入队；如果不相邻，但可以通过点亮某行列走过去（相差行列小于等于2），则路程+1后入队。 记录目的地是否被点亮，如果点亮，则取出目的地所需的硬币数。再遍历一次所有永恒亮点，找相邻的永恒亮点，总硬币数即为相邻永恒亮点所需硬币；找和目的地差一行列或就在所在行列的永恒亮点，总硬币数即为其+1。取上述最小值即可，如果没有则为-1。 时间复杂度，4秒完全够了 代码2 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;queue&gt;#define INFF 0x3f3f3f3f#define MAXX 10010using namespace std;int cost[MAXX];typedef struct _node{ int x,y; int id; // bool operator&lt;(const struct _node&amp;o) { // return cost[this-&gt;id] &gt; cost[o.id]; // }}Node;Node lit[MAXX];int n,m,k,dstLit=0,src;int dis(const int&amp;o1,const int&amp;o2) { return o1&gt;o2?o1-o2:o2-o1;}int bfs() { memset(cost,INFF,sizeof(cost)); // 默认最大值 // priority_queue&lt;Node&gt; q; // 本来也想用堆的，但是没重写好比较函数，就不用了（lazy~） queue&lt;Node&gt; q; // 待搜索队列 q.push({1,1}); // 起始点 cost[src]=0; // 起始点 while(!q.empty()) { // Node tmp = q.top(); Node tmp = q.front(); q.pop(); for(int i=0;i&lt;k;++i) { if(i==tmp.id) continue; int dx = dis(tmp.x,lit[i].x); int dy = dis(tmp.y,lit[i].y); // 记录相差距离 int coin = INFF; if(dx+dy&lt;=1) { // 相邻 coin = 0; }else if(dx&lt;=2||dy&lt;=2) { // 魔法点亮后能达到 coin = 1; }else { // 到不了 continue; } if(cost[i]&gt;coin+cost[tmp.id]) { // 如果这条路径更短，则覆写 cost[i] = coin+cost[tmp.id]; q.push(lit[i]); } } } if(dstLit) return cost[dstLit]; // 如果已经点亮，则直接输出cost else { // 如果没点亮，则遍历所有点，取最小值 int ret = INFF; for(int i=0;i&lt;k;++i) { if(n-lit[i].x&lt;=1||m-lit[i].y&lt;=1) { if(ret&gt;cost[lit[i].id]+1) ret = cost[lit[i].id]+1; } } if(ret==INFF) return -1; else return ret; }}int main(int argc, char const *argv[]){ #pragma clang diagnostic push #pragma clang diagnostic ignored \"-Wdeprecated-declarations\" // freopen(\"in.txt\", \"r\", stdin); scanf(\"%d %d %d\",&amp;n,&amp;m,&amp;k); for(int i=0;i&lt;k;++i) { int x,y; scanf(\"%d %d\",&amp;x,&amp;y); #pragma clang diagnostic pop lit[i] = {x,y,i}; if(x==1&amp;&amp;y==1) { // 记录起始点id src = i; } if(x==n&amp;&amp;y==m) { // 记录目的地id，如果为0则没点亮 dstLit = i; } } printf(\"%d\",bfs()); return 0;}","categories":[],"tags":[{"name":"priority_queue","slug":"priority-queue","permalink":"http://laclic.github.io/tags/priority-queue/"},{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"},{"name":"problem D","slug":"problem-D","permalink":"http://laclic.github.io/tags/problem-D/"},{"name":"dijkstra","slug":"dijkstra","permalink":"http://laclic.github.io/tags/dijkstra/"},{"name":"graph","slug":"graph","permalink":"http://laclic.github.io/tags/graph/"},{"name":"board first search","slug":"board-first-search","permalink":"http://laclic.github.io/tags/board-first-search/"}]},{"title":"Codeforces-Okabe and Boxes","slug":"Codeforces-Okabe-and-Boxes","date":"2021-04-08T12:48:34.000Z","updated":"2021-04-09T06:30:32.064Z","comments":true,"path":"2021/04/08/Codeforces-Okabe-and-Boxes/","link":"","permalink":"http://laclic.github.io/2021/04/08/Codeforces-Okabe-and-Boxes/","excerpt":"","text":"题意 Okabe和Daru正在玩箱子入栈出栈游戏（？？？）。现在告诉你有n个箱子（编号1到n）和2n条命令（add x将编号x箱子入栈的或remove将栈顶箱子出栈），使得箱子按编号1到n顺序remove出来。 保证每个箱子在remove之前都已经add。 思路 十分巧妙的题目 假排序，已经排序好的元素之间移除栈即可，由于每个箱子在remove之前都已经add，当栈为空的时候，说明剩下的都是排好序的，直接跳过即可。 代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;cstdio&gt;int stk[300006]; // 数组模拟栈int front=0; // 模拟栈指针inline void pop() { --front;}inline void push(int x) { stk[front] = x; // 两行合起来可以直接写成stk[front++] = x; ++front;}int main(int argc, char const *argv[]){ // freopen(\"in.txt\", \"r\", stdin); int N; scanf(\"%d\", &amp;N); int Nx2 = N*2; char cmd[10]; int tmp; int now = 1; int ans = 0; for(;Nx2;--Nx2) { scanf(\"%s\",cmd); if(cmd[0]=='a') { scanf(\"%d\",&amp;tmp); push(tmp); }else { if(front) { if(stk[front-1]==now) { // 栈顶元素恰好为所需元素 pop(); ++now; }else { // 进行一次（假）排序 front = 0; // 清空栈 ++ans; // 计数器+1 ++now; } }else { // 栈为空，直接跳过 ++now; } } } printf(\"%d\",ans); return 0;}","categories":[],"tags":[{"name":"stack","slug":"stack","permalink":"http://laclic.github.io/tags/stack/"},{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"problem C","slug":"problem-C","permalink":"http://laclic.github.io/tags/problem-C/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"Codeforces-Okabe and Banana Trees","slug":"Codeforces-Okabe-and-Banana-Trees","date":"2021-04-08T12:48:08.000Z","updated":"2021-04-09T06:44:15.297Z","comments":true,"path":"2021/04/08/Codeforces-Okabe-and-Banana-Trees/","link":"","permalink":"http://laclic.github.io/2021/04/08/Codeforces-Okabe-and-Banana-Trees/","excerpt":"","text":"题意 定义：整点：横纵坐标均为整数的点称为整点。 在一个含坐标轴与第一象限的平面直角坐标系中，每个整点的地方都含有个香蕉，现在给定你一条直线，在直线上取一个整点，记原点为，连结，作以为对角线的矩形，使得矩形中（包括边）香蕉的个数最多，输出最多香蕉个数。 ，，保证输出结果小于 思路 由于除法会算出小数，将用表示为，当时。 另外，将矩形香蕉阵化作矩阵，可以观察出，该矩阵由一个自左向右递增、一个自底向上递增的矩阵相加而来。 以样例1为例： $$ + $$ 如此便能通过，快速两个求出分矩阵的和，总和计算次数等于。 代码 12345678910111213141516171819202122#include &lt;cstdio&gt;int main(int argc, char const *argv[]){ int m,b; scanf(\"%d %d\",&amp;m,&amp;b); int K = -m, B = m*b; // x = -m*y+m*b = Ky+B; x=0 -&gt; y=b long long maxx = 0; for(long long y=0;y&lt;=b;++y) { long long sum = 0; long long x = K*y+B; long long row = x*(x+1)/2; sum += row*(y+1); long long column = y*(y+1)/2; sum += column*(x+1); if(sum &gt; maxx) maxx = sum; } printf(\"%lld\",maxx); return 0;}","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"problem B","slug":"problem-B","permalink":"http://laclic.github.io/tags/problem-B/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"Codeforces-Okabe and Future Gadget Laboratory","slug":"Codeforces-Okabe-and-Future-Gadget-Laboratory","date":"2021-04-08T12:47:47.000Z","updated":"2021-04-09T07:06:48.648Z","comments":true,"path":"2021/04/08/Codeforces-Okabe-and-Future-Gadget-Laboratory/","link":"","permalink":"http://laclic.github.io/2021/04/08/Codeforces-Okabe-and-Future-Gadget-Laboratory/","excerpt":"","text":"题意 给定和大小的二维数组，要求你检查对于每个非的元素，是否都能在所在行上找一个数，所在列上找一个数，使得这个数，如果能，输出Yes，否则输出No。 思路 暴力搜索，对每个元素搜索它所在行的每一个数，所在列的每一个数，若能找到符合要求的数，则搜索下一个元素，否则跳出所有循环直接输出No。 代码 1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;cstdio&gt;#include &lt;set&gt;using namespace std;int main(int argc, char const *argv[]){ int N; scanf(\"%d\", &amp;N); int a[N][N]; for(int i=0;i&lt;N;++i) { for(int j=0;j&lt;N;++j) { scanf(\"%d\", &amp;a[i][j]); } } int isTure; for(int i=0;i&lt;N;++i) { for(int j=0;j&lt;N;++j) { if(a[i][j] != 1) { isTure = 0; for(int k=0;k&lt;N;++k) { for(int l=0;l&lt;N;++l) { // printf(\"%d+%d=%d\\n\",a[k][j],a[i][l],a[k][j]+a[i][l]); if(a[i][j] == a[k][j]+a[i][l]) { isTure = 1; goto here; } } } here:; if(isTure) continue; else goto out; } } } out: if(isTure) printf(\"Yes\\n\"); else printf(\"No\\n\"); return 0;}","categories":[],"tags":[{"name":"brute force","slug":"brute-force","permalink":"http://laclic.github.io/tags/brute-force/"},{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"problem A","slug":"problem-A","permalink":"http://laclic.github.io/tags/problem-A/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"Codeforces-Robot Vacuum Cleaner","slug":"Codeforces-Robot-Vacuum-Cleaner","date":"2021-04-01T12:28:29.000Z","updated":"2021-04-06T15:15:29.198Z","comments":true,"path":"2021/04/01/Codeforces-Robot-Vacuum-Cleaner/","link":"","permalink":"http://laclic.github.io/2021/04/01/Codeforces-Robot-Vacuum-Cleaner/","excerpt":"","text":"题意 Pushok被狗追啦！Pushok发现这只狗很怕扫地机器人发出的“sh”（嘶嘶声），这台扫地机器人能够发出固定的声音，比如：“ssssh”，“ssh”，“hhs”等，由字母‘s’和‘h’组成的字符串，只要s和h的组合数越多，发出的声响越大（比如：对于sshh，第一个s+第一个h，第二个s+第一个h，第一个s+第二个h，第二个s+第二个h，组合数为4）。现在，已知这台扫地机器人内存（?）里已经存储了N条字符串，现在要你将他们按一定顺序组合，以使得sh组合数最多。 思路 贪心：局部与该局部以外整体无关，只调整该局部的情况并不会影响局部以外的结果。 举例：以第二行为“局部” ssh hs shhhs hhs sh s h shhhs hhs ssh hs sh s h 对于最下面那一行（局部以外），不管是shhhs还是hhs，对于他们来说都是只要顾及shhhs和hhs中‘s’的个数和‘h’的个数就好了。 所以，只要解决局部问题，到底是shhhs放前面，还是hhs放前面？只要比较一下二者不同产生的组合数即可，另外，当产生组合数相等时，s多的放前面。 根据冒泡排序的swap二者的原理，我们可以迅速想到使用排序的方法解决“整体”问题。 PS： 根据seraph_jack同志的说法，光判断局部二者前后顺序还不够，因为我们还没有证明大小关系的传递性，可能只能通过仅一次的二者交换达到局部最小值。 我的证明（不严谨，但个人感觉已经足够）： 首先，假设给定的输入数据组（字符串组）为G1，我们经过一次的二者交换得到数据组G2。那么重新认为输入数据组为G2，我们又可以经过一次二者交换（此时，如果只能达到局部最小值，我们交换后的数据组应当仍为G2，但显然只有当G2就是最优数据组的情况才可能成立），得到G3。再重新认为输入数据组为G3……由数学归纳法可知，我们可以经过无数次重新定义输入数据组来得到最终同冒泡排序结果一样的数据组。由于排序的本质都是相同的，冒泡排序和快速排序都是通用的，所以个人认为可以直接用std::sort()。（std::sort()的基础是快速排序） seraph_jack的证明（sh的比大小具有传递性）： 我们记sh1/2/3分别为3个字符串，sh.s为该串s的个数，h同理 两式相乘得， 消去sh2.h*sh2.s，得 传递性得证。 代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#define MAXX 100006typedef long long ll;typedef struct _node{ ll sh,s,h;}node;node sh[MAXX];char tmp[100006];bool cmp(const node&amp;o1,const node&amp;o2) { // return o1&gt;o2, from large to small if(o1.s*o2.h&lt;o2.s*o1.h) return false; else if(o1.s*o2.h&gt;o2.s*o1.h) return true; else return o1.s&gt;o2.s;}int main(int argc, char const *argv[]){ int N; scanf(\"%d\",&amp;N); memset(sh,0,sizeof(sh[0])*N+6); for(int i=0;i&lt;N;++i) { scanf(\"%s\",tmp); for(int j=0;1;++j) { switch(tmp[j]) { case 's': ++sh[i].s; break; case 'h': ++sh[i].h; sh[i].sh += sh[i].s; break; default: goto out; } } out:; } std::sort(sh,sh+N,cmp); ll tmps=0,ans=0; for(int i=0;i&lt;N;++i) { ans = ans + sh[i].sh + tmps*sh[i].h; tmps += sh[i].s; } printf(\"%lld\",ans); return 0;}","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"},{"name":"problem D","slug":"problem-D","permalink":"http://laclic.github.io/tags/problem-D/"}]},{"title":"Win10-重置网络后WLAN消失","slug":"Win10-重置网络后WLAN消失","date":"2021-03-28T02:46:34.000Z","updated":"2021-03-28T02:46:34.405Z","comments":true,"path":"2021/03/28/Win10-重置网络后WLAN消失/","link":"","permalink":"http://laclic.github.io/2021/03/28/Win10-%E9%87%8D%E7%BD%AE%E7%BD%91%E7%BB%9C%E5%90%8EWLAN%E6%B6%88%E5%A4%B1/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Codeforces-Restoration of string","slug":"Codeforces-Restoration-of-string","date":"2021-03-23T13:31:57.000Z","updated":"2021-03-23T15:54:37.947Z","comments":true,"path":"2021/03/23/Codeforces-Restoration-of-string/","link":"","permalink":"http://laclic.github.io/2021/03/23/Codeforces-Restoration-of-string/","excerpt":"","text":"题目 给定最频繁子串定义：若该子串在原串中出现次数不少于任意一个其他字串出现的次数，则称该子串为最频繁子串。 现在给定你N与N个子串（只有小写的a到z），求最短的原串，使得这N个子串均为原串的最频繁子串（若有多个则输出字典序最小的）。若无这种原串则输出NO。 n和字串的长度均大于等于1小于等于1e5。 思路 审计题目，考虑到如果有字母重复的话，则必为NO，只需要记录每个字母的前后关系。 开一个长度26（代表各个字母）的双向链表，遍历每个串的每个字符，若当前字符没有使用过，则记录下每个字符前后的字符，若没有字符则为空（可用-1表示）。 特殊情况： 注意abc，abd的形式，此时d并没有被使用，但是仍应当为NO，所以我们还要检测d前一个字符b的后方是不是没有字符。 注意abc，def，cd的形式，cd会连结原来的2个串，如果只检查发现d前面不是c，c后面不是d，就会是NO。所以我们还要检查c后方和d前方是不是没有字符，如果没有，则连结他们 注意abc，def，cd，fa的形式，cd和fa会将原来的两个串连成闭环而为NO，所以我们最后要检查是否出现了闭环，若出现则为NO 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293#include &lt;cstdio&gt;char tmp[100006];typedef struct _letter &#123; int oc_str; // letter所在串，没啥用，但是被我用来标记是否被使用过 int oc_pos; // letter所在串的位置，这个是真的没啥用 int next_letter; // a~z ==&gt; 0~25 int prev_letter;&#125;Letter;int main(int argc, char const *argv[])&#123; int N; scanf(&quot;%d&quot;, &amp;N); int prev; Letter a[26]=&#123;&#123;0,0,0,0&#125;&#125;; for(int i=0;i&lt;26;++i) &#123; a[i].prev_letter = -1; a[i].next_letter = -1; &#125; int isTrue = 1; for(int i=0;i&lt;N;++i) &#123; scanf(&quot;%s&quot;,tmp); prev = -1; for(int j=0;tmp[j]!=0;++j) &#123; if(!a[tmp[j]-&#x27;a&#x27;].oc_str &amp;&amp; (prev==-1||a[prev].next_letter==-1)) &#123; // 检查当前字符是否被使用过 而且 它为当前子串第一个字符（防止访问到-1）或者前一个字符后面没有字符 a[tmp[j]-&#x27;a&#x27;].oc_str = i+1; // +1以预留0，若为0则说明该字母没有被使用过 a[tmp[j]-&#x27;a&#x27;].oc_pos = j; // 没啥用，写了懒得删 a[tmp[j]-&#x27;a&#x27;].prev_letter = prev; // 连接到上一个字符 if(prev!=-1) a[prev].next_letter = tmp[j]-&#x27;a&#x27;; // 连结上一个字符到这一个字符 prev = tmp[j]-&#x27;a&#x27;; // 记录上一个字符 &#125;else &#123; if(prev==-1) &#123; // 检查是否为当前子串第一个字符 prev = tmp[j]-&#x27;a&#x27;; &#125;else &#123; if(a[prev].next_letter == tmp[j]-&#x27;a&#x27;) &#123; // 检查是否为上一个字符的下一个字符（是否连结正确） prev = tmp[j]-&#x27;a&#x27;; &#125;else if(a[prev].next_letter==-1 &amp;&amp; a[tmp[j]-&#x27;a&#x27;].prev_letter==-1) &#123; // 检查是否能使得两个串连结（特殊情况2） a[prev].next_letter = tmp[j]-&#x27;a&#x27;; // 连结它们 a[tmp[j]-&#x27;a&#x27;].prev_letter = prev; // 连结它们 prev = tmp[j]-&#x27;a&#x27;; &#125;else &#123; isTrue = 0; goto out; &#125; &#125; &#125; &#125; &#125; out: if(!isTrue) &#123; printf(&quot;NO&quot;); &#125;else &#123; // check whether letters make a circle /* 检查闭环 开始 */ long long status = 0b11111111111111111111111111; // 记录26个字母的使用情况 for(int i=0;i&lt;26;++i) &#123; // 检查各个首字符 if(!status&amp;(1&lt;&lt;i)||a[i].prev_letter!=-1) continue; // 若被使用过或该字符不为首字符，则跳过 if(a[i].oc_str) &#123; for(int j=i;1;j=a[j].next_letter) &#123; // 从首字符开始遍历串 status ^= 1&lt;&lt;j; // 将串上的字符状态改为0 if(a[j].next_letter==-1) break; // 退出循环 &#125; &#125; &#125; for(int i=0;i&lt;26;++i) &#123; if(status&amp;(1&lt;&lt;i)&amp;&amp;a[i].oc_str) &#123; // 找闭环：如果有个字符是已经被使用的，但是由于是闭环没有检查到首字符，所以不会被修改状态 isTrue = 0; break; &#125; &#125; /*检查闭环 结束*/ // 输出，就比原来的循环多了一句putchar if(isTrue) &#123; status = 0b11111111111111111111111111; for(int i=0;i&lt;26;++i) &#123; if(!status&amp;(1&lt;&lt;i)||a[i].prev_letter!=-1) continue; if(a[i].oc_str) &#123; for(int j=i;1;j=a[j].next_letter) &#123; putchar(&#x27;a&#x27;+j); status ^= 1&lt;&lt;j; if(a[j].next_letter==-1) break; &#125; &#125; &#125; &#125;else &#123; printf(&quot;NO&quot;); &#125; &#125; return 0;&#125;","categories":[],"tags":[{"name":"linked list","slug":"linked-list","permalink":"http://laclic.github.io/tags/linked-list/"},{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"},{"name":"doubly linked list","slug":"doubly-linked-list","permalink":"http://laclic.github.io/tags/doubly-linked-list/"},{"name":"problem D","slug":"problem-D","permalink":"http://laclic.github.io/tags/problem-D/"},{"name":"linked list circle","slug":"linked-list-circle","permalink":"http://laclic.github.io/tags/linked-list-circle/"}]},{"title":"Codeforces-Petya and Catacombs","slug":"Codeforces-Petya-and-Catacombs","date":"2021-03-23T13:31:47.000Z","updated":"2021-03-23T15:23:31.139Z","comments":true,"path":"2021/03/23/Codeforces-Petya-and-Catacombs/","link":"","permalink":"http://laclic.github.io/2021/03/23/Codeforces-Petya-and-Catacombs/","excerpt":"","text":"题意 Petya去一个古墓探险，有很多房间。每到一个新房间，便在笔记写下小于（不等于）当前时刻t的数；每到一个之前来过的房间，便在笔记写下上一次来该房间的时刻（我也不知道他怎么知道的，大概是做了什么记号吧）。 t==0的时刻（刚进古墓的时候），Petya没有做任何笔记。 经过一段时间，Petya跑路回家了，他看了看笔记，想知道古墓中至少有几个房间。 思路 贪心：每次都取局部最优解，不用顾全局 一个笔记遍历过去，如果当前笔记所记下的时刻是某一个房间的时刻，则去该房间即可，否则只能去一个新的房间。 设置一个数组，用于记录在t时刻Petya在编号a[i]的房间 代码 1234567891011121314151617181920212223242526#include &lt;cstdio&gt;#include &lt;cstring&gt;int a[200006]; // a[time] = room identifierint main(int argc, char const *argv[])&#123; int N; scanf(&quot;%d&quot;, &amp;N); memset(a, 0, sizeof(a[0])*(N+1)); // set 0 int tmp,ans = 1; a[0] = 1; // when t==0, Petya is in room 1 for(int i=1;i&lt;=N;++i) &#123; scanf(&quot;%d&quot;, &amp;tmp); if(a[tmp]) &#123; // if at tmp time, he is at some room a[i] = a[tmp]; // at this time, he go to this room a[tmp] = 0; // set tmp time no room &#125;else &#123; ++ans; // counter++ a[i] = ans; &#125; &#125; printf(&quot;%d&quot;,ans); return 0;&#125;","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"problem C","slug":"problem-C","permalink":"http://laclic.github.io/tags/problem-C/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"},{"name":"greedy","slug":"greedy","permalink":"http://laclic.github.io/tags/greedy/"}]},{"title":"Codeforces-Vlad and Cafes","slug":"Codeforces-Vlad-and-Cafes","date":"2021-03-23T13:31:37.000Z","updated":"2021-04-06T14:56:57.964Z","comments":true,"path":"2021/03/23/Codeforces-Vlad-and-Cafes/","link":"","permalink":"http://laclic.github.io/2021/03/23/Codeforces-Vlad-and-Cafes/","excerpt":"","text":"题意 Vlad 喜欢去咖啡厅。现给定共 n 个天数和这 n 天中 Vlad 分别所去的咖啡的代号，求 Vlad 距离上一次去最久远的咖啡厅。 思路 使用 map，给每个咖啡厅代号赋值为当前的天数，最后遍历 map 中所有元素，寻找 value 最小值并输出 key。 代码 12345678910111213141516171819202122#include &lt;cstdio&gt;#include &lt;map&gt;using namespace std;int main(int argc, char const *argv[]){ int N; scanf(\"%d\", &amp;N); map&lt;int,int&gt; m; int tmp; for(int i=0;i&lt;N;++i) { scanf(\"%d\",&amp;tmp); m[tmp] = i; } int ans=m.begin()-&gt;first; for(map&lt;int,int&gt;::iterator it=m.begin();it!=m.end();++it) { if(m[ans]&gt;it-&gt;second) ans = it-&gt;first; } printf(\"%d\\n\", ans); return 0;}","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"map","slug":"map","permalink":"http://laclic.github.io/tags/map/"},{"name":"problem B","slug":"problem-B","permalink":"http://laclic.github.io/tags/problem-B/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"Codeforces-ACM ICPC","slug":"Codeforces-ACM-ICPC","date":"2021-03-23T13:31:27.000Z","updated":"2021-04-01T12:30:02.912Z","comments":true,"path":"2021/03/23/Codeforces-ACM-ICPC/","link":"","permalink":"http://laclic.github.io/2021/03/23/Codeforces-ACM-ICPC/","excerpt":"","text":"题目 给定 6 个数，将它们 3 个 3 个等分为 2 组，要求 2 组数的和相等 思路 求总和，若为奇数则比不能等分 求总和折半值，一个个数试过去看看是否能达到折半值 代码 123456789101112131415161718192021222324252627282930#include &lt;cstdio&gt;int main(int argc, char const *argv[])&#123; int a[6],sum; for(int i=0;i&lt;6;++i) &#123; scanf(&quot;%d&quot;,&amp;a[i]); sum += a[i]; &#125; int ans=0; if(sum%2==1) ans = 0; else &#123; int tar = sum/2; for(int i=0;i&lt;4;++i) &#123; for(int j=i+1;j&lt;5;++j) &#123; for(int k=j+1;k&lt;6;++k) &#123; if(a[i]+a[j]+a[k]==tar) &#123; ans = 1; break; &#125; &#125; &#125; &#125; &#125; if(ans) printf(&quot;YES&quot;); else printf(&quot;NO&quot;); return 0;&#125;","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"problem A","slug":"problem-A","permalink":"http://laclic.github.io/tags/problem-A/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"C++高精度BigInt","slug":"C-高精度BigInt","date":"2021-03-21T10:38:29.000Z","updated":"2021-04-01T12:30:09.119Z","comments":true,"path":"2021/03/21/C-高精度BigInt/","link":"","permalink":"http://laclic.github.io/2021/03/21/C-%E9%AB%98%E7%B2%BE%E5%BA%A6BigInt/","excerpt":"","text":"代码include &lt;cstdio&gt;#include &lt;cstring&gt;#define TYPE char // type of BigInt element#define LENGTH 10100 // N==50000, LENGTH == 9986const int bigger = -1;const int equal = 0;const int smaller = 1;const int base = 10;class BigInt &#123; private: TYPE n[LENGTH]; int bit; bool isPositive = true; BigInt big_minus_small(const BigInt&amp;o1,const BigInt&amp;o2,const int&amp;maxbit,const int&amp;minbit,int bias=0) &#123; BigInt ret; for(int i=0;i&lt;bias;++i) &#123; ret.n[i] = o1.n[i]; &#125; int down = 0; for(int i=0;i&lt;minbit;++i) &#123; ret.n[i+bias] = o1.n[i+bias] - o2.n[i] - down; if(ret.n[i+bias]&lt;0) &#123; down = 1; ret.n[i+bias] += base; &#125;else &#123; down = 0; &#125; &#125; for(int i=minbit;i&lt;maxbit;++i) &#123; ret.n[i+bias] = o1.n[i+bias] - down; if(ret.n[i+bias]&lt;0) &#123; down = 1; ret.n[i+bias] += base; &#125;else &#123; down = 0; &#125; &#125; ret.bit=1; for(int i=maxbit-1;i&gt;=0;--i) &#123; if(ret.n[i]!=0) &#123; ret.bit = i+1; break; &#125; &#125; return ret; &#125; bool biasSmaller(const BigInt&amp;o2, int bias) &#123; if(this-&gt;bit&lt;o2.bit+bias) &#123; return true; &#125;else if(this-&gt;bit&gt;o2.bit+bias) &#123; return false; &#125;else &#123; for(int i=o2.bit-1;i&gt;=0;--i) &#123; if(this-&gt;n[i+bias] &lt; o2.n[i]) &#123; return true; &#125;else if(this-&gt;n[i+bias] &gt; o2.n[i]) &#123; return false; &#125; &#125; return false; // equal &#125; &#125; int compare(const BigInt&amp;o1, const BigInt&amp;o2) &#123; if(this-&gt;bit&lt;o2.bit) &#123; return smaller; &#125;else if(this-&gt;bit&gt;o2.bit) &#123; return bigger; &#125;else &#123; for(int i=o2.bit-1;i&gt;=0;--i) &#123; if(this-&gt;n[i] &lt; o2.n[i]) &#123; return smaller; &#125;else if(this-&gt;n[i] &gt; o2.n[i]) &#123; return bigger; &#125; &#125; return equal; &#125; &#125; public: BigInt() &#123;&#125; BigInt(unsigned long long val) &#123; int cnt=0; do &#123; this-&gt;n[cnt] = val; val/=base; ++cnt; &#125;while(val); this-&gt;bit = cnt; &#125; bool operator&lt;(const BigInt&amp;o2) &#123; if(compare(*this,o2)==smaller) &#123; return true; &#125;else &#123; return false; &#125; &#125; bool operator&gt;=(const BigInt&amp;o2) &#123; return !(*this&lt;o2); &#125; bool operator&gt;(const BigInt&amp;o2) &#123; if(compare(*this,o2)==bigger) &#123; return true; &#125;else &#123; return false; &#125; &#125; bool operator&lt;=(const BigInt&amp;o2) &#123; return !(*this&gt;o2); &#125; bool operator==(const BigInt&amp;o2) &#123; if(this-&gt;bit!=o2.bit) &#123; return false; &#125;else &#123; for(int i=this-&gt;bit-1;i&gt;=0;++i) &#123; if(this-&gt;n[i]!=o2.n[i]) &#123; return false; &#125; &#125; return true; &#125; &#125; BigInt operator+(const BigInt&amp;o2) &#123; BigInt ret; int maxbit,minbit,isThis; if(this-&gt;bit &gt; o2.bit) &#123; maxbit = this-&gt;bit; minbit = o2.bit; isThis = 1; &#125;else &#123; maxbit = o2.bit; minbit = this-&gt;bit; isThis = 0; &#125; int up=0; for(int i=0;i&lt;minbit;++i) &#123; ret.n[i] = this-&gt;n[i] + o2.n[i] + up; up = ret.n[i] / base; ret.n[i] %= base; &#125; for(int i=minbit;i&lt;maxbit;++i) &#123; if(isThis) &#123; ret.n[i] = this-&gt;n[i] + up; up = ret.n[i] / base; ret.n[i] %= base; &#125;else &#123; ret.n[i] = o2.n[i] + up; up = ret.n[i] / base; ret.n[i] %= base; &#125; &#125; ret.bit = maxbit; if(up) &#123; ret.n[ret.bit] = up; // unsafe ++ret.bit; &#125; return ret; &#125; BigInt operator-(const BigInt&amp;o2) &#123; BigInt ret; int maxbit,minbit; if(this-&gt;bit &gt; o2.bit) &#123; maxbit = this-&gt;bit; minbit = o2.bit; &#125;else &#123; maxbit = o2.bit; minbit = this-&gt;bit; &#125; if(*this&gt;=o2) &#123; ret = big_minus_small(*this,o2,maxbit,minbit); &#125;else &#123; ret = big_minus_small(o2,*this,maxbit,minbit); ret.isPositive = false; &#125; return ret; &#125; BigInt operator/(const BigInt&amp;o2) &#123; BigInt ret,tmp=*this; ret.bit = 0; if(*this&lt;=o2) &#123; ret.n[0] = 0; ret.bit = 1; &#125;else &#123; int bias = tmp.bit - o2.bit; int cnt; for(int i=bias;i&gt;=0;--i) &#123; for(cnt=0;!tmp.biasSmaller(o2,i);++cnt) &#123; tmp = big_minus_small(tmp,o2,tmp.bit,o2.bit,i); &#125; ret.n[i] = cnt; if(!ret.bit&amp;&amp;cnt) ret.bit = i+1; &#125; &#125; return ret; &#125; void print() &#123; if(!isPositive) putchar(&#x27;-&#x27;); for(int i=this-&gt;bit-1;i&gt;=0;--i) &#123; putchar(&#x27;0&#x27;+this-&gt;n[i]); &#125; &#125; void scan() &#123; // only positive num char tmp[LENGTH]; scanf(&quot;%s&quot;,tmp); this-&gt;bit = strlen(tmp); for(int i=0;i&lt;this-&gt;bit;++i) &#123; this-&gt;n[i] = tmp[this-&gt;bit-i-1] - &#x27;0&#x27;; &#125; &#125;&#125;;int main() &#123; BigInt o1,o2; o1.scan(); o2.scan(); BigInt ans = o1/o2; ans.print(); return 0;&#125;","categories":[],"tags":[{"name":"big integer","slug":"big-integer","permalink":"http://laclic.github.io/tags/big-integer/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"Codeforces-Remove Extra One","slug":"Codeforces-Remove-Extra-One","date":"2021-03-21T10:29:58.000Z","updated":"2021-04-01T12:30:04.133Z","comments":true,"path":"2021/03/21/Codeforces-Remove-Extra-One/","link":"","permalink":"http://laclic.github.io/2021/03/21/Codeforces-Remove-Extra-One/","excerpt":"","text":"题意 给定 n 与 n 个数（这 n 个数在 1 到 n 之间且没有重复），计算删除某一个元素后，record 元素最多，现在要你找出这个元素（若有多个选择，则选择最小的那一个）。 定义 record 元素：当元素大于其之前的任意一个元素，则称该元素为 record 元素。 思路 对每一个元素量化（计算删除该数字对整个所需结果的贡献，并用值表示） 对于正在输入的一个数组，现在在第 i 个元素，若这个元素为当前数组的最大值，删除它会使得 record 元素减少 1 个，其贡献-1；若这个元素为当前数组的次大值，删除它不会使 record 元素减少，其贡献+0，而如果删除最大值，record 元素就会增加 1 个，最大值贡献+1；若这个元素为其他值，不管是否删除它或者最大值或者次大值都对 record 元素的个数没有影响，贡献值+0。 代码 12345678910111213141516171819202122232425262728293031323334#include &lt;cstdio&gt;#include &lt;cstring&gt;#define MAXX 100006int weight[MAXX];int main(int argc, char const *argv[])&#123; // freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin); int N; scanf(&quot;%d&quot;, &amp;N); memset(weight, 0, sizeof(weight)); int tmp; int max1=0,max2=0; for(int i=0;i&lt;N;++i) &#123; scanf(&quot;%d&quot;, &amp;tmp); if(tmp&gt;max1) &#123; --weight[tmp]; max2 = max1; max1 = tmp; &#125;else if(tmp&gt;max2) &#123; ++weight[max1]; max2 = tmp; &#125; &#125; int ans = 1; for(int i=1;i&lt;=N;++i) &#123; if(weight[i]&gt;weight[ans]) ans = i; &#125; printf(&quot;%d&quot;,ans); return 0;&#125;","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"problem C","slug":"problem-C","permalink":"http://laclic.github.io/tags/problem-C/"},{"name":"quantization","slug":"quantization","permalink":"http://laclic.github.io/tags/quantization/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"Codeforces-Position in Fraction","slug":"Codeforces-Position-in-Fraction","date":"2021-03-21T10:29:49.000Z","updated":"2021-04-06T14:56:01.997Z","comments":true,"path":"2021/03/21/Codeforces-Position-in-Fraction/","link":"","permalink":"http://laclic.github.io/2021/03/21/Codeforces-Position-in-Fraction/","excerpt":"","text":"题意 给定三个数 a、b、c（ , ），计算 所得的小数，c 在小数点后第几位出现，如果不会出现则输出-1。 思路 模拟除法 先进行约分（分子分母除以最大公约数），以减少运算次数， 再对每一位进行除法运算，整除得到的值即为当前为数字，余数*10 并入下一位进行运算。 （代码写出的运算逻辑更清晰） 注：1e5 最终只需要遍历到 99999 即可。这里用到了数学中的取模的性质（数论中常用的费马小定理，懒得解释了 x，若有需求可私信 github 或博客园）。 代码 123456789101112131415161718192021222324252627282930313233#include &lt;cstdio&gt;#define MAXX 1e5 // remainder must be less than 1e5int gcd(int x, int y) { int tmp; do{ tmp = x % y; x = y; y = tmp; }while(tmp); return x;}int main(int argc, char const *argv[]){ int a,b,c; scanf(\"%d %d %d\",&amp;a,&amp;b,&amp;c); int tmp = gcd(a,b); a/=tmp; b/=tmp; int ans=-1; for(int i=1;i&lt;MAXX;++i) { // 若找不到则退出循环，ans为初始值-1 a*=10; int tmp = a/b; a = a - tmp*b; if(tmp==c) { ans = i; break; } } printf(\"%d\",ans);}","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"math","slug":"math","permalink":"http://laclic.github.io/tags/math/"},{"name":"problem B","slug":"problem-B","permalink":"http://laclic.github.io/tags/problem-B/"},{"name":"divide simulate","slug":"divide-simulate","permalink":"http://laclic.github.io/tags/divide-simulate/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"Codeforces-Find Extra One","slug":"Codeforces-Find-Extra-One","date":"2021-03-21T10:29:41.000Z","updated":"2021-04-01T12:30:02.911Z","comments":true,"path":"2021/03/21/Codeforces-Find-Extra-One/","link":"","permalink":"http://laclic.github.io/2021/03/21/Codeforces-Find-Extra-One/","excerpt":"","text":"题意 给定 N 和这 N 个点的坐标，问是否能通过除去 1 个点，以使得剩下的点都在 y 轴的同一侧。 思路 计数 y 轴左右两侧点的个数，若有一侧点的个数为 1，删除该点即可；若有一侧没有任何点，随便删除一个点即可（N&gt;=2） 代码 1234567891011121314151617#include &lt;cstdio&gt;int main(int argc, char const *argv[])&#123; int N; scanf(&quot;%d&quot;, &amp;N); int l=0,r=0; int x,y; for(;N;--N) &#123; scanf(&quot;%d %d&quot;,&amp;x,&amp;y); if(x&gt;0) ++r; else ++l; &#125; if(l&lt;=1||r&lt;=1) printf(&quot;Yes&quot;); else printf(&quot;No&quot;); return 0;&#125;","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"problem A","slug":"problem-A","permalink":"http://laclic.github.io/tags/problem-A/"},{"name":"easy","slug":"easy","permalink":"http://laclic.github.io/tags/easy/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"Codeforces-Cave Painting","slug":"Codeforces-Cave-Painting","date":"2021-03-21T10:29:10.000Z","updated":"2021-04-01T12:30:02.911Z","comments":true,"path":"2021/03/21/Codeforces-Cave-Painting/","link":"","permalink":"http://laclic.github.io/2021/03/21/Codeforces-Cave-Painting/","excerpt":"","text":"题意 给定 n 和 k，对于 i 为从 1 到 k（包括 1 和 k），得到各个 n%i 的值，若任意一个值不止出现了一次，则输出 No，否则输出 yes 思路 对于任意 i，必须得有 n%i==i-1，才能满足题意，若 n%i==任意一个小于等于 i-2 的数，那么从 0 到 i-2（总共 i-1 个数）合起来会出现 i 次，则必会出现一个值出现 2 次或以上，不合题意。 代码 12345678910111213141516171819#include &lt;cstdio&gt;int main(int argc, char const *argv[])&#123; long long n,k; scanf(&quot;%lld %lld&quot;,&amp;n,&amp;k); int isYes = 1; for(int i=1;i&lt;=k;++i) &#123; if(n%i!=i-1) &#123; isYes = 0; break; &#125; &#125; if(isYes) printf(&quot;Yes&quot;); else printf(&quot;No&quot;); return 0;&#125;","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"problem C","slug":"problem-C","permalink":"http://laclic.github.io/tags/problem-C/"},{"name":"clever","slug":"clever","permalink":"http://laclic.github.io/tags/clever/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"Codeforces-Magic Forest","slug":"Codeforces-Magic-Forest","date":"2021-03-21T10:29:02.000Z","updated":"2021-04-01T12:30:09.119Z","comments":true,"path":"2021/03/21/Codeforces-Magic-Forest/","link":"","permalink":"http://laclic.github.io/2021/03/21/Codeforces-Magic-Forest/","excerpt":"","text":"题意 imp进了个xorangle森林（异或三角形森林，wtf？！），现在他只能计算出从三角形三边长小于等于N的个数（每种整数组合算一个，345和453算同一个），才能走出森林 思路 暴力遍历并计数，要满足2个条件：一个是三角形，只要判断较小两边之和小于第三边即可；另一个是满足题目给的异或方程 代码 12345678910111213141516171819202122232425#include &lt;cstdio&gt;int main(int argc, char const *argv[])&#123; int N; scanf(&quot;%d&quot;, &amp;N); int cnt = 0; for(int i=0;i&lt;=N;++i) &#123; for(int j=i;j&lt;=N;++j) &#123; // j从i开始 for(int k=j;k&lt;=N;++k) &#123; // k从i开始 // 上面j和k的初始值一起达到ijk从小到大的效果 if(i+j&gt;k) &#123; // 检查三角形 if((i^j^k)==0) &#123; // 检查亦或方程是否成立 ++cnt; &#125; &#125;else &#123; break; &#125; &#125; &#125; &#125; printf(&quot;%d&quot;,cnt); return 0;&#125;","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"bit operation","slug":"bit-operation","permalink":"http://laclic.github.io/tags/bit-operation/"},{"name":"problem B","slug":"problem-B","permalink":"http://laclic.github.io/tags/problem-B/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"Codeforces-Cloning Toys","slug":"Codeforces-Cloning-Toys","date":"2021-03-21T10:28:00.000Z","updated":"2021-04-01T12:30:02.911Z","comments":true,"path":"2021/03/21/Codeforces-Cloning-Toys/","link":"","permalink":"http://laclic.github.io/2021/03/21/Codeforces-Cloning-Toys/","excerpt":"","text":"题意 imp 有一台玩具复制机和 1 个真玩具。当玩具复制机放入一个真玩具时，能额外复制出 1 个假玩具+1 个真玩具；当放入一个假玩具时，能额外复制出 2 个假玩具。现在 imp 想要 x 个假玩具，y 个真玩具（包括原来那个），请问是否能做到？ 思路 没有假玩具的时候（y==1 的时候），只能为 0 才会 Yes，否则都是 No 不需要真玩具的时候（y==0 的时候），都是 No 由于每次复制真玩具都会产生假玩具，所以假玩具少于复制所得真玩具（假玩具少于真玩具总数-1），即为 No 正常情况，先复制真玩具，同时得到假玩具，计算还需要多少假玩具。由于复制假玩具一次会得到 2 个，剩下的假玩具数量必须要为 2 的倍数才会 Yes，否则为 No 代码 123456789101112131415161718192021222324252627#include &lt;cstdio&gt;int main(int argc, char const *argv[])&#123; int x,y; scanf(&quot;%d %d&quot;,&amp;x,&amp;y); // 情况1 if(y==1) &#123; // no additional copy condition if(x==0) printf(&quot;Yes&quot;); // don&#x27;t need copy condition else printf(&quot;No&quot;); // need copy condition return 0; // exit program &#125; --y; // 情况2、3 if(y==-1||x&lt;y) &#123; // need no original copy condition ||or|| additonal copy requrement is more than original ones printf(&quot;No&quot;); return 0; &#125; x -= y; if(x%2==0) printf(&quot;Yes&quot;); // can apply addtional copy the machine (get two at one time) else printf(&quot;No&quot;); return 0;&#125;","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"conditions","slug":"conditions","permalink":"http://laclic.github.io/tags/conditions/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"PTA-旋转骰子","slug":"PTA-旋转骰子","date":"2021-03-14T14:20:43.000Z","updated":"2021-04-01T12:30:04.133Z","comments":true,"path":"2021/03/14/PTA-旋转骰子/","link":"","permalink":"http://laclic.github.io/2021/03/14/PTA-%E6%97%8B%E8%BD%AC%E9%AA%B0%E5%AD%90/","excerpt":"","text":"目录 题文 题意 思路 代码 题文 玛莎有 n 个骰子，每个骰子的 6 个面上都恰好有一个 0 到 9 之间的数字。 现在玛莎将利用这 n 个筛子来制作新数字。她把 n 个骰子摆成一排，然后从左到右查看骰子的上表面并读取，即可得到一个新数字。随后她不断的旋转每个骰子的面就可以得到不同的新数字。旋转骰子需要满足以下规则： 1、制作的数字不能包含前导零； 2、制作新数字时不需要使用所有的骰子； 3、使用骰子旋转，无法将数字 9 转换为数字 6，反之亦然。 给定 n 个骰子，玛莎可以用它们构成从 1 到 x 的所有整数。玛莎想知道，对于给定的 n 个骰子，这个 x 的最大取值是多少呢？ 输入格式: 第一行仅一个整数 n，表示骰子的数量（1≤n≤3）。 接下来 n 行，每行包含 6 个整数 a[i][j]（0≤a[i][j]≤9），表示第 i 个骰子的第 j 个面上的数字。 输出格式: 输出一个整数，即最大数 x，玛莎可以使用她的骰子构成数字从 1 到 x。如果无法构成 1，则输出 0。 输入样例: 123430 1 3 5 6 81 2 4 5 7 82 3 4 6 7 9 输出样例: 198 题意 给定 n 组数（骰子），每组数有 6 个数，现在要求你每组中取出一个数来，组成一个新的数。玛莎可以用它们构成从 1 到 x 的所有整数。现在她想知道，对于给定的 n 个骰子，这个 x 的最大取值是多少呢？ 思路 由于 n&lt;=3，最多只有 3 位数 999，可以暴力每个尝试搜索组合过去，若无法组合则停止并输出答案。 这里使用二进制状态表示法来记录当前骰子是否被使用 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include &lt;cstdio&gt;// 1000*6*6*6int num[3][6]; // n组数（n个骰子上的数）int digits[3],digit; // 各位上的数字，总共有几位int n,status; // n，n个骰子的状态码bool dfs(int layer) &#123; // 递归层数==当前所处i数的位数 if(layer&gt;digit) &#123; // 问题边界，递归层数高于总位数 return true; &#125; for(int j=0;j&lt;n;++j) &#123; int now = 0b001&lt;&lt;j; // 当前在考虑哪组数 if(status&amp;now) &#123; // 如果这个骰子没有被使用 for(int i=0;i&lt;6;++i) &#123; // 寻找符合条件的数 if(num[j][i]==digits[layer]) &#123; status^=now; if(dfs(layer+1)) &#123; status^=now; return true; // 通过 &#125; status^=now; &#125; &#125; &#125; &#125; return false; // 搜索不到，退出递归并返回false&#125;bool cal(int x) &#123; // 预处理 for(int i=0;1;++i) &#123; digits[i] = x%10; // 记录各位上的数 x/=10; if(!x) &#123; digit = i; break; &#125; &#125; return dfs(0); // 进入递归&#125;int main(int argc, char const *argv[])&#123; freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin); scanf(&quot;%d&quot;, &amp;n); switch (n) &#123; // 可以通过循环实现，这里由于n较小，就直接一一罗列 case 1: status = 0b001; case 2: status = 0b011; case 3: status = 0b111; &#125; for(int i=0;i&lt;n;++i) &#123; for(int j=0;j&lt;6;++j) &#123; scanf(&quot;%d&quot;, &amp;num[i][j]); &#125; &#125; int max = 1; for(int i=0;i&lt;n;++i) &#123; max*=10; // 找最多能组成几位数 &#125; int i; for(i=1;i&lt;max;++i) &#123; if(!cal(i)) break; &#125; printf(&quot;%d\\n&quot;,i-1); return 0;&#125;","categories":[],"tags":[{"name":"PTA","slug":"PTA","permalink":"http://laclic.github.io/tags/PTA/"},{"name":"dfs","slug":"dfs","permalink":"http://laclic.github.io/tags/dfs/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"CH0103-0x00「基本算法」例题-最短Hamilton路径","slug":"CH0103-0x00「基本算法」例题-最短Hamilton路径","date":"2021-03-09T07:14:19.000Z","updated":"2021-04-01T12:30:02.912Z","comments":true,"path":"2021/03/09/CH0103-0x00「基本算法」例题-最短Hamilton路径/","link":"","permalink":"http://laclic.github.io/2021/03/09/CH0103-0x00%E3%80%8C%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95%E3%80%8D%E4%BE%8B%E9%A2%98-%E6%9C%80%E7%9F%ADHamilton%E8%B7%AF%E5%BE%84/","excerpt":"","text":"题意 有 N 个地方，分别标记为 0 到 N-1，现在给定每两个地点之间的距离，要你求出最短的经过所有地方的路程。 其中，$N&lt;=20$ 思路 动态规划，记录两个状态 现在所在地 已经过的地方（使用二进制表示，经过的为 1，未经过的为 0） 当上述两个条件完全一致时，就可以直接调用之前 dfs 算出来的值 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include &lt;cstdio&gt;#include &lt;cstring&gt;using namespace std;int table2[20]; // 位数表，方便直接存取对应位数据int dp[20][1024*1024+6]; // 使用二进制记录已经过的地点int hamiton[20][20]; // 读取输入int N,dst,to_end=1; // dst：目的地，to_endint status=0; // 路径记录状态码int dfs(int now) &#123; unsigned int ret = -1; // 记录最小值，一开始利用数据类型的特点设定为最大值 if(dp[now][status]) return dp[now][status]; // 若已计算过，则直接返回算过的值 if(status==to_end) return hamiton[now][dst]; // 问题边界 for(int i=1;i&lt;dst;++i) &#123; // 函数主体 if(table2[i]&amp;status) continue; // 已经经过的路径就不走了 status |= table2[i]; // 通过位运算标记已经过的地点 int tmp = hamiton[now][i]+dfs(i); // 获取dfs值 status ^= table2[i]; // 还原原的状态，为下一次查找做准备 if(ret&gt;tmp) ret = tmp; // 检测是否为最短路径 &#125; dp[now][status] = ret; // 记录最短路径 return ret;&#125;int main(int argc, char const *argv[])&#123; // freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin); // 读取输入 // 预处理2次方表 table2[0] = 1; for(int i=1;i&lt;20;++i) &#123; table2[i] = table2[i-1]&lt;&lt;1; &#125; // 清零dp数组 memset(dp, 0, sizeof(dp)); scanf(&quot;%d&quot;,&amp;N); dst = N-1; // 终点，最后才需要到达 if(N==1) &#123; // N==1的情况 printf(&quot;0&quot;); &#125;else &#123; for(int i=1;i&lt;dst;++i) &#123; // 记录问题边界（经过了除最后一个地方外的所有地方） to_end = (to_end&lt;&lt;1) + 1; &#125; for(int i=0;i&lt;N;++i) &#123; // 读取输入 for(int j=0;j&lt;N;++j) &#123; scanf(&quot;%d&quot;,&amp;hamiton[i][j]); &#125; &#125; status += table2[0]; // 从第一个地方（0）出发 printf(&quot;%d&quot;,dfs(0)); // 递归输出 &#125; return 0;&#125;","categories":[],"tags":[{"name":"dynamic programming","slug":"dynamic-programming","permalink":"http://laclic.github.io/tags/dynamic-programming/"},{"name":"contest hunter","slug":"contest-hunter","permalink":"http://laclic.github.io/tags/contest-hunter/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"FZU2021-0xd7-吉哥系列故事——恨7不成妻","slug":"FZU2021-0xd7-吉哥系列故事——恨7不成妻","date":"2021-03-08T10:36:56.000Z","updated":"2021-04-06T14:59:03.263Z","comments":true,"path":"2021/03/08/FZU2021-0xd7-吉哥系列故事——恨7不成妻/","link":"","permalink":"http://laclic.github.io/2021/03/08/FZU2021-0xd7-%E5%90%89%E5%93%A5%E7%B3%BB%E5%88%97%E6%95%85%E4%BA%8B%E2%80%94%E2%80%94%E6%81%A87%E4%B8%8D%E6%88%90%E5%A6%BB/","excerpt":"","text":"非常好的一道题目，需要及其清晰的思路，以及对取模的理解，受益匪浅！ 题意 有个人很讨厌7相关的数，现在他给定你L和R，要你求取[L,R]中（闭区间，取L和R两端）所有于7无关的数的平方和。 定义：只要满足以下任意一个条件即为与7有关的数 任意一位为7（数字中带有7） 所有位上数字之和为7 可被7整除 数据范围： 由于最后数非常大，要求答案对10^9+7取模 思路 数位DP，备忘录算法，将已经算好的位存储到数组中，方便直接读取 状态转移方程： DP状态为：当前所处位数、当前各位数之和对7取模的余数、当前数对7取模的余数 取模的性质： 123a+b取模 == （a取模 + b取模）取模a*b取模 == （a取模*b取模）*取模a^N取模 == （a取模^N）取模 代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283#include &lt;cstdio&gt;#include &lt;cstring&gt;#define MOD 1000000007typedef long long ll;typedef struct _dp{ ll cnt; ll sum; ll sq_sum;}DP;DP dp[18][7][7]; // dp[bits][num on bits sum%7][this num%7]ll table10[19];char digits[18];DP dfs(bool isMax,int layer,int prev_digits_sum,int prev_mod7) { // layer==0为个位，1为十位，以此类推... // edge if(layer==-1) { // 当前处于-1层，为问题边界，只返回当前数是否与7相关 if(prev_digits_sum==0||prev_mod7==0) { return {0,0,0}; }else { return {1,0,0}; } } // note if(!isMax&amp;&amp;dp[layer][prev_digits_sum][prev_mod7].cnt) { return dp[layer][prev_digits_sum][prev_mod7]; } // get max int maxx = isMax?digits[layer]:9; // check every digit DP ret = {0,0,0}; for(int i=0;i&lt;=maxx;++i) { if(i==7) continue; ll now = i*table10[layer]%MOD; DP tmp = dfs(isMax&amp;&amp;i==maxx,layer-1,(prev_digits_sum+i)%7,(prev_mod7+table10[layer]%7*i)%7); ret.cnt = (ret.cnt + tmp.cnt)%MOD; ret.sum = (ret.sum + now*tmp.cnt%MOD + tmp.sum)%MOD; ret.sq_sum = (ret.sq_sum + tmp.cnt*((now*now)%MOD)%MOD + 2*((now*tmp.sum)%MOD)%MOD + tmp.sq_sum)%MOD; } // take note in dp if(!isMax) { dp[layer][prev_digits_sum][prev_mod7] = ret; } return ret;}ll cal(ll x) { int len=0; for(;x;x/=10) { digits[len] = x%10; ++len; } return dfs(true,len-1,0,0).sq_sum;}int main(int argc, char const *argv[]){ // freopen(\"in.txt\",\"r\",stdin); // 读取输入 // initialize memset(dp,0,sizeof(dp)); table10[0] = 1; for(int i=1;i&lt;=18;++i) { table10[i] = table10[i-1]*10; } int N; scanf(\"%d\",&amp;N); ll L,R; for(;N;--N) { scanf(\"%lld %lld\",&amp;L,&amp;R); printf(\"%lld\\n\",(cal(R)-cal(L-1)+MOD)%MOD); } return 0;}","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"c++","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"dynamic programming","slug":"dynamic-programming","permalink":"http://laclic.github.io/tags/dynamic-programming/"}]},{"title":"Android开发-gradle sync出错解决: Failed to open zip file.","slug":"Android开发-gradle-sync出错解决-Failed-to-open-zip-file","date":"2021-02-22T14:41:10.000Z","updated":"2021-03-13T05:23:55.274Z","comments":true,"path":"2021/02/22/Android开发-gradle-sync出错解决-Failed-to-open-zip-file/","link":"","permalink":"http://laclic.github.io/2021/02/22/Android%E5%BC%80%E5%8F%91-gradle-sync%E5%87%BA%E9%94%99%E8%A7%A3%E5%86%B3-Failed-to-open-zip-file/","excerpt":"","text":"Created by: © LacLic 错误发生 进行gradle sync的时候，下载完文件发现出现报错Failed to open zip file. 报错：无法打开zip文件，gradle的缓存文件损坏（可能是网络连接超时的缘故） 解决方案 删除原来的缓存文件，重新下载gradle包丢入缓存文件夹即可，详见错误原因 错误原因 错误报告中显示，无法打开zip文件，使用ctrl+shift+R进行全局搜索，寻找关于.zip文件的信息 找到下载所需的gradle包的网址，丢入浏览器下载zip文件（记得删除里面的反斜杠，那是用来逃逸冒号的） 将下载好的文件丢入 1C:\\Users\\[用户]\\.gradle\\wrapper\\dists\\gradle-[版本号]-all\\[奇怪的序列]\\ 的目录下后，重新进行gradle sync或者直接试运行程序 成功！","categories":[],"tags":[{"name":"android","slug":"android","permalink":"http://laclic.github.io/tags/android/"}]},{"title":"Android开发-百分比布局percentLayout的gradle依赖添加与报错","slug":"Android开发-百分比布局的gradle依赖添加与报错","date":"2021-02-22T12:40:34.000Z","updated":"2021-03-13T05:24:19.431Z","comments":true,"path":"2021/02/22/Android开发-百分比布局的gradle依赖添加与报错/","link":"","permalink":"http://laclic.github.io/2021/02/22/Android%E5%BC%80%E5%8F%91-%E7%99%BE%E5%88%86%E6%AF%94%E5%B8%83%E5%B1%80%E7%9A%84gradle%E4%BE%9D%E8%B5%96%E6%B7%BB%E5%8A%A0%E4%B8%8E%E6%8A%A5%E9%94%99/","excerpt":"","text":"Created by: © LacLic 错误发生 在工程文件夹的app/build.gradle的依赖中添加compile 'com.android.support:percent:24.2.1'的时候，出现的报错（代码来自《第一行代码（第二版）》） 1Version 28 (intended for Android Pie and below) is the last version of the legacy support library, so we recommend that you migrate to AndroidX libraries when using Android Q and moving forward. The IDE can help with this: Refactor &gt; Migrate to AndroidX... 解决方案 谷歌开发者文档注： 此工件及其类已弃用。请改用 ConstraintLayout 和关联布局。 将 123dependencies &#123; compile &#39;com.android.support:percent:24.2.1&#39;&#125; 改为 123dependencies &#123; implementation &quot;androidx.percentlayout:percentlayout:1.0.0&quot;&#125; 即可，之后记得点击视窗上端的sync now 错误原因 考虑到书本教程过时了，没有办法及时同步开发工具的更新。 一开始的确是compile开头的方式引入依赖 后来改为了下图中红色的样式 再后来才改为implementation &quot;androidx.percentlayout:percentlayout:1.0.0&quot;的形式 我们到谷歌的 开发者文档 中查询到 这个工件已被谷歌官方弃用，但仍旧是可以使用的。猜测：应该是为了方便熟悉这个工件不愿使用其他布局的程序员（要与时俱进啊！），或者是为了方便旧项目的维护而保留的（毕竟一改就要改一堆）。","categories":[],"tags":[{"name":"android","slug":"android","permalink":"http://laclic.github.io/tags/android/"}]},{"title":"Android开发-手绘图文详解活动的生命周期","slug":"Android开发-手绘图文详解活动的生命周期","date":"2021-02-21T11:09:19.000Z","updated":"2021-03-13T05:24:37.618Z","comments":true,"path":"2021/02/21/Android开发-手绘图文详解活动的生命周期/","link":"","permalink":"http://laclic.github.io/2021/02/21/Android%E5%BC%80%E5%8F%91-%E6%89%8B%E7%BB%98%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%E6%B4%BB%E5%8A%A8%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/","excerpt":"","text":"Created by: © LacLic 绘图软件为 GoodNotes 5 详解 打开app，第一个活动Acitivity入栈，调用3个act1方法 点击按钮button，第二个活动入栈，调用2个act1方法，3个act2方法 点击menu，调用act2的创建菜单方法 点击菜单选项option，调用选项选择方法 点击button，对话dialog活动入栈，调用act2的1个方法，调用对话活动actDlg的3个方法 点击返回，finish()了actDlg，调用actDlg的的3个方法，调用act2的1个方法 点击返回，finish()了act2，调用act2的3个方法，调用act1的2个方法 再次点击返回，finish()了act1，调用了act1的3个方法，并退出app 总结 当新活动不完全置顶（上一个活动还有效）时，只会调用上一个活动的onPause。 恢复后，只会调用onResume。 当新活动完全置顶（上一个活动完全被遮盖），会调用onPasue和onStop。 恢复后，会调用onResume和onStart。 当一个活动finish()后，会调用onPasue, onStop与onDestroy。 启动时，会调用onResume, onStart和onCreate。 启动与终止的对应关系 onCreate onStart onResume onPasue onStop onDestroy — — — — — — — — — — — — 图来自《第一行代码（第二版）》","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://laclic.github.io/tags/Android/"}]},{"title":"Codeforces-Approximating a Constant Range","slug":"Codeforces-Approximating-a-Constant-Range","date":"2021-02-19T12:11:02.000Z","updated":"2021-04-01T12:30:02.911Z","comments":true,"path":"2021/02/19/Codeforces-Approximating-a-Constant-Range/","link":"","permalink":"http://laclic.github.io/2021/02/19/Codeforces-Approximating-a-Constant-Range/","excerpt":"","text":"题意 给定一个长度位 n 的数组 a，相邻的数的差小于等于 1（|a~i+1~ - a~i~| ≤ 1），现在求它的一个最大区间的长度，这个区间要求：最大值和最小值之差不大于 1。 2 ≤ n ≤ 100 000 1 ≤ a_i ≤ 100 000 思路 从头遍历： 给当前符合条件的数组计算长度。 保存相同数的长度，以准备下一个不符合原先条件的数。 设定一个 max 保存最大值 代码 1234567891011121314151617181920212223242526272829303132333435363738#include &lt;cstdio&gt;int a[100006];int main(int argc, char const *argv[])&#123; // freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin); int n; scanf(&quot;%d&quot;,&amp;n); for(int i=0;i&lt;n;++i) &#123; scanf(&quot;%d&quot;,&amp;a[i]); &#125; int prev = a[0], max=1, bias=0, same=1, has_made=1; for(int i=1;i&lt;n;++i) &#123; int dif = a[i] - prev; if(dif==0) &#123; ++same; ++has_made; &#125;else &#123; if(bias==dif || !bias) &#123; ++has_made; &#125;else &#123; // 2 3 2 2 2 2 2 2 2 1 2 has_made = same+1; &#125; same = 1; prev = a[i]; bias = -dif; &#125; if(has_made&gt;max) &#123; max = has_made; // printf(&quot;%d %d\\n&quot;,i ,max); &#125; &#125; printf(&quot;%d&quot;,max); return 0;&#125;","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"Codeforces-Two_Bases","slug":"Codeforces-Two-Bases","date":"2021-02-19T10:41:17.000Z","updated":"2021-04-01T12:30:04.133Z","comments":true,"path":"2021/02/19/Codeforces-Two-Bases/","link":"","permalink":"http://laclic.github.io/2021/02/19/Codeforces-Two-Bases/","excerpt":"","text":"题意 对于一个 n 位，bx 进制的数 X，一个 m 位，by 进制的数 Y，比较它们的大小 1 ≤ n ≤ 10, 2 ≤ bx ≤ 40 思路 进制转换后比较大小 代码 12345678910111213141516171819202122232425262728293031#include &lt;cstdio&gt;// 40**9 == 262,144,000,000,000// 2,147,483,648 (int32)// 9,223,372,036,854,775,807 (long long)inline long long cal(const int n,const int X) &#123; int digits[10]; long long ret=0, power=1; for(int i=n-1;i&gt;=0;--i) &#123; scanf(&quot;%d&quot;,&amp;digits[i]); &#125; for(int i=0;i&lt;n;++i) &#123; ret += power*digits[i]; power *= X; &#125; return ret;&#125;int main(int argc, char const *argv[])&#123; // freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin); int n,m,X,Y; scanf(&quot;%d %d&quot;,&amp;n,&amp;X); long long res_X = cal(n,X); scanf(&quot;%d %d&quot;,&amp;m,&amp;Y); long long res_Y = cal(m,Y); if(res_X==res_Y) putchar(&#x27;=&#x27;); else putchar(res_X&gt;res_Y?&#x27;&gt;&#x27;:&#x27;&lt;&#x27;); return 0;&#125;","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"FZU2021-0xd6-F(x)","slug":"FZU2021-0xd6-F-x","date":"2021-02-17T15:19:20.000Z","updated":"2021-04-01T12:30:04.133Z","comments":true,"path":"2021/02/17/FZU2021-0xd6-F-x/","link":"","permalink":"http://laclic.github.io/2021/02/17/FZU2021-0xd6-F-x/","excerpt":"","text":"题意 对于 x 的每一位，A~n~ F(x) = A~n~ _ 2^n-1^ + A~n-1~ _ 2^n-2^ + … + A~2~ _ 2 + A~1~ _ 1 即：F(x) 表示，将 x 看作未进位的二进制数，转换为十进制后的结果 现在给定你两个数 A 和 B，要求求出从 0 到 B（取两端，闭区间）的数中，有多少个数（取任意一个数为 X），使得 F(X)&lt;F(A) 思路 首先，暴力枚举是不可能的，10^9^，500ms 肯定不够，必定超时。 其次，我们观察到，X 全部取 9 肯定是 F(X)最大的情况，且如果一个大的数成立，将其中任意位上的数变小，变小的数一定成立。 所以，我们按位只要找出大的且成立的数，统计出比它小且一定成立的数，就能解决问题。 代码 dp 备忘录(memorandum)算法，4600 取自：F(999 999 999) == 4599，10 取自最多一共有 10 位数 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283#include &lt;cstdio&gt;#include &lt;cstring&gt;#define MAX 1000000000#define ISMAX 1#define NOTMAX 0int dp[10][4600],fA; // fA == f(A)char digits[10]; // note every digit of Bint go(int length, int isMax, int has_gained) &#123; // has_gained += f(now we choose) // check this dp int ret = 0; /// ensure has_gained &lt;= fA if(has_gained &gt; fA) return 0; /// we&#x27;ve traversed all the digits, this is the edge of the recursion if(length==0) return 1; /// search the memorandum if(!isMax &amp;&amp; dp[length-1][fA-has_gained]) return dp[length-1][fA-has_gained]; /// check whether we&#x27;ve got to the max num of the digit int maxx = isMax ? digits[length-1] : 9; // go to next dp for(int i=0;1;++i) &#123; /// go out of the roop if(i==maxx) &#123; ret += go(length-1, ISMAX &amp;&amp; isMax, has_gained + (i*(1&lt;&lt;length-1))); break; &#125;else &#123; int temp = go(length-1, NOTMAX, has_gained + (i*(1&lt;&lt;length-1))); // cut the branch if the return value of go() is 0, which means has_gained must bigger than fA next time if(!temp) break; ret += temp; &#125; &#125; // note this dp in memorandum if(!isMax) dp[length-1][fA-has_gained] = ret; // return return ret;&#125;// f(x)int f(int x) &#123; int ret = 0,power = 1; for(;x;x/=10) &#123; ret += x%10 * power; power *= 2; &#125; return ret;&#125;// get how many digits does x hasint len_of(int x) &#123; int length = 0; do &#123; digits[length] = x%10; x/=10; ++length; &#125;while (x); return length;&#125;int main(int argc, char const *argv[])&#123; // printf(&quot;%d&quot;,len_of(999999999)); // freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin); memset(dp,0,sizeof(dp)); dp[0][0] = 1; int T,A,B; scanf(&quot;%d&quot;,&amp;T); for(int i=1;i&lt;=T;++i) &#123; scanf(&quot;%d %d&quot;,&amp;A,&amp;B); fA = f(A); int len = len_of(B); // printf(&quot;%d\\n&quot;,go(len,ISMAX,0)); printf(&quot;Case #%d: %d\\n&quot;,i,go(len,ISMAX,0)); &#125; return 0;&#125;","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"dynamic programming","slug":"dynamic-programming","permalink":"http://laclic.github.io/tags/dynamic-programming/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"FZU2021-0xd5-不要62","slug":"FZU2021-0xd5-不要62","date":"2021-02-14T03:46:53.000Z","updated":"2021-04-01T12:30:04.133Z","comments":true,"path":"2021/02/14/FZU2021-0xd5-不要62/","link":"","permalink":"http://laclic.github.io/2021/02/14/FZU2021-0xd5-%E4%B8%8D%E8%A6%8162/","excerpt":"","text":"题意 题目已经是中文了，就缩略说一下。 对于从 n 到 m 的数（闭区间，两端 n 和 m 要算），一共有多少个不含 62 且不含 4 的数？ 思路 算出从 1 到 n，从 1 到 m 的符合题意的数的个数，相减即得 代码 记得要删掉 freopen 啊！头一回吃了一个 OLE(output limit exceed) 12345678910111213141516171819202122232425262728293031323334353637#include &lt;cstdio&gt;int has4(int now) &#123; for(;now;now/=10) &#123; if(now%10==4) return 1; &#125; return 0;&#125;int has62(int now) &#123; for(;now&gt;=62;now/=10) &#123; if(now%100==62) return 1; &#125; return 0;&#125;int a[1000001];int main(int argc, char const *argv[])&#123; int n,m; a[0] = 0; for(int i=1;i&lt;=1000000;++i) &#123; if(!has62(i)&amp;&amp;!has4(i)) a[i] = a[i-1] + 1; else a[i] = a[i-1]; &#125; // freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin); while(1) &#123; scanf(&quot;%d %d&quot;,&amp;n,&amp;m); if(n==0) break; printf(&quot;%d\\n&quot;,a[m]-a[n-1]); &#125; return 0;&#125;","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"dynamic programming","slug":"dynamic-programming","permalink":"http://laclic.github.io/tags/dynamic-programming/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"WriteUP-MISC(SP)-Seraph_JACK's red packet","slug":"WriteUP-MISC-Seraph-JACK-s-red-packet","date":"2021-02-12T15:05:15.000Z","updated":"2021-03-22T07:16:53.261Z","comments":true,"path":"2021/02/12/WriteUP-MISC-Seraph-JACK-s-red-packet/","link":"","permalink":"http://laclic.github.io/2021/02/12/WriteUP-MISC-Seraph-JACK-s-red-packet/","excerpt":"","text":"Seraph_JACK的新年红包（MISC，SP） 我个人属于菜狗，研究该题（？）路程过于坎坷，坚持了15个小时（中间睡了个觉），主要是为了红包。 解红包过程 开门见山 中间大大一个hint死活看不见，虽然最后解出来才知道怎么用。 开门网页源代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;2021 新年快乐！&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;packet&quot;&gt; &lt;span id=&quot;title&quot;&gt;2021 新年快乐&lt;/span&gt; &lt;span id=&quot;desc&quot;&gt;输入口令领取红包&lt;a href=&quot;/help.html&quot;&gt;(?)&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;pwd&quot;&gt;输入口令：&lt;input type=&quot;text&quot; id=&quot;pwdIn&quot;&gt;&lt;/span&gt; &lt;div id=&quot;btn-box&quot;&gt; &lt;span id=&quot;btn&quot; onclick=&quot;submit()&quot;&gt;提交&lt;/span&gt; &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;script&gt; function submit() &#123; // hint: check GET /main.go var code = document.querySelector(&quot;#pwdIn&quot;).value; var data = new URLSearchParams(); data.append(&quot;code&quot;, code); fetch(&quot;/red_packet&quot;, &#123; method: &quot;post&quot;, body: data &#125;).then((res) =&gt; &#123; if (res.status === 200) &#123; res.text().then(b =&gt; &#123; window.location.href = b; &#125;) &#125; else &#123; alert(&quot;口令错误！&quot;) &#125; &#125;) &#125;&lt;/script&gt;&lt;style&gt; #btn &#123; cursor: pointer; border-radius: 8px; font-size: xx-large; background-color: #ffe24b; padding: 8px; &#125; body &#123; display: flex; justify-content: center; &#125; #desc &#123; display: block; font-size: large; color: white; text-align: center; margin-top: 20px; &#125; #desc a &#123; color: #ea0909; font-size: xx-small; &#125; #pwdIn &#123; width: 180px; font-size: large; &#125; #pwd &#123; display: inline-block; margin-top: 150px; margin-bottom: 80px; text-align: center; font-size: large; color: white; padding: 16px; border-radius: 8px; &#125; #btn-box &#123; display: flex; justify-content: center; margin-bottom: 20px; &#125; #title &#123; color: white; font-weight: bolder; font-size: xxx-large; display: inline-block; margin: auto; padding-top: 50px; &#125; #packet &#123; background-color: red; border-radius: 8px; padding: 2px 8px; &#125;&lt;/style&gt;&lt;/html&gt; 首先知道了，我们POST的口令，就是code的值 123456var code = document.querySelector(&quot;#pwdIn&quot;).value; var data = new URLSearchParams(); data.append(&quot;code&quot;, code); fetch(&quot;/red_packet&quot;, &#123; method: &quot;post&quot;, body: data 然后看到了/main.go，老瞎子经别人提醒之后才发现上面还有个/help.html /main.go 发现main函数源码，怎么是go写的，我爬了 1234567891011121314151617181920212223242526272829303132333435363738394041424344package mainimport ( &quot;crypto/sha256&quot; &quot;flag&quot; &quot;fmt&quot; &quot;github.com/gin-gonic/gin&quot; &quot;net/http&quot;)func main() &#123; fmt.Println(&quot;2021 Happy new year!&quot;) listen := flag.String(&quot;listen&quot;, &quot;:11451&quot;, &quot;&quot;) superSecretSalt := flag.String(&quot;salt&quot;, &quot;this_is_not_the_salt&quot;, &quot;&quot;) redPacket := flag.String(&quot;packet&quot;, &quot;no_packet_here&quot;, &quot;&quot;) flag.Parse() r := gin.Default() r.POST(&quot;/red_packet&quot;, func(ctx *gin.Context) &#123; key := ctx.PostForm(&quot;code&quot;) val := []byte(key + *superSecretSalt) hash := sha256.Sum256(val[:]) result := 0 for i := 0; i &lt; 32; i++ &#123; result += int(hash[i]) &#125; if result == 2021 &#123; ctx.Header(&quot;Content-Type&quot;, &quot;text/plain; charset=utf-8&quot;) ctx.String(200, *redPacket) &#125; else &#123; ctx.Status(http.StatusForbidden) &#125; &#125;) r.NoRoute(gin.WrapH(http.FileServer(http.Dir(&quot;./static&quot;)))) if err := r.Run(*listen); err != nil &#123; panic(err) &#125;&#125; 看了一下，主要就是，主函数通过post方法获取code的值（是一个字符串），加上*redPacket字符串后，经过sha256加密，所得的每一位ascii码之和为2021时，KEY则为答案 1234567891011121314151617181920212223superSecretSalt := flag.String(&quot;salt&quot;, &quot;this_is_not_the_salt&quot;, &quot;&quot;)redPacket := flag.String(&quot;packet&quot;, &quot;no_packet_here&quot;, &quot;&quot;)flag.Parse()r := gin.Default()r.POST(&quot;/red_packet&quot;, func(ctx *gin.Context) &#123; key := ctx.PostForm(&quot;code&quot;) val := []byte(key + *superSecretSalt) hash := sha256.Sum256(val[:]) result := 0 for i := 0; i &lt; 32; i++ &#123; result += int(hash[i]) &#125; if result == 2021 &#123; ctx.Header(&quot;Content-Type&quot;, &quot;text/plain; charset=utf-8&quot;) ctx.String(200, *redPacket) &#125; else &#123; ctx.Status(http.StatusForbidden) &#125;&#125;) 中，的val := []byte(key + *superSecretSalt) val就是key字符串和superSecretSalt指向的字符串相加 hash就是val经过sha256加密后的字符串hash := sha256.Sum256(val[:]) 如果结果为2021则通过口令if result == 2021 /help.html 经过好心人指示，眼瞎的我终于发现了help.html 打开来是这个 源代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;再 放 送&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;span&gt;The character is: &#x27;&lt;span id=&quot;ch&quot;&gt;&lt;/span&gt;&#x27;&lt;/span&gt;&lt;button onclick=&quot;left()&quot;&gt;Go left&lt;/button&gt;&lt;button onclick=&quot;right()&quot;&gt;Go right&lt;/button&gt;&lt;button onclick=&quot;back()&quot;&gt;Go back&lt;/button&gt;&lt;/body&gt;&lt;script&gt; var data = &quot;320K2/5oM1L(...省略剩下字符，一共16384个字符)&quot; var cur = 1; update(); function update() &#123; try &#123; let p = parseInt(window.location.hash.substr(1)); if (!isNaN(p)) cur = p; &#125; catch (e) &#123; // ignore &#125; document.querySelector(&quot;#ch&quot;).innerHTML = data[cur]; &#125; function left() &#123; if (cur &gt; 8192) &#123; alert(&quot;Can&#x27;t go further!&quot;); return; &#125; window.location.hash = (cur * 2).toString(); update(); &#125; function right() &#123; if (cur &gt; 8192) &#123; alert(&quot;Can&#x27;t go further!&quot;); return; &#125; window.location.hash = (cur * 2 + 1).toString(); update(); &#125; function back() &#123; if (cur === 1) &#123; alert(&quot;Can&#x27;t go back!&quot;); return; &#125; window.location.hash = Math.floor(cur / 2).toString(); update(); &#125;&lt;/script&gt;&lt;/html&gt; 仔细看了看，是每次走左(cur✖2)，是每次走右（cur✖2＋1），或是返回（cur➗2） 回显一个值：data的cur索引（data[cur]）对应字符 所以data是个索引表，考虑爆破它 爆破代码： 1234567891011121314151617181920212223242526272829303132#include &lt;cstdio&gt;#include &lt;fstream&gt;using namespace std;char s[] = &quot;320K2/5oM1Lu8mmsTg8_(...省略)&quot;;int ans[50] = &#123;0&#125;;ofstream outfile;void recur(int sum, int layer) &#123; ans[layer] = sum; if(sum&gt;8192) &#123; for(int i=0;i&lt;=layer;++i) &#123; // printf(&quot;%c&quot;,s[ans[i]]); outfile &lt;&lt; s[ans[i]]; &#125; outfile &lt;&lt; endl; &#125;else &#123; recur(sum*2,layer+1); recur(sum*2+1,layer+1); &#125;&#125;int main(int argc, char const *argv[])&#123; outfile.open(&quot;out.txt&quot;); recur(1,0); // printf(&quot;%d&quot;,&#x27;1&#x27;); outfile.close(); return 0;&#125;// 2o2l_h4ppy_new_ye4r 结果： 找到了2021_salt.html 回到main.go superSecretSalt有了，就是2o2l_h4ppy_new_ye4r 想想和其他也没关系了，剩下就是sha256爆破，用go写了个爆破程序 1234567891011121314151617181920212223242526272829303132package mainimport ( &quot;crypto/sha256&quot; &quot;flag&quot; &quot;fmt&quot;)func main() &#123; fmt.Println(&quot;2021 Happy new year!&quot;) superSecretSalt := flag.String(&quot;salt&quot;, &quot;2o2l_h4ppy_new_ye4r&quot;, &quot;&quot;) // redPacket := flag.String(&quot;packet&quot;, &quot;no_packet_here&quot;, &quot;&quot;) flag.Parse() for i := 0; i &lt; 999999999; i++ &#123; key := fmt.Sprint(i) // key := &quot;1&quot; val := []byte(key + *superSecretSalt) hash := sha256.Sum256(val[:]) result := 0 for i := 0; i &lt; 32; i++ &#123; result += int(hash[i]) &#125; // print(result) // print(&quot;\\n&quot;) if result == 2021 &#123; print(key) &#125; &#125;&#125; 最后，414134692，即为答案口令 搁着挖矿呢.jpg，还拿了挺多钱，快乐.jpg","categories":[],"tags":[{"name":"brute-force","slug":"brute-force","permalink":"http://laclic.github.io/tags/brute-force/"},{"name":"MISC","slug":"MISC","permalink":"http://laclic.github.io/tags/MISC/"},{"name":"the Spring Festival","slug":"the-Spring-Festival","permalink":"http://laclic.github.io/tags/the-Spring-Festival/"},{"name":"special","slug":"special","permalink":"http://laclic.github.io/tags/special/"},{"name":"password","slug":"password","permalink":"http://laclic.github.io/tags/password/"}]},{"title":"FZU2021-0xd4-FOUR QUARTERS","slug":"FZU2021-0xd4-FOUR-QUARTERS","date":"2021-02-12T15:02:01.000Z","updated":"2021-04-01T12:30:04.133Z","comments":true,"path":"2021/02/12/FZU2021-0xd4-FOUR-QUARTERS/","link":"","permalink":"http://laclic.github.io/2021/02/12/FZU2021-0xd4-FOUR-QUARTERS/","excerpt":"","text":"题意 有两个人比赛，各丢 2 个硬币，根据正反面情况，（A 丢的为表格纵轴，B 为横轴），计算二人得分。 现在要求你输出他们，进行到 1-20 局的胜负概率 思路 做题思路 首先，对抗性比赛只需要考虑分差，二人的得分情况（2 个变量）转变为二人的分差（1 个变量）。 其次，计算每人最终得分的权重，相乘即可。 最后，分差为负即为 lose，正即为 win，零即为 draw/tie。 不过要注意的是，最后输出是有额外格式要求的，但是给定的输出格式并没有详细说明。 精度思路 胜负平权重/总权重（下面给的代码就是这个思路） 这种思路下，最大数据会达到 16^20^，也就是 2^80^，long long 都不够，只能直接上 double / long double（精度要求是小数点后 4 位，所以适合用浮点类型），实测后，我的本机使用 double 结果和 long double 结果一致，但是 oj 并非如此，使用 double 是 WA，使用 long double 才能 AC。 要注意：long double 使用的格式控制符是&quot;%Lf&quot; 直接在得分 dp 数组中储存概率 这是最优解，全用 double 或 long double，精度上思考量就小了，直接乘下去即可。 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;cstdio&gt;#include &lt;cstring&gt;int main(int argc, char const *argv[])&#123; int dif=0; typedef struct _table&#123; int score; // A - B int weight; &#125;Table; Table table[6] = &#123;&#123;1,4&#125;,&#123;2,2&#125;,&#123;3,1&#125;,&#123;-1,2&#125;,&#123;0,6&#125;,&#123;-3,1&#125;&#125;; double dp[2][126] = &#123;0&#125;; // dp[now][score] = weight; int bias = 63; long double weight = 1; dp[0][bias] = 1; printf(&quot;Round A wins B wins Tie\\n&quot;); for(int round=1;round&lt;21;++round) &#123; // round &lt;= 20 int now = round%2, pre = !now, min = -3*(round-1), max = 3*(round-1); memset(dp[now],0,sizeof(dp[now])); weight = weight*16; for(int i=min;i&lt;=max;++i) &#123; if(dp[pre][i+bias]) &#123; for(int j=0;j&lt;6;++j) &#123; dp[now][table[j].score+i+bias] += dp[pre][i+bias]*table[j].weight; &#125; &#125; &#125; long double win=0, lose=0, draw=dp[now][bias]; for(int i=0;i&lt;bias;++i) &#123; lose += dp[now][i]; &#125; for(int i=bias+1;i&lt;126;++i) &#123; win += dp[now][i]; &#125; // printf(&quot; %lld %lld %lld %lld\\n&quot;,round,win,lose,draw); printf(&quot; %2d %7.4Lf%% %7.4Lf%% %7.4Lf%%\\n&quot;,round,1.0*win/weight*100,1.0*lose/weight*100,1.0*draw/weight*100); &#125; return 0;&#125;","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"dynamic programming","slug":"dynamic-programming","permalink":"http://laclic.github.io/tags/dynamic-programming/"},{"name":"remains problem","slug":"remains-problem","permalink":"http://laclic.github.io/tags/remains-problem/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"FZU2021-0xd3-Space Elevator","slug":"FZU2021-0xd3-Space-Elevator","date":"2021-02-09T15:06:21.000Z","updated":"2021-04-01T12:30:04.133Z","comments":true,"path":"2021/02/09/FZU2021-0xd3-Space-Elevator/","link":"","permalink":"http://laclic.github.io/2021/02/09/FZU2021-0xd3-Space-Elevator/","excerpt":"","text":"题意 牛牛要上天啦！为了让他们在轨道上转，要建造一个高塔（这是要在高塔上把他们踢飞，然后变成卫星？？？）。 我们有 K 种方块，第 i 种方块高为 h_i（可以把 i 当成数组下标），有 c_i 个，他们最高只能叠到高度 a_i（题目说是因为有太空射线，太高容易坏掉，我也不知道什么怪异原理…） (1 &lt;= K &lt;= 400)， (1 &lt;= h_i &lt;= 100)， (1 &lt;= c_i &lt;= 10)， (1 &lt;= a_i &lt;= 40000) 现在请你寻求一种方法，使得叠出最高高度来（只要输出最高高度即可） 分析 题目分析 和前两题一样，是凑数型动态规划。 只要上一种高度 dp（目前求高度 减去 当前种类方块）能凑出，手上还有当前种类方块，该高度 dp 一定能凑出。 如果该高度 dp 已经能凑出了，就不用浪费方块啦。 不过这题有个特点：高度限制 也就是说，你要先根据高度排序（从小到大开始），一个个去试，试到当前种类方块不能再往上叠了为止，否则会出现上一个方块叠满了（比如 7 高度，5 个，限高 80 方块叠到了 35），下一种方块（比如 5 高度，5 个，限高 25，遍历不到 25 以后的数据了）根本一个不能叠（只能到 35 了，但是 5 高度*5=25，没超限高，外加上 7 高度*5=60，明显更可行）。所有要先给他们排序。而 c++里面库 algorithm 的 sort()函数很好用 √。 数据分析 看到数据量后，我去 dev-cpp 跑了一下 for 循环看看遍历 1600 万个数据（400*40000）效率怎么样，结果好像挺好的 1234567891011121314#include &lt;cstdio&gt;int main(int argc, char const *argv[])&#123; for(int j=1;j&lt;=400;++j) &#123; for(int i=1;i&lt;=40000;++i) &#123; if(i==15); if(i==69999); if(i==10000); &#125; &#125; return 0;&#125; 12345单个循环：i to 1600000Process exited after 0.1482 seconds with return value 0双层循环：i to 40000, j to 400Process exited after 0.1369 seconds with return value 0 貌似双层还快了点？不过应该只是运气问题，总之 1600w 数据+3 个判断遍历大概只需要 0.14s，或者说 140ms 这样，完全能完成题目时长 1s 的要求 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;typedef struct _block&#123; int h; int a; int c;&#125;Block;// 定义结构体的比大小~int cmp(const Block &amp;x,const Block &amp;y) &#123; return x.a &lt; y.a; // 升序&#125;int main(int argc, char const *argv[])&#123; // freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin); // 把in.txt内容当成输入，submit的时候要记得注释掉 // 读取输入 int K; scanf(&quot;%d&quot;,&amp;K); Block block[K]; for(int i=0;i&lt;K;++i) &#123; scanf(&quot;%d %d %d&quot;,&amp;block[i].h,&amp;block[i].a,&amp;block[i].c); &#125; // 排序~ sort(block,block+K,cmp); // 三个参数分别为，数组，数组终止处，（可选）数组排序标准函数 // 找最大值 int max = block[K-1].a; // dp预备 int dp_isTrue[max+1]; int used[max+1]; memset(dp_isTrue,0,sizeof(dp_isTrue)); dp_isTrue[0] = 1; // dp开始 for(int i=0;i&lt;K;++i) &#123; // 情况used[]数组 memset(used,0,sizeof(used)); for(int j=block[i].h;j&lt;=block[i].a;++j) &#123; if(dp_isTrue[j-block[i].h]&amp;&amp;used[j-block[i].h]&lt;block[i].c&amp;&amp;!dp_isTrue[j]) &#123; dp_isTrue[j] = 1; used[j] = used[j-block[i].h] + 1; &#125; &#125; &#125; // 遍历寻找最大值 int ans = 0; for(int i=1;i&lt;=max;++i) &#123; if(dp_isTrue[i]) ans = i; &#125; printf(&quot;%d&quot;,ans); return 0;&#125;","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"dynamic programming","slug":"dynamic-programming","permalink":"http://laclic.github.io/tags/dynamic-programming/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"FZU2021-0xd2-Dividing","slug":"FZU2021-0xd2-Dividing","date":"2021-02-09T01:22:42.000Z","updated":"2021-04-01T12:30:04.134Z","comments":true,"path":"2021/02/09/FZU2021-0xd2-Dividing/","link":"","permalink":"http://laclic.github.io/2021/02/09/FZU2021-0xd2-Dividing/","excerpt":"","text":"题意 有两个人捡到了一组大理石，价值有 1-6 元，它们的个数分别有 n1-n6 个（总数不超过 20000 个）。 问，两人想以价值为基准平摊这组大理石，请你设计一个程序告诉他们能不能平摊 思路 计算价值总和 total，除以 2 得到 target，通过 dp 计算出，能不能凑出价值为 target 的大理石组 剪枝：若 total 为奇数，必不可能成功 状态转移同前一题，每种大理石都去试一次 另外，记录使用大理石个数时，只有之前无法凑出的数字才需要使用新的大理石 代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;cstdio&gt;#include &lt;cstring&gt;int main(int argc, char const *argv[])&#123; // freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin); int n[7]; struct &#123; int isTrue[60006]; // int isTrue[36]; int used[60006]; // int used[36]; &#125; dp; int cnt=0; while(1) &#123; scanf(&quot;%d %d %d %d %d %d&quot;,&amp;n[1],&amp;n[2],&amp;n[3],&amp;n[4],&amp;n[5],&amp;n[6]); if(!n[1]&amp;&amp;!n[2]&amp;&amp;!n[3]&amp;&amp;!n[4]&amp;&amp;!n[5]&amp;&amp;!n[6]) break; ++cnt; memset(dp.isTrue,0,sizeof(dp.isTrue)); dp.isTrue[0] = 1; int target=0; for(int i=1;i&lt;=6;++i) &#123; target += i*n[i]; &#125; if(target%2==1) &#123; printf(&quot;Collection #%d:\\nCan&#x27;t be divided.\\n\\n&quot;,cnt); dp.isTrue[target] = 0; continue; &#125; target /= 2; for(int i=1;i&lt;=6;++i) &#123; memset(dp.used,0,sizeof(dp.used)); for(int j=i;j&lt;=target;++j) &#123; if(dp.isTrue[j-i]&amp;&amp;dp.used[j-i]&lt;n[i]&amp;&amp;!dp.isTrue[j]) &#123; // 上一种dp能否凑出相应价值来，上一种dp用了多少第i种石头，该种dp是否之前就能凑出来了 dp.isTrue[j] = 1; dp.used[j] = dp.used[j-i] + 1; &#125; &#125; &#125; here: ; if(dp.isTrue[target]) printf(&quot;Collection #%d:\\nCan be divided.\\n\\n&quot;,cnt); else printf(&quot;Collection #%d:\\nCan&#x27;t be divided.\\n\\n&quot;,cnt); &#125; return 0;&#125;","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"dynamic programming","slug":"dynamic-programming","permalink":"http://laclic.github.io/tags/dynamic-programming/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"深度学习：构建神经网络并识别手写数字","slug":"深度学习：构建神经网络并识别手写数字","date":"2021-02-08T04:14:19.000Z","updated":"2021-02-09T01:46:22.306Z","comments":true,"path":"2021/02/08/深度学习：构建神经网络并识别手写数字/","link":"","permalink":"http://laclic.github.io/2021/02/08/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%9A%E6%9E%84%E5%BB%BA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%B9%B6%E8%AF%86%E5%88%AB%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97/","excerpt":"","text":"效果可以看出（10个数据，分别是认为该数字为0-9的程度，最后取最高的那个即为结果）基本能正确识别 但是1和7，4和9还是不太容易识别的 github链接Github. 全代码（ipynb）引入库1234567import numpy# scipy.special for the sigmoid function expit()import scipy.special# library for plotting arraysimport matplotlib.pyplot# (?) ensure the plots are inside this notebook, not an external window# %matplotlib inline 构建神经网络类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778class neuralNetwork(): # neural network class definition # initialize the neural network def __init__(self, inputNodes, hiddenNodes, outputNodes, learningRate): # set number of nodes in each input, hidden, output layer self.iNodes = inputNodes self.hNodes = hiddenNodes self.oNodes = outputNodes # learning rate self.learnRate = learningRate # link weight matrices, wih and who # weight inside the arrays are w_i_j, where link is from node i to node j in the next layer # w11 w21 # w12 w22 etc self.wih = numpy.random.normal( 0.0, pow(self.hNodes, -0.5), (self.hNodes, self.iNodes)) self.who = numpy.random.normal( 0.0, pow(self.oNodes, -0.5), (self.oNodes, self.hNodes)) # annoymous func self.actiFunc = lambda x: scipy.special.expit(x) # train the neural network def train(self, inputs_list, targets_list): # convert inputs and targets list to 2d array inputs = numpy.array(inputs_list, ndmin=2).T targets = numpy.array(targets_list, ndmin=2).T # calculate signals into hidden layer hidden_inputs = numpy.dot(self.wih, inputs) # calculate the signals emerging from hidden layer hidden_outputs = self.actiFunc(hidden_inputs) # calculate signals into final output layer final_inputs = numpy.dot(self.who, hidden_outputs) # calculate the signals emerging from final output layer final_outputs = self.actiFunc(final_inputs) # error is the difference of target and output output_errors = targets - final_inputs # hidden layer error is the output_errors, split by weights, recombined at hidden nodes hidden_errors = numpy.dot(self.who.T, output_errors) # update the weights for the links between the hidden and output layers self.who += self.learnRate * \\ numpy.dot((output_errors*final_outputs*(1.0-final_outputs)), numpy.transpose(hidden_outputs)) &quot;&quot;&quot; self.who += self.learnRate * \\ numpy.dot((output_errors*final_outputs*(1.0-final_outputs)), hidden_outputs.T)&quot;&quot;&quot; # between the input and hidden layers self.wih += self.learnRate * \\ numpy.dot((hidden_errors*hidden_outputs * (1.0 - hidden_outputs)), numpy.transpose(inputs)) # query the neural network def query(self, inputs_list): # convert inputs list to 2d array inputs = numpy.array(inputs_list, ndmin=2).T # calculate signals into hidden layer hidden_inputs = numpy.dot(self.wih, inputs) # calculate the signals emerging from hidden layer hidden_outputs = self.actiFunc(hidden_inputs) # calculate signals into final output layer final_inputs = numpy.dot(self.who, hidden_outputs) # calculate the signals emerging from final output layer final_outputs = self.actiFunc(final_inputs) return final_outputs 网络布置12345input_nodes = 784 # 28*28hidden_nodes = 100output_nodes = 10learning_rate = 0.3network = neuralNetwork(input_nodes, hidden_nodes, output_nodes, learning_rate) 打开训练数据文件1234with open(&#x27;train.csv&#x27;, &#x27;r&#x27;) as data_file: data_list = data_file.readlines()[1:] # 除首行外，全部读取到内存中 # print(data_list) data_file.close() 训练神经网络123456789101112131415for record in data_list: all_values = record.split(&#x27;,&#x27;) # make data into 0.01 ~ 1.00 &quot;&quot;&quot; Remains problem (why?) 0.01: prevent 0.00 leading to failing to update the weight 1.00: just preventing the output value being 1.00 is enough &quot;&quot;&quot; inputs = (numpy.asfarray(all_values[1:])/255.0 * 0.99) + 0.01 # create the target output values (all 0.01, except the desired label which is 0.99) # numpy.zeros(): use 0 to pad the array targets = numpy.zeros(output_nodes) + 0.01 # all_values[0] is the label of the record targets[int(all_values[0])] = 0.99 network.train(inputs, targets) 打开测试数据集test.csv里的数据集是无标签的 1234# load the test data CSV file into a listwith open(&#x27;test.csv&#x27;, &#x27;r&#x27;) as test_data_file: test_data_list = test_data_file.readlines()[1:] test_data_file.close() 测试数据并输出使用test.csv的数据集进行测试输出（无标签） 123456# from test.csvtest = test_data_list[0] # 调度第0个测试数据test_values = test.split(&#x27;,&#x27;)test_inputs = (numpy.asfarray(test_values)/255.0 * 0.99) + 0.01print(network.query(test_inputs))# print(test_data_list[0].strip().split(&#x27;,&#x27;)) 使用train.csv的数据集进行测试输出（带标签） 123456# from train.csvtest = data_list[999]print(&#x27;Answer is&#x27;, test[0])test_values = test.split(&#x27;,&#x27;)test_inputs = (numpy.asfarray(test_values[1:])/255.0 * 0.99) + 0.01print(network.query(test_inputs)) 疑难杂症tenserflow把numpy卸载了…没关系，会安装对应版本的numpy的 Python关于%matplotlib inline报错这个是 jupyter notebook 或者 jupyter qtconsole 的专属代码，使用%matplotlib inline这段代码可以输出图像。但是vscode编辑器并没有这个功能。（但这并不妨碍vscode是宇宙第一编辑器的事实） FileNotFoundError12345PS F:\\Programme_works\\Python&gt; python -u &quot;f:\\Programme_works\\Python\\DeepLearning\\numRecog\\neuralNetwork.py&quot;Traceback (most recent call last): File &quot;f:\\Programme_works\\Python\\DeepLearning\\numRecog\\neuralNetwork.py&quot;, line 106, in \\&lt;module\\&gt; with open(&#x27;train.csv&#x27;, &#x27;r&#x27;) as data_file:FileNotFoundError: [Errno 2] No such file or directory: &#x27;train.csv&#x27; 未找到文件，检查一下文件是否在命令执行时的目录（一般都是vscode打开的文件夹，或者jupyter notebook运行的文件所在的文件夹） 非jupyter编辑器输出csv图像将 1matplotlib.pyplot.imshow(image_array, cmap=&#x27;Greys&#x27;, interpolation=&#x27;None&#x27;) 改为 1matplotlib.pyplot.imsave(&#x27;temp.png&#x27;, image_array, cmap=&#x27;Greys&#x27;) 便会保存在目录下","categories":[],"tags":[{"name":"deep learning","slug":"deep-learning","permalink":"http://laclic.github.io/tags/deep-learning/"},{"name":"computer vision","slug":"computer-vision","permalink":"http://laclic.github.io/tags/computer-vision/"},{"name":"neural network","slug":"neural-network","permalink":"http://laclic.github.io/tags/neural-network/"}]},{"title":"FZUACM-动规DP爆锤计划！（持续更新ing...）","slug":"FZUACM-动规DP爆锤计划！","date":"2021-02-07T03:09:56.000Z","updated":"2021-03-09T09:56:05.954Z","comments":true,"path":"2021/02/07/FZUACM-动规DP爆锤计划！/","link":"","permalink":"http://laclic.github.io/2021/02/07/FZUACM-%E5%8A%A8%E8%A7%84DP%E7%88%86%E9%94%A4%E8%AE%A1%E5%88%92%EF%BC%81/","excerpt":"","text":"DP教程 程序员小灰的漫画解DP. 强推！图很多，思路也很清晰。 题目题解（内含题目大意） 所有题目复制到百度上都能找到oj题（たぶん） 00(hex)-最短Hamilton路径 最短Hamilton路径 01(hex)-Charlie’s Change 买咖啡-Charlie’s Change 02(hex)-Dividing 分石头-Dividing 03(hex)-Space Elevator 牛牛上天计划-Space Elevator 04(hex)-FOUR QUARTERS 投硬币-FOUR QUARTERS 05(hex)-不要62 No 4 No 62-不要62 06(hex)-F(x) F(x)-十进制变二进制再变十进制 07(hex)-吉哥系列故事——恨7不成妻 [吉哥系列故事——恨7不成妻-no 7！](https://blog.laclic.ink/2021/03/08/FZU2021-0xd7-吉哥系列故事——恨7不成妻/","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"dynamic programming","slug":"dynamic-programming","permalink":"http://laclic.github.io/tags/dynamic-programming/"}]},{"title":"FZU2021-0xd1-Charlie's Change","slug":"FZU2021-0xd1-Charlie-s-Change","date":"2021-02-06T13:20:56.000Z","updated":"2021-04-01T12:30:04.133Z","comments":true,"path":"2021/02/06/FZU2021-0xd1-Charlie-s-Change/","link":"","permalink":"http://laclic.github.io/2021/02/06/FZU2021-0xd1-Charlie-s-Change/","excerpt":"","text":"题意 有一个人想买咖啡，现在告诉你一杯咖啡 P 分钱，他身上有 c1,c2,c3,c4 个 1 分,5 分,10 分,25 分硬币。 问：在不找零的情况下，他至多能用多少个硬币（并输出分别要用多少个硬币）？ 思路 状态转移（最优子问题）： 4 种硬币，每种都有用/不用的选项 所以 F(e) = min{F(e-1),F(e-5),F(e-10),F(e-25)} 且 F(0) = 0（咖啡不要钱，一个硬币也不能使用） 接下来就是从简单开始（就像数学归纳法一样，整体思路就是数学中的化归） 代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include &lt;cstdio&gt;#include &lt;cstring&gt;// F(a,b,c,d,e) = min&#123;F(a-1,b,c,d,e-1),F(a,b-1,c,d,e-5),F(a,b,c-1,d,e-10),F(a,b,c,d-1,e-25)&#125;int main(int argc, char const *argv[])&#123; // freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin); int money[] = &#123;1,5,10,25&#125;; struct _dp&#123; int max[10006]; // How many coins can be used as much as possible int from[10006]; // which dp is this dp from &#125; dp; int C[4],P; int used[10006]; while(1) &#123; scanf(&quot;%d %d %d %d %d&quot;,&amp;P,&amp;C[0],&amp;C[1],&amp;C[2],&amp;C[3]); if(P==0) break; memset(dp.max,-10060,sizeof(dp.max)); memset(dp.from,0,sizeof(dp.from)); dp.from[0] = -1; // board dp.max[0] = 0; // board for(int i=0;i&lt;4;++i) &#123; memset(used,0,sizeof(used)); for(int j=money[i];j&lt;=P;++j) &#123; if(dp.max[j-money[i]]&gt;=0&amp;&amp;dp.max[j-money[i]]+1&gt;dp.max[j]&amp;&amp;used[j-money[i]]+1&lt;=C[i]) &#123; // previous dp exists, max increases if use this coin, the used coin num is no more than total coins dp.max[j] = dp.max[j-money[i]] + 1; dp.from[j] = j-money[i]; used[j] = used[j-money[i]] + 1; &#125; &#125; &#125; if(dp.max[P]&lt;0) printf(&quot;Charlie cannot buy coffee.\\n&quot;); else &#123; int now = P; // derive back int coin[4] = &#123;0&#125;; while(dp.from[now]!=-1) &#123; switch(now-dp.from[now]) &#123; case 1: ++coin[0]; break; case 5: ++coin[1]; break; case 10: ++coin[2]; break; case 25: ++coin[3]; break; &#125; now = dp.from[now]; &#125; printf(&quot;Throw in %d cents, %d nickels, %d dimes, and %d quarters.\\n&quot;,coin[0],coin[1],coin[2],coin[3]); &#125; &#125; return 0;&#125;","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"dynamic programming","slug":"dynamic-programming","permalink":"http://laclic.github.io/tags/dynamic-programming/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"FZU2021-0x17-Find a way","slug":"FZU2021-0x17-Find-a-way","date":"2021-02-05T13:08:29.000Z","updated":"2021-04-04T03:18:05.217Z","comments":true,"path":"2021/02/05/FZU2021-0x17-Find-a-way/","link":"","permalink":"http://laclic.github.io/2021/02/05/FZU2021-0x17-Find-a-way/","excerpt":"","text":"题意 有两个人 YFF 和 MCK 在宁波，想要去肯德基（KFC）面基，现在告诉你 YFF 和 MCK 二人的位置，并告诉你所有 KFC 店家的位置，以及路况地图。请问至少要走多远（步数*11）才能一起到达 KFC（任意一家）见面？ 思路 由于可能存在多家 KFC，使用 A*算法可能时间爆炸，我们使用广度优先搜索（bfs），把走到地图上任意位置的步数都标注，最后一个个相加取最小值即可。 小技巧：把边框用’#'围起来，代表不可通过边界。 另外，地图上的一家 KFC 可能被封死。 代码 另外，初始化边框的时候注意测试非正方形道路（非方阵）情况，不要因为写成同一个数据而 debug 半天（指我）。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;queue&gt;using namespace std;int Y[202][202];int M[202][202];typedef struct _pos&#123; int X; int Y;&#125;Pos;typedef struct _round&#123; Pos pos; int step;&#125;Round;queue&lt;Round&gt; que;void go(int(*who)[202]) &#123; while(!que.empty()) &#123; Round temp = que.front(); que.pop(); if(who[temp.pos.X+1][temp.pos.Y]==0) &#123; que.push(&#123;&#123;temp.pos.X+1,temp.pos.Y&#125;,temp.step+1&#125;); who[temp.pos.X+1][temp.pos.Y] = temp.step; &#125; if(who[temp.pos.X-1][temp.pos.Y]==0) &#123; que.push(&#123;&#123;temp.pos.X-1,temp.pos.Y&#125;,temp.step+1&#125;); who[temp.pos.X-1][temp.pos.Y] = temp.step; &#125; if(who[temp.pos.X][temp.pos.Y+1]==0) &#123; que.push(&#123;&#123;temp.pos.X,temp.pos.Y+1&#125;,temp.step+1&#125;); who[temp.pos.X][temp.pos.Y+1] = temp.step; &#125; if(who[temp.pos.X][temp.pos.Y-1]==0) &#123; que.push(&#123;&#123;temp.pos.X,temp.pos.Y-1&#125;,temp.step+1&#125;); who[temp.pos.X][temp.pos.Y-1] = temp.step; &#125; &#125;/* for(int i=0;i&lt;=6;++i) &#123; // debug for(int j=0;j&lt;=6;++j) &#123; printf(&quot;%2d&quot;,who[i][j]); &#125; printf(&quot;\\n&quot;); &#125; printf(&quot;\\n&quot;);*/&#125;int main(int argc, char const *argv[])&#123; int n,m; char temp; Pos YFF,MCK; while(scanf(&quot;%d %d&quot;,&amp;n,&amp;m)!=EOF) &#123; int n1 = n+1, m1 = m+1; queue&lt;Pos&gt; KFC; for(int i=1;i&lt;=n1;++i) &#123; Y[i][0] = -1; Y[i][m1] = -1; M[i][0] = -1; M[i][m1] = -1; &#125; for(int j=1;j&lt;=m1;++j) &#123; Y[0][j] = -1; Y[n1][j] = -1; // Y[m1][j] = -1; 低级错误 M[0][j] = -1; M[n1][j] = -1; // M[m1][j] = -1; 低级错误 &#125;/* for(int i=0;i&lt;=7;++i) &#123; // debug for(int j=0;j&lt;=7;++j) &#123; printf(&quot;%2d&quot;,Y[i][j]); &#125; printf(&quot;\\n&quot;); &#125; printf(&quot;\\n&quot;);*/ for(int i=1;i&lt;=n;++i) &#123; getchar(); for(int j=1;j&lt;=m;++j) &#123; scanf(&quot;%c&quot;,&amp;temp); switch (temp) &#123; case &#x27;Y&#x27;: &#123; YFF.X = i; YFF.Y = j; Y[i][j] = 0; M[i][j] = 0; break; &#125; case &#x27;M&#x27;:&#123; MCK.X = i; MCK.Y = j; Y[i][j] = 0; M[i][j] = 0; break; &#125; case &#x27;#&#x27;:&#123; Y[i][j] = -1; M[i][j] = -1; break; &#125; case &#x27;.&#x27;:&#123; Y[i][j] = 0; M[i][j] = 0; break; &#125; case &#x27;@&#x27;:&#123; Y[i][j] = 0; M[i][j] = 0; KFC.push(&#123;i,j&#125;); break; &#125; &#125; &#125; &#125; que.push(&#123;YFF,1&#125;); Y[YFF.X][YFF.Y] = 1; go(Y); Y[YFF.X][YFF.Y] = 0; que.push(&#123;MCK,1&#125;); M[MCK.X][MCK.Y] = 1; go(M); M[MCK.X][MCK.Y] = 0; unsigned long long min = -1; while(!KFC.empty()) &#123; Pos temp = KFC.front(); KFC.pop(); if(Y[temp.X][temp.Y]==0||M[temp.X][temp.Y]==0) continue; // 道路被封死 if(min&gt;Y[temp.X][temp.Y]+M[temp.X][temp.Y]) &#123; min = Y[temp.X][temp.Y]+M[temp.X][temp.Y]; &#125; &#125; printf(&quot;%lld\\n&quot;,min*11); &#125; return 0;&#125;","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"search","slug":"search","permalink":"http://laclic.github.io/tags/search/"},{"name":"broad first search","slug":"broad-first-search","permalink":"http://laclic.github.io/tags/broad-first-search/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"Codeforces-Knights of a Polygonal Table","slug":"Codeforces-Knights-of-a-Polygonal-Table","date":"2021-02-03T01:52:27.000Z","updated":"2021-04-01T12:30:02.911Z","comments":true,"path":"2021/02/03/Codeforces-Knights-of-a-Polygonal-Table/","link":"","permalink":"http://laclic.github.io/2021/02/03/Codeforces-Knights-of-a-Polygonal-Table/","excerpt":"","text":"题意 现在有 n 个骑士，每个骑士最多能杀 k 个其他力量弱于自己的骑士（每个骑士的力量都不同），并抢走他们的钱。问：对于每个骑士，当只有自己能杀其他骑士的时候，最多能抢到多少钱。 思路 将所有骑士，标记上他们原来输入时的位置后（因为输出要按位置顺序输出），重新按力量从小到大排序。当遍历到第 i 个骑士时，所有第 i 个之前的骑士所持有的钱数按从大到小排序，取最前的 k 个（不足 k 则能抢多少抢多少）。 实现钱数排序的方法，有个小窍门，就只要在遍历的时候，每次将他前面那个人的钱放入到从大到小排序的容器即可。 代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;map&gt;using namespace std;typedef struct _knight &#123; int num; int coin;&#125;Knight;int main(int argc, char const *argv[])&#123; int n,k; scanf(&quot;%d %d&quot;,&amp;n,&amp;k); int a[n]; map&lt;int,Knight&gt; mapp; // &lt;power,coins&gt; Knight temp; long long ans[n]; // 数据较大，需要用long long for(int i=0;i&lt;n;++i) &#123; scanf(&quot;%d&quot;,&amp;a[i]); &#125; for(int i=0;i&lt;n;++i) &#123; scanf(&quot;%d&quot;,&amp;temp.coin); temp.num = i; mapp[a[i]] = temp; &#125; map&lt;int,int,greater&lt;int&gt;&gt; coins; map&lt;int,Knight&gt;::iterator it=mapp.begin(); ans[it-&gt;second.num] = it-&gt;second.coin; ++coins[it-&gt;second.coin]; ++it; for(;it!=mapp.end();++it) &#123; ans[it-&gt;second.num] = it-&gt;second.coin; int cnt=0; for(map&lt;int,int&gt;::iterator it_coin=coins.begin();it_coin!=coins.end();++it_coin) &#123; for(int remain=it_coin-&gt;second;remain;--remain) &#123; if(cnt&gt;=k) goto here; ans[it-&gt;second.num] += it_coin-&gt;first; ++cnt; &#125; &#125; here: ; ++coins[it-&gt;second.coin]; &#125; for(int i=0;i&lt;n;++i) &#123; printf(&quot;%lld &quot;,ans[i]); &#125; return 0;&#125;","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"sort","slug":"sort","permalink":"http://laclic.github.io/tags/sort/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"Codeforces-Polycarp and Div 3","slug":"Codeforces-Polycarp-and-Div-3","date":"2021-02-03T01:26:16.000Z","updated":"2021-04-01T12:30:04.134Z","comments":true,"path":"2021/02/03/Codeforces-Polycarp-and-Div-3/","link":"","permalink":"http://laclic.github.io/2021/02/03/Codeforces-Polycarp-and-Div-3/","excerpt":"","text":"题意 给定一个很长的数字串，现在要你将其分割为很多小子串，使得能被 3 整除的子数字串最多，输出最多有多少个。 思路 分情况： 对于数字串中，新开始的一位：（mod3 代表对 3 取余） 若本身 mod3 就是 0，直接成为一个符合条件的串，前面的舍弃 若与前面串之和 mod3 为 0，则一起成为符合条件的串 若与前面串之和-最首位后，mod3 为 0，则成为符合条件的串，最首位舍弃 都不符合，则前往下一位 当然有一个可能的例外，比如最首 2 位都去掉才能变成 mod3 位 0 呢？ 答：因为 mod3 只会有 3 中情况，0，1，2。最首位（head1）为 0 则直接自成一串。head1 为 1 时，首第二位（head2）mod3 为 0 则自成一串，head1 舍弃；head2 mod3 为 2，则合成一串；head2 为 1 时，再前往下一位；若再下一位（head3）为 0，自成一串；若为 1，head1+2+3 合成一串，若为 2，则 head2+3 合成一串，舍弃 head1，完美填满了所有情况，head1 mod3 为 2 时同理，所以只需要记录一个 head1 即可。 代码 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;cstdio&gt;char a[200006];int main(int argc, char const *argv[])&#123; scanf(&quot;%s&quot;,a); int cnt=0,total=0,head; head = a[0] - &#x27;0&#x27;; for(int i=0;a[i]!=0;) &#123; if(a[i]%3==0) &#123; ++cnt; ++i; head = a[i] - &#x27;0&#x27;; total = 0; continue; &#125;else &#123; total += a[i] - &#x27;0&#x27;; if(total%3==0) &#123; ++cnt; ++i; head = a[i] - &#x27;0&#x27;; total = 0; continue; &#125; if(head!=total&amp;&amp;(total-head)%3==0) &#123; ++cnt; ++i; head = a[i] - &#x27;0&#x27;; total = 0; continue; &#125; ++i; &#125; &#125; printf(&quot;%d&quot;,cnt); return 0;&#125;","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"string","slug":"string","permalink":"http://laclic.github.io/tags/string/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"Codeforces-Fingerprints","slug":"Codeforces-Fingerprints","date":"2021-02-02T05:52:46.000Z","updated":"2021-04-01T12:30:02.911Z","comments":true,"path":"2021/02/02/Codeforces-Fingerprints/","link":"","permalink":"http://laclic.github.io/2021/02/02/Codeforces-Fingerprints/","excerpt":"","text":"题意 其实有点没看懂，大意就是，给定 n 和 k，给你 n 个数，再告诉你其中 k 个数上有标记，现在让你按输入这 n 个数时的顺序，输出所有有标记的数。 思路 将 k 个数写入一个数组，0 为没标记，1 为有标记，最后去遍历 n 个数的数组，有标记就输出 代码 1234567891011121314151617181920212223242526272829303132333435#include &lt;cstdio&gt;int main(int argc, char const *argv[])&#123; int n,m; scanf(&quot;%d %d&quot;,&amp;n,&amp;m); int a[n],mapp[10]=&#123;0&#125;,temp; for(int i=0;i&lt;n;++i) &#123; scanf(&quot;%d&quot;,&amp;a[i]); &#125; for(int i=0;i&lt;m;++i) &#123; scanf(&quot;%d&quot;,&amp;temp); ++mapp[temp]; &#125; int i=0, flag=0; for(i;i&lt;n;++i) &#123; if(mapp[a[i]]==1) &#123; printf(&quot;%d&quot;,a[i]); flag = 1; ++i; break; &#125; &#125; for(;i&lt;n;++i) &#123; if(mapp[a[i]]==1) &#123; printf(&quot; %d&quot;,a[i]); &#125; &#125; if(flag) &#123; printf(&quot;\\n&quot;); &#125;else &#123; printf(&quot;\\n&quot;); &#125; return 0;&#125;","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"Codeforces-Delete from the Left","slug":"Codeforces-Delete-from-the-Left","date":"2021-02-02T03:44:23.000Z","updated":"2021-04-01T12:30:09.119Z","comments":true,"path":"2021/02/02/Codeforces-Delete-from-the-Left/","link":"","permalink":"http://laclic.github.io/2021/02/02/Codeforces-Delete-from-the-Left/","excerpt":"","text":"题意 给定2个字符串，你只能将两个字符串从左往右删减，直到他们完全相同或同为空字符串 思路 这题目是经典的说反话，其实应该从右往左看，找到最长的相同串即可 代码 1234567891011121314151617181920#include &lt;cstdio&gt;#include &lt;cstring&gt;char s[200006],t[200006];int main(int argc, char const *argv[])&#123; scanf(&quot;%s %s&quot;,&amp;s[1],&amp;t[1]); s[0] = &#x27;A&#x27;, t[0] = &#x27;B&#x27;; // 使用不可能出现的串标记最后一位，作为退出标志 int nowS = strlen(s), nowT = strlen(t); int sum = nowS + nowT - 2; int cnt = -1; // 从&#x27;\\0&#x27;开始 while(s[nowS]==t[nowT]) &#123; ++cnt; --nowS; --nowT; &#125; printf(&quot;%d&quot;,sum - cnt*2); return 0;&#125;","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"string","slug":"string","permalink":"http://laclic.github.io/tags/string/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"Codeforces-Summarize to the Power of Two","slug":"Codeforces-Summarize-to-the-Power-of-Two","date":"2021-02-01T04:24:19.000Z","updated":"2021-04-01T12:30:04.133Z","comments":true,"path":"2021/02/01/Codeforces-Summarize-to-the-Power-of-Two/","link":"","permalink":"http://laclic.github.io/2021/02/01/Codeforces-Summarize-to-the-Power-of-Two/","excerpt":"","text":"题意 给定一个有 n 个数字（每个数字 ≤10^9^）的数组。 对于每个数，需要你找出，该数组中，是否存在一个其他数，使得两数相加之和为 2 的整数次方。 输出不符合上述条件的数据个数。 思路 将 2 的整数次方列成表，减去当前数，得到所需要的数，一个个查过去数组内是否存在所需要的数 代码 12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;map&gt;using namespace std;map&lt;int,int&gt; mapp;int table[] = &#123;1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152,4194304,8388608,16777216,33554432,67108864,134217728,268435456,536870912,1073741824,0&#125;;int check(int x) &#123; int i=0; --mapp[x]; for(;table[i]&lt;=x;++i) ; for(;table[i]!=0;++i) &#123; if(mapp[table[i]-x]) &#123; ++mapp[x]; return 1; &#125; &#125; return 0;&#125;int main(int argc, char const *argv[])&#123; int n; scanf(&quot;%d&quot;,&amp;n); int a[n],cnt=0; // plz initialize the counter, onnegai....orz... for(int i=0;i&lt;n;++i) &#123; scanf(&quot;%d&quot;,&amp;a[i]); ++mapp[a[i]]; &#125; for(int i=0;i&lt;n;++i) &#123; if(!check(a[i])) ++cnt; &#125; printf(&quot;%d\\n&quot;,cnt); return 0;&#125;","categories":[],"tags":[{"name":"search","slug":"search","permalink":"http://laclic.github.io/tags/search/"},{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"map","slug":"map","permalink":"http://laclic.github.io/tags/map/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"Codeforces-Tanya and Stairways","slug":"Codeforces-Tanya-and-Stairways","date":"2021-02-01T03:33:55.000Z","updated":"2021-04-01T12:30:04.133Z","comments":true,"path":"2021/02/01/Codeforces-Tanya-and-Stairways/","link":"","permalink":"http://laclic.github.io/2021/02/01/Codeforces-Tanya-and-Stairways/","excerpt":"","text":"题意 有一座很高的建筑，有很多层，每一层都有很多阶梯（可能不一样，这到底是什么鬼建筑），现在告诉你一共有几个阶梯，并且告诉你每个阶梯是当前层的第几阶 现在要你求出有多少层，并且每层有多少阶梯。 思路 每检测到第 1 阶的时候，层数+1，并记录上一层的有多少阶梯。 首个就随便给个数据，之后弃用。 最后一层的阶梯数信息还存储在阶数计数器中，直接在最后读取即可。 代码 1234567891011121314151617181920212223242526272829303132#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;queue&gt;using namespace std;int main(int argc, char const *argv[])&#123; int n; scanf(&quot;%d&quot;,&amp;n); int cnt=0,temp,max; queue&lt;int&gt; que; for(;n;--n) &#123; scanf(&quot;%d&quot;,&amp;temp); if(temp==1) &#123; // 检测到阶数==1 que.push(max); // 将层数推入队列 max = temp; ++cnt; &#125;else &#123; max = temp; &#125; &#125; printf(&quot;%d\\n&quot;,cnt); que.pop(); // 第一个数据是无效的，踢出队列 while(!que.empty()) &#123; printf(&quot;%d &quot;,que.front()); que.pop(); &#125; printf(&quot;%d&quot;,max); // 最后一层的阶数 return 0;&#125;","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"Codeforces-Buying a TV Set","slug":"Codeforces-Buying-a-TV-Set","date":"2021-01-31T03:24:00.000Z","updated":"2021-03-22T07:16:53.236Z","comments":true,"path":"2021/01/31/Codeforces-Buying-a-TV-Set/","link":"","permalink":"http://laclic.github.io/2021/01/31/Codeforces-Buying-a-TV-Set/","excerpt":"","text":"题意 有个人（摩诺卡普Monocarp）给自家的墙装个电视，商店街的电视尺寸只有一种比例的，而且长宽均为整数（题外话：汗…要是换个单位，小数不也能变整数） 现在告诉你他家的墙的长宽，和其中一种尺寸的电视的长宽，请问至多能买多少种尺寸的电视？ 思路 将电视长宽分解，得出互质的长宽比例（长除以最大公约数gcd，宽同理），然后算出墙长最多能容纳多少种电视，宽同理，二者取最小值即为答案。 代码 123456789101112131415161718192021#include &lt;cstdio&gt;int main(int argc, char const *argv[])&#123; long long a,b,x,y; scanf(&quot;%lld %lld %lld %lld&quot;,&amp;a,&amp;b,&amp;x,&amp;y); // 数据较大，用longlong long long xx=x,yy=y,temp; do &#123; temp = xx%yy; xx = yy; yy = temp; &#125;while(temp!=0); // gcd is xx x /= xx; y /= xx; long long count_x = a/x; long long count_y = b/y; long long ans = count_x&gt;count_y?count_y:count_x; printf(&quot;%lld&quot;,ans); return 0;&#125;","categories":[],"tags":[{"name":"c++","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"gcd","slug":"gcd","permalink":"http://laclic.github.io/tags/gcd/"}]},{"title":"Codeforces-Heist","slug":"Codeforces-Heist","date":"2021-01-31T03:18:37.000Z","updated":"2021-04-01T12:30:02.911Z","comments":true,"path":"2021/01/31/Codeforces-Heist/","link":"","permalink":"http://laclic.github.io/2021/01/31/Codeforces-Heist/","excerpt":"","text":"题意 有家键盘店被抢劫了，已知键盘标号是连续的（比如最小是 5，最大时 10，那原来至少是有标号为 5，6，7，8，9，10 共 6 把键盘）。 现在知道还剩 n 个键盘，并给出他们的标号，请问，至少有多少把键盘被盗走？ 思路 找出标号的最大值最小值，得出原来至少有多少把键盘，减去剩余键盘数，便是被盗键盘数。 代码 12345678910111213141516#include &lt;cstdio&gt;int main(int argc, char const *argv[])&#123; int n; scanf(&quot;%d&quot;,&amp;n); int temp; unsigned int max=0, min=-1; for(int i=0;i&lt;n;++i) &#123; scanf(&quot;%d&quot;,&amp;temp); if(temp&gt;max) max = temp; if(temp&lt;min) min = temp; &#125; printf(&quot;%d&quot;,max-min+1-n); return 0;&#125;","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"Codeforces-Problem for Nazar","slug":"Codeforces-Problem-for-Nazar","date":"2021-01-30T15:52:40.000Z","updated":"2021-01-30T15:44:07.001Z","comments":true,"path":"2021/01/30/Codeforces-Problem-for-Nazar/","link":"","permalink":"http://laclic.github.io/2021/01/30/Codeforces-Problem-for-Nazar/","excerpt":"","text":"题意将所有正整数分为奇偶两部分 1234567第一次，取1个奇数第二次，取2个偶数第三次，取4个奇数第四次，取8个偶数第五次，取16个奇数第六次，取32个偶数以此类推…… 123412 43 5 7 96 8 10 12 14 16 18 20 现在，我们要读入2个数据l和r，从第l个累加到第r个，最后结果对1000000007取余 思路将l到r根据2的n次方分为很多个小区间，计算每个小区间之和（首项+末项）×项数÷2 代码由于涉及高精度，使用python 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&quot;&quot;&quot;12 43 5 7 96 8 10 12 14 16 18 20&quot;&quot;&quot;s = input(&quot;&quot;).split()l = int(s[0])r = int(s[1])i = 0sign = 1dic = &#123;&#125;while sign &lt; l: i += 1 sign *= 2while sign &lt;= r: dic[i] = sign i += 1 sign *= 2dic[i] = signi += 1sign *= 2dic2 = &#123;&#125;ans = 0for k, v in dic.items(): # v == 2**k if k % 2 == 1: summ = (v*2-1) // (4-1) highest = 2*summ - 1 # num == 2**k - 1 num2 = v - 1 lowest = highest - v + 2 # num == 2**(k-1) num1 = v//2 if k % 2 == 0: summ = (v*2-2) // (4-1) highest = 2*summ # num == 2**k - 1 num2 = v - 1 lowest = highest - v + 2 # num == 2**(k-1) num1 = v//2 if l &gt; num1: left = (l - num1)*2 + lowest numl = l else: left = lowest numl = num1 if r &lt; num2: right = (r - num1)*2 + lowest numr = r else: right = highest numr = num2 ans += (left+right)*(numr-numl+1)//2print(ans % 1000000007, end=&#x27;&#x27;)","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://laclic.github.io/tags/python/"},{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"math","slug":"math","permalink":"http://laclic.github.io/tags/math/"}]},{"title":"Codeforces-Maxim and Biology","slug":"Codeforces-Maxim-and-Biology","date":"2021-01-30T15:43:47.000Z","updated":"2021-04-01T12:30:02.912Z","comments":true,"path":"2021/01/30/Codeforces-Maxim-and-Biology/","link":"","permalink":"http://laclic.github.io/2021/01/30/Codeforces-Maxim-and-Biology/","excerpt":"","text":"每个子串都试一遍过去 1234567891011121314151617181920212223242526272829303132333435#include &lt;cstdio&gt;inline int dis(char x,char y) &#123; int ret = x-y; ret += 26; ret %= 26; if(ret&gt;13) ret = 26 - ret; return ret;&#125;inline int formula(char* a) &#123; int ret = 0; ret += dis(a[0],&#x27;A&#x27;); ret += dis(a[1],&#x27;C&#x27;); ret += dis(a[2],&#x27;T&#x27;); ret += dis(a[3],&#x27;G&#x27;); return ret;&#125;int main(int argc, char const *argv[])&#123; int n; scanf(&quot;%d&quot;,&amp;n); char a[56]; scanf(&quot;%s&quot;,a); int count=n-3; unsigned int min = -1; for(int i=0;i&lt;count;++i) &#123; int temp = formula(&amp;a[i]); if(temp&lt;min) min = temp; &#125; printf(&quot;%d&quot;,min); return 0;&#125;","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"string","slug":"string","permalink":"http://laclic.github.io/tags/string/"},{"name":"brute-force","slug":"brute-force","permalink":"http://laclic.github.io/tags/brute-force/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"Codeforces-Dima and a Bad XOR","slug":"Codeforces-Dima-and-a-Bad-XOR","date":"2021-01-30T15:12:20.000Z","updated":"2021-03-22T07:16:53.236Z","comments":true,"path":"2021/01/30/Codeforces-Dima-and-a-Bad-XOR/","link":"","permalink":"http://laclic.github.io/2021/01/30/Codeforces-Dima-and-a-Bad-XOR/","excerpt":"","text":"存在性问题，取所有数组的第一个，若xor结果为0，则去每个数组寻找不同于第一个的数即可，找到一个即可break 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;cstdio&gt;int main(int argc, char const *argv[])&#123; int n,m; scanf(&quot;%d %d&quot;,&amp;n,&amp;m); int a[n+1][m+1]; int chosen[n+1]; for(int i=1;i&lt;=n;++i) &#123; chosen[i] = 1; &#125; for(int i=1;i&lt;=n;++i) &#123; for(int j=1;j&lt;=m;++j) &#123; scanf(&quot;%d&quot;,&amp;a[i][j]); &#125; &#125; int sum=a[1][1]; for(int i=2;i&lt;=n;++i) &#123; sum ^= a[i][1]; &#125; if(sum==0) &#123; for(int i=1;i&lt;=n;++i) &#123; int temp = a[i][1]; for(int j=2;j&lt;=m;++j) &#123; if(temp!=a[i][j]) &#123; chosen[i] = j; sum = 1; goto out; &#125; &#125; &#125; out: ; &#125; if(sum==0) &#123; printf(&quot;NIE&quot;); &#125;else &#123; printf(&quot;TAK\\n%d&quot;,chosen[1]); for(int i=2;i&lt;=n;++i) &#123; printf(&quot; %d&quot;,chosen[i]); &#125; &#125; return 0;&#125;","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"existence","slug":"existence","permalink":"http://laclic.github.io/tags/existence/"},{"name":"binary","slug":"binary","permalink":"http://laclic.github.io/tags/binary/"}]},{"title":"Codeforces-Vasya And Array","slug":"Codeforces-Vasya-And-Array","date":"2021-01-30T06:31:30.000Z","updated":"2021-04-01T12:30:04.133Z","comments":true,"path":"2021/01/30/Codeforces-Vasya-And-Array/","link":"","permalink":"http://laclic.github.io/2021/01/30/Codeforces-Vasya-And-Array/","excerpt":"","text":"题意 给定一个有 n 个数的数组，再给定一些输入 t,l,r 其中，t 只能为 0 或 1 t==1 时，数组中下标从 l 到 r 的数均为非递减 t==0 时，数组中下标从 l 到 r 的数不全为非递减，即至少有 2 个是递减的，即存在 i 使得 Ai&gt;A(i+1) 思路 先记录所有严格非递减区间的首位，经过一次变量全部标记为非递减区间（下图绿色），并将所有 t==0 情况压入栈中（队列也行，无先后顺序要求），最后便利栈中所有的区间，碰到的第一个非递增区间（已标记递减的亦可），标记为递减，最后处理输出 详情见图 代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;stack&gt;using namespace std;typedef struct _dis &#123; int from; int to;&#125;Dis;int main(int argc, char const *argv[])&#123; int n,m,isPossible=1; scanf(&quot;%d %d&quot;,&amp;n,&amp;m); int a[n+1] = &#123;0&#125;; stack&lt;Dis&gt; stk; Dis temp; for(;m;--m) &#123; int cmd; scanf(&quot;%d %d %d&quot;,&amp;cmd,&amp;temp.from,&amp;temp.to); if(cmd==1) &#123; ++a[temp.from]; --a[temp.to]; &#125;else &#123; stk.push(temp); &#125; &#125; int flag = 0; for(int i=1;i&lt;n;++i) &#123; flag+=a[i]; if(flag) &#123; a[i] = 1; &#125; &#125; while(!stk.empty()) &#123; temp = stk.top(); stk.pop(); int i; for(i=temp.from;i&lt;temp.to;++i) &#123; if(a[i]!=1) &#123; a[i] = -1; break; &#125; &#125; if(i==temp.to) &#123; isPossible = 0; break; &#125; &#125; if(isPossible) &#123; printf(&quot;YES\\n&quot;); // int now = 1; // (WARNING: 1 ≤ ai ≤ 10^9) int now = 500000000; printf(&quot;500000000&quot;); for(int i=1;i&lt;n;++i) &#123; now += a[i]; printf(&quot; %d&quot;,now); &#125; &#125;else &#123; printf(&quot;NO&quot;); &#125; return 0;&#125;","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"array","slug":"array","permalink":"http://laclic.github.io/tags/array/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"Codeforces-Gambling","slug":"Codeforces-Gambling","date":"2021-01-29T03:45:43.000Z","updated":"2021-04-01T12:30:04.134Z","comments":true,"path":"2021/01/29/Codeforces-Gambling/","link":"","permalink":"http://laclic.github.io/2021/01/29/Codeforces-Gambling/","excerpt":"","text":"题意 有两个人纸牌游戏（相互明牌），每个人起手有 n 张牌，每回合由 A 开始再 B，可丢弃自己的一张牌并给自己加分，或者丢弃对方一张牌（没有加分）。 求每个人都进行了最佳选择后，A 的得分减去 B 的得分的值（可为负） 思路 竞争性游戏，只求分差 丢弃对方一张牌其实某种意义上是给自己加分了 我的思路是 2 个人分别存储手牌 不过后来想想，不需要这么麻烦，其实只要一个 set，光加分就够了 代码 使用 multiset 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;set&gt;using namespace std;int main(int argc, char const *argv[])&#123; int n,temp; scanf(&quot;%d&quot;,&amp;n); multiset&lt;int&gt; a,b; long long /*score*/sa=0,sb=0; // need long long for(int i=0;i&lt;n;++i) &#123; scanf(&quot;%d&quot;,&amp;temp); a.insert(temp); &#125; for(int i=0;i&lt;n;++i) &#123; scanf(&quot;%d&quot;,&amp;temp); b.insert(temp); &#125; multiset&lt;int&gt;::iterator ita,itb; // multi int flag; ita = a.end(); --ita; itb = b.end(); --itb; while(1) &#123; // A round: if(*ita&gt;*itb) &#123; sa += *ita; a.erase(ita); if(a.empty()) &#123; flag = 0b00; // round, empty set break; &#125; ita = a.end(); --ita; &#125;else &#123; b.erase(itb); if(b.empty()) &#123; flag = 0b01; break; &#125; itb = b.end(); --itb; &#125; // B round: if(*itb&gt;*ita) &#123; sb += *itb; b.erase(itb); if(b.empty()) &#123; flag = 0b11; break; &#125; itb = b.end(); --itb; &#125;else &#123; a.erase(ita); if(a.empty()) &#123; flag = 0b10; break; &#125; ita = a.end(); --ita; &#125; &#125; switch(flag) &#123; case 0b00: &#123; while(1) &#123; // B round: itb = b.end(); --itb; sb += *itb; b.erase(itb); if(b.empty()) break; // roop condition // A round: itb = b.end(); --itb; b.erase(itb); &#125; break; &#125; case 0b01: &#123; while(1) &#123; // B ita = a.end(); --ita; a.erase(ita); if(a.empty()) break; // A ita = a.end(); --ita; sa += *ita; a.erase(ita); &#125; break; &#125; case 0b10: &#123; while(!b.empty()) &#123; // A itb = b.end(); --itb; b.erase(itb); // B itb = b.end(); --itb; sb += *itb; b.erase(itb); &#125; break; &#125; case 0b11: &#123; while(!a.empty()) &#123; // A ita = a.end(); --ita; sa += *ita; a.erase(ita); // B ita = a.end(); --ita; a.erase(ita); &#125; &#125; break; &#125; printf(&quot;%lld&quot;,sa-sb); return 0;&#125;","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"set","slug":"set","permalink":"http://laclic.github.io/tags/set/"},{"name":"multiset","slug":"multiset","permalink":"http://laclic.github.io/tags/multiset/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"Codeforces-Non-Coprime Partition","slug":"Codeforces-Non-Coprime-Partition","date":"2021-01-29T03:44:01.000Z","updated":"2021-04-01T12:30:02.912Z","comments":true,"path":"2021/01/29/Codeforces-Non-Coprime-Partition/","link":"","permalink":"http://laclic.github.io/2021/01/29/Codeforces-Non-Coprime-Partition/","excerpt":"","text":"题意 给定一个 n，求一种方式，把由 1 到 n 的数分成 A、B 两组，使得 A 之和与 B 之和不互质 思路 存在性问题，只需要求取一种解法即可 对于所有奇数，由于 1 到 n-1 之和为((n-1)*n)/2 == (n-1)/2*n，且 n-1 为偶数，必含因子 n。所以，把 1 到 n-1 丢入一个集合，n 丢到另一个集合 对于 4 的倍数，由于有偶数个奇数（和必为偶数），将所有奇数和偶数分开为两个集合，必定含公约数 2 对于 4 取模为 2 的数，从中间切开，得到 n/2（奇数，n-1 为偶数），前半部分之和(n-1)/2*n 必定含因子 n/2，后半部分之和(n-1)*(n/2)也必定含因子 n/2 代码 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;cstdio&gt;int main(int argc, char const *argv[])&#123; int n; scanf(&quot;%d&quot;,&amp;n); if(n&lt;=2) printf(&quot;No&quot;); else if(n%2==1) &#123; printf(&quot;Yes\\n&quot;); printf(&quot;%d&quot;,n-1); for(int i=1;i&lt;n;++i) &#123; printf(&quot; %d&quot;,i); &#125; printf(&quot;\\n1 %d&quot;,n); &#125;else if(n%4==2)&#123; int mid = n/2; printf(&quot;Yes\\n&quot;); printf(&quot;%d&quot;,mid); for(int i=1;i&lt;=mid;++i) &#123; printf(&quot; %d&quot;,i); &#125; printf(&quot;\\n%d&quot;,mid); for(int i=mid+1;i&lt;=n;++i) &#123; printf(&quot; %d&quot;,i); &#125; &#125;else &#123; printf(&quot;Yes\\n&quot;); printf(&quot;%d&quot;,n/2); for(int i=1;i&lt;=n;i+=2) &#123; printf(&quot; %d&quot;,i); &#125; printf(&quot;\\n%d&quot;,n/2); for(int i=2;i&lt;=n;i+=2) &#123; printf(&quot; %d&quot;,i); &#125; &#125; return 0;&#125;","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"existence","slug":"existence","permalink":"http://laclic.github.io/tags/existence/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"Codeforces-Equality","slug":"Codeforces-Equality","date":"2021-01-29T03:43:53.000Z","updated":"2021-04-01T12:30:02.912Z","comments":true,"path":"2021/01/29/Codeforces-Equality/","link":"","permalink":"http://laclic.github.io/2021/01/29/Codeforces-Equality/","excerpt":"","text":"题意 给定 n 长度字符串，一共有前 k 个字母（大写），求该串中最多有多少个字符使得前 k 个字母的个数相同 思路 给每个字母计数，最小值即为答案 代码 1234567891011121314151617181920#include &lt;cstdio&gt;int main(int argc, char const *argv[])&#123; int n,k; scanf(&quot;%d %d&quot;,&amp;n,&amp;k); int mapp[26] = &#123;0&#125;; char a[n+6]; scanf(&quot;%s&quot;,a); for(int i=0;a[i]!=&#x27;\\0&#x27;;++i) &#123; ++mapp[a[i]-&#x27;A&#x27;]; // &#x27;A&#x27; == 65 &#125; unsigned int min = -1; for(int i=0;i&lt;k;++i) &#123; if(mapp[i]&lt;min) min = mapp[i]; &#125; printf(&quot;%d&quot;,min*k); return 0;&#125;","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"Python dpkt study note","slug":"Python-dpkt-study-note","date":"2021-01-28T12:50:50.000Z","updated":"2021-01-29T08:05:35.715Z","comments":true,"path":"2021/01/28/Python-dpkt-study-note/","link":"","permalink":"http://laclic.github.io/2021/01/28/Python-dpkt-study-note/","excerpt":"","text":"# from: https://blog.csdn.net/javajiawei/article/details/100513267 import sys import os import dpkt def checkIfHTTPRes(data): # 检查是否为HTTP协议 if len(data) &lt; 4: return False if data[:4] == str.encode(&#39;HTTP&#39;): return True return False def httpPacketParser(http): # 分析流 if checkIfHTTPRes(http): # 检查是否为HTTP协议 try: response = dpkt.http.Response(http) # 尝试以HTTP读取响应 print(response.status) except Exception as e: # print(e) pass # else: # print(&quot;Not HTTP&quot;) def tcpPacketParser(tcp): # 获取流 stream = tcp.data if len(stream): httpPacketParser(stream) # 尝试以HTTP分析流 def ipPacketParser(ip): # 获取TCP包 if isinstance(ip.data, dpkt.tcp.TCP): &quot;&quot;&quot;这里也许可以考虑一下加一条来读UDP包？&quot;&quot;&quot; tcpPacketParser(ip.data) # 分析tcp包 def decodePacket(packet): # 解码获取以太网包 eth = dpkt.ethernet.Ethernet(packet) if isinstance(eth.data, dpkt.ip.IP): ipPacketParser(eth.data) # 分析ip包 def pcapReader(filename): # 打开.pcap文件 try: with open(filename, &#39;rb&#39;) as f: capture = dpkt.pcap.Reader(f) i = 1 for timestamp, packet in capture: # 键值对，提取packet进行解码 decodePacket(packet) i += 1 except Exception as e: print(&#39;parse &#123;&#125;, error:&#123;&#125;&#39;.format(filename, e)) if __name__ == &quot;__main__&quot;: if len(sys.argv) &lt; 2: print(&#39;HELP: python &#123;&#125; &lt;PCAP_PATH&gt;&#39;.format(sys.argv[0])) sys.exit(0) # _EXIT_ filename = sys.argv[1] if filename: pcapReader(filename)","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://laclic.github.io/tags/python/"},{"name":"dpkt","slug":"dpkt","permalink":"http://laclic.github.io/tags/dpkt/"},{"name":"network","slug":"network","permalink":"http://laclic.github.io/tags/network/"},{"name":"packet capture","slug":"packet-capture","permalink":"http://laclic.github.io/tags/packet-capture/"}]},{"title":"Codeforces-Stickers and Toys","slug":"Codeforces-Stickers-and-Toys","date":"2021-01-28T05:32:16.000Z","updated":"2021-04-01T12:30:04.133Z","comments":true,"path":"2021/01/28/Codeforces-Stickers-and-Toys/","link":"","permalink":"http://laclic.github.io/2021/01/28/Codeforces-Stickers-and-Toys/","excerpt":"","text":"题意 有 n 个健达奇趣蛋，其中有 s 个贴纸，t 个玩具，每个蛋至多有 1 个贴纸、也至多有 1 个玩具（但可以既有 1 个贴纸又有 1 个玩具）。 问：至少要买几个，才会必定又获得玩具又获得贴纸 思路 s 和 t 取最小值，再寻找最差情况 代码 1234567891011121314151617#include &lt;cstdio&gt;int main(int argc, char const *argv[])&#123; int N; scanf(&quot;%d&quot;,&amp;N); for(;N;--N) &#123; int a,b,c; scanf(&quot;%d %d %d&quot;,&amp;a,&amp;b,&amp;c); int min; if(b&gt;c) min = c; else min = b; printf(&quot;%d\\n&quot;,a+1-min); &#125; return 0;&#125;","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"Codeforces-Letters Shop","slug":"Codeforces-Letters-Shop","date":"2021-01-28T05:32:03.000Z","updated":"2021-04-01T12:30:02.911Z","comments":true,"path":"2021/01/28/Codeforces-Letters-Shop/","link":"","permalink":"http://laclic.github.io/2021/01/28/Codeforces-Letters-Shop/","excerpt":"","text":"题意 先读入一串长字符串，再读入一串短字符串，要求从左开始遍历到所有短字符串所有字母都出现为止（且出现次数亦有要求，短字符串所有字母出现次数小于等于已遍历的长字符串的） 思路 记录所有字母第 x 次出现的位置（不这么做会超时），取最大值 代码 1234567891011121314151617181920212223242526272829303132333435#include &lt;cstdio&gt;char s[200006];char input[200006];int letter[26] = &#123;0&#125;; // &#x27;a&#x27; == 97int mapp[26][200006];int main(int argc, char const *argv[])&#123; int n,m; scanf(&quot;%d&quot;,&amp;n); scanf(&quot;%s&quot;,s); scanf(&quot;%d&quot;,&amp;m); for(int i=0;s[i]!=&#x27;\\0&#x27;;++i) &#123; mapp[s[i]-97][letter[s[i]-97]] = i; ++letter[s[i]-97]; &#125; for(;m;--m) &#123; int max = 0; for(int i=0;i&lt;26;++i) &#123; letter[i] = 0; &#125; scanf(&quot;%s&quot;,input); for(int i=0;input[i]!=&#x27;\\0&#x27;;++i) &#123; int now = mapp[input[i]-97][letter[input[i]-97]]; ++letter[input[i]-97]; if(now&gt;max) max = now; &#125; printf(&quot;%d\\n&quot;,max+1); &#125; return 0;&#125;","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"map","slug":"map","permalink":"http://laclic.github.io/tags/map/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"FZU2021-0x16-哈密顿绕行世界问题","slug":"FZU2021-0x16-哈密顿绕行世界问题","date":"2021-01-27T04:12:35.000Z","updated":"2021-04-01T12:30:04.133Z","comments":true,"path":"2021/01/27/FZU2021-0x16-哈密顿绕行世界问题/","link":"","permalink":"http://laclic.github.io/2021/01/27/FZU2021-0x16-%E5%93%88%E5%AF%86%E9%A1%BF%E7%BB%95%E8%A1%8C%E4%B8%96%E7%95%8C%E9%97%AE%E9%A2%98/","excerpt":"","text":"题意 有一个十二面体（20 个顶点），现在给出这 20 个顶点相邻的顶点，以及起点 m，要求你输出所有（60 种）绕行所有点最后回到 m 点的方案。 思路 一开始以为这题用枚举，大 O 会有 A^20^~20~的量级，后来想想每次只能选&lt;=3 个的路径，对于 20 个点撑死也只有 3^7^*2^7^，完全可以考虑暴力枚举 所以我们用 20*3 大小的数组存储这 20 个点相邻点的数据，并用长度为 20 的数组以 0（没经过）/1（已经过）来记录是否经过，再用一个长度 20 的数组来存储已经被选择的数。 递归到 20 层时（选了 20 个数时），我们进行检查，是否能回到 m 点，如果能，则输出，反之 return。 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include &lt;cstdio&gt;int a[21][3];int status[21] = &#123;0&#125;;int cnt;int chosen[21];inline int check(int now) &#123; // 判断能否返回原点 if(a[chosen[1]][0]==now||a[chosen[1]][1]==now||a[chosen[1]][2]==now) &#123; return 1; &#125; return 0;&#125;void go(int now,int layer) &#123; if(layer==20) &#123; if(check(now))&#123; printf(&quot;%d: &quot;,cnt); for(int i=1;i&lt;=20;++i) &#123; printf(&quot; %d&quot;,chosen[i]); &#125; printf(&quot; %d\\n&quot;,chosen[1]); ++cnt; &#125;else return; &#125;else &#123; // 用for循环也可以，只是觉得只有3次，加之用for还要消耗判断的性能 if(!status[a[now][0]]) &#123; status[a[now][0]] = 1; chosen[layer+1] = a[now][0]; // 因为到layer==20的时候不会进else，所以不必担心数组溢出 go(a[now][0],layer+1); status[a[now][0]] = 0; &#125; if(!status[a[now][1]]) &#123; status[a[now][1]] = 1; chosen[layer+1] = a[now][1]; go(a[now][1],layer+1); status[a[now][1]] = 0; &#125; if(!status[a[now][2]]) &#123; status[a[now][2]] = 1; chosen[layer+1] = a[now][2]; go(a[now][2],layer+1); status[a[now][2]] = 0; &#125; &#125;&#125;int main(int argc, char const *argv[])&#123; for(int i=1;i&lt;=20;++i) &#123; for(int j=0;j&lt;3;++j) &#123; scanf(&quot;%d&quot;,&amp;a[i][j]); &#125; &#125; int m; while(1) &#123; cnt = 1; scanf(&quot;%d&quot;,&amp;m); if(m==0) break; status[m] = 1; chosen[1] = m; go(m,1); status[m] = 0; &#125; return 0;&#125;","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"search","slug":"search","permalink":"http://laclic.github.io/tags/search/"},{"name":"recursion","slug":"recursion","permalink":"http://laclic.github.io/tags/recursion/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"FZU2021-0x15-迷宫问题","slug":"FZU2021-0x15-迷宫问题","date":"2021-01-26T10:34:05.000Z","updated":"2021-03-22T07:16:53.264Z","comments":true,"path":"2021/01/26/FZU2021-0x15-迷宫问题/","link":"","permalink":"http://laclic.github.io/2021/01/26/FZU2021-0x15-%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/","excerpt":"","text":"题意 有一个迷宫，要求你从坐标(0,0)走到(4,4)，其中1的地方是墙壁，不能通行，这个迷宫保证有唯一解 思路 注意，是可以往上和左走的，只要不原路返回即可 采用外面围一圈墙壁的方法，省去很多判断溢出的麻烦 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#define MAX 7#define LEN 5#define START 0#define RIGHT 1#define DOWN 2#define LEFT 3#define UP 4int a[MAX][MAX];typedef struct _pos &#123; int x; int y;&#125;Pos;Pos chosen[25]; // 存储已经过的路程inline void go(int x,int y,int layer,int went) &#123; if(x==5&amp;&amp;y==5) &#123; if(0&lt;layer) &#123; printf(&quot;(%d, %d)&quot;,chosen[0].x-1,chosen[0].y-1); &#125; for(int i=1;i&lt;layer;++i) &#123; printf(&quot;\\n(%d, %d)&quot;,chosen[i].x-1,chosen[i].y-1); &#125; exit(0); &#125;else &#123; if(!a[x+1][y]&amp;&amp;went!=UP) &#123; chosen[layer].x = x+1; // 直接覆写即可 chosen[layer].y = y; go(x+1,y,layer+1,DOWN);// went参数用来记录这一步是向什么方向走的 &#125; if(!a[x][y+1]&amp;&amp;went!=LEFT) &#123; chosen[layer].x = x; chosen[layer].y = y+1; go(x,y+1,layer+1,RIGHT); &#125; if(!a[x-1][y]&amp;&amp;went!=DOWN) &#123; chosen[layer].x = x+1; chosen[layer].y = y; go(x+1,y,layer+1,UP); &#125; if(!a[x][y-1]&amp;&amp;went!=RIGHT) &#123; chosen[layer].x = x+1; chosen[layer].y = y; go(x+1,y,layer+1,LEFT); &#125; &#125;&#125;int main(int argc, char const *argv[])&#123; for(int i=0;i&lt;MAX;++i) &#123; for(int j=0;j&lt;MAX;++j) &#123; a[i][j] = 1; &#125; &#125; for(int i=1;i&lt;=LEN;++i) &#123; for(int j=1;j&lt;=LEN;++j) &#123; scanf(&quot;%d&quot;,&amp;a[i][j]); &#125; &#125; Pos now; chosen[0].x = 1; chosen[0].y = 1; go(1,1,1,START); return 0;&#125;","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"search","slug":"search","permalink":"http://laclic.github.io/tags/search/"},{"name":"recursion","slug":"recursion","permalink":"http://laclic.github.io/tags/recursion/"}]},{"title":"Python 小教程（带作业）","slug":"Python-小教程（带作业）","date":"2021-01-25T14:30:45.000Z","updated":"2021-01-26T02:44:32.913Z","comments":true,"path":"2021/01/25/Python-小教程（带作业）/","link":"","permalink":"http://laclic.github.io/2021/01/25/Python-%E5%B0%8F%E6%95%99%E7%A8%8B%EF%BC%88%E5%B8%A6%E4%BD%9C%E4%B8%9A%EF%BC%89/","excerpt":"","text":"整篇教程不会让你做出人工智能来，但是可以帮助你认识python的整个框架流程与常用函数 安装 python 解释器推荐：西二python冬令营总群里的第零轮考核pdf 安装 IDE/编辑器vscode 轻便，首推！免费！vscode下载链接。戳我！ 安装教程戳我！ pycharm 好用！功能齐全！适合小白！大学生免费！（安装较为麻烦，视网络环境可能需要翻墙）pycharm下载链接。戳我！ 安装教程戳我！ 学生资格获取免费使用戳我！ 教程推荐这个教程东西讲的有点深了，不过是最全面的，遇到不会的其实可以粗略标记一下（比如把链接复制到备忘录之后看） 不要吊死在一颗树上！不要觉得教程非得看懂。看不懂就继续往后看，只要能解决之后发出的作业就好了！ 善用搜索引擎百度等，只要能做出作业来，看什么都无所谓！ 推荐廖雪峰python教程←从这里开始 需要学习的东西有里面很多作业都是抄我之前做的考核的 善用百度，遇到问题查百度比看教程快多了数据的输入与输出作业零：输出 hello world! 过程性编程（顺序、条件、循环三种语句结构）作业一：输⼊⼀个年份，判断该年份是否为闰年，是则输出yes，否则输出no。 字符串的处理作业二：输⼊⼀个字符串，判断字符串中是否含有”w2ol”这个⼦串，是则输出yes，否则输出no，并把”fzu”插⼊到”ol”后⾯，然后输出整个字符串。 元组()、列表[]、字典{}的使用作业三：声明⼀个列表（list），列表中含有字符串和整数，删除其中的字符串元素，然后把剩下的整数累加，输出结果。 作业四：声明⼀个字典（dict），获取5行输入，要求能储存5种信息：年、月、日、标题、作者。 函数的使用作业五：写⼀个判断素数的函数，然后输出1-100内的素数。 初阶面向对象编程（类、类成员、类方法、类的初始化/构造函数）作业六：设计⼀个学⽣类，它具有的私有数据成员是学号、姓名、数学、外语、计算机课程的成绩。具有的公有成员函数是：求三⻔课总成绩的函数sum，求三⻔课平均成绩的函数average，显示学⽣数据信息的函数display，设置学⽣数据信息的函数setdata。 到此为止，你已经对python有个全面的认识了，以下是偏进阶的部分，学到这里，你已经具备了一定的自学能力。后面就只有一份作业了，涉及到的点也不全。其实各种功能，只要你自己测试测试就好了。 模块引入(import)进阶面向对象编程（私有变量、私有方法）高阶面向对象编程（类的继承、类的魔术方法）错误处理(try/except)构造一个字符串，读取输入，要求总是输出字符串的第十个字符 接下来，再次运行程序，输入一个长度小于十的字符串，要求输出你有问题，小老弟！ 错误调试这个自己看看就好，平常不太用得上 格式化数据文件读写(open)写一个程序，将圆周率Π/pi（小数点后前十位）输出至文件(pi.txt)中 再写另一个程序，读取文件（pi.txt），并输出到屏幕（命令行）上 进阶总作业一、实现⼀个装饰器，在开始执⾏函数时会输出正在执⾏的函数的名称，如“into functionfunction_name”，在函数执⾏结束时，会提示退出函数及函数的运⾏时间， 如”functionfunction_name finished， usisng 0.234ms” 二、了解类的魔术⽅法。创建类“MagicMethodLearning”，其具有如下功能： 1234567891011121314151617具有数据成员data，其类型为⼀个字典（dict）在创建类对应的对象时，会输出“created a new obj of class MagicMethodLearning”在创建类对象时，可以传⼊⼀个可选的“init_data”参数， 传⼊的“init_data”为字典类型，将init_data的值作为数据成员data的初始值，若⽆传⼊init_data，则数据成员data的初始值为空字典在对类对象调⽤ len() 函数时，会返回数据成员data的⻓度在对类对象进⾏索引时，会返回对数据成员data的索引在访问类对象的属性时（如 obj.attribute_name ），会返回数据成员data的索引（ data[attribute_bname] ）在调⽤类对象时，输出数据成员data的值在对类对象调⽤ bool() 函数时，若数据成员data为空字典，则返回false，否则返回true上述⼏个功能尽量全部完成，当然类的魔术⽅法远远不⽌这些，仅仅让⼤家了解⼀下有这样⼀个东⻄，其他的魔术⽅法请⾃⾏了解 到此为止，已经基本学会了python的自带的特性/函数。如果还有兴趣，可以看看网络编程（爬虫等），再往后面写接口、做人工智能什么的，我也不会了。","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://laclic.github.io/tags/python/"}]},{"title":"Codeforces-Chunga-Changa","slug":"Codeforces-Chunga-Changa","date":"2021-01-25T06:48:27.000Z","updated":"2021-01-25T07:11:36.276Z","comments":true,"path":"2021/01/25/Codeforces-Chunga-Changa/","link":"","permalink":"http://laclic.github.io/2021/01/25/Codeforces-Chunga-Changa/","excerpt":"","text":"题意有2个小女孩去买椰子，手上分别有x元，y元，一个椰子要z元。 她们可以合起来买，但此时就要让一个人给另一个一些钱。 问：她们合起来最多买几个？最少要让一个人给另一个人多少钱？ 思路两个人先分开买，剩下的钱再合并到一起买，分别计算二人还需要多少钱才能买得起最后一个，取最小值 如果买不起就为0（不给钱） 代码（python）不能用int强制转换，只能用//整除。为什么呢？求dalao告知，感激不尽！（邮箱&#x65;&#52;&#49;&#113;&#101;&#52;&#64;&#49;&#50;&#54;&#x2e;&#99;&#x6f;&#x6d;，麻烦注明一下是从这题来的，thx~） 1234567891011121314151617181920212223242526xyz = input(&quot;&quot;).split(&quot; &quot;)x = int(xyz[0])y = int(xyz[1])z = int(xyz[2])total = 0# get how many coconuts one person can buytotal += x//z # total += int(x/z) #x %= ztotal += y//z # total += int(y/z) #y %= z&quot;&quot;&quot;If you replace things in ##, you will get WA.WHY was that? I don&#x27;t know.&quot;&quot;&quot;exchange = 0left = 0if x+y &gt;= z: total += 1 if z-x &gt; z-y: exchange = (z-y) % z else: exchange = (z-x) % zprint(f&quot;&#123;total&#125; &#123;exchange&#125;&quot;, end=&#x27;&#x27;)","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://laclic.github.io/tags/python/"},{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"Problem Remains","slug":"Problem-Remains","permalink":"http://laclic.github.io/tags/Problem-Remains/"},{"name":"big(高精度)","slug":"big-高精度","permalink":"http://laclic.github.io/tags/big-%E9%AB%98%E7%B2%BE%E5%BA%A6/"}]},{"title":"FZU2021-0x13-棋盘问题","slug":"FZU2021-0x13-棋盘问题","date":"2021-01-25T06:46:52.000Z","updated":"2021-04-01T12:30:04.134Z","comments":true,"path":"2021/01/25/FZU2021-0x13-棋盘问题/","link":"","permalink":"http://laclic.github.io/2021/01/25/FZU2021-0x13-%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98/","excerpt":"","text":"组合问题，暴力枚举 题意 有个 N*N 的棋盘，里面有一定位置可以放棋子（为#的地方），现在有 k 个棋子。 问：有多少种摆放方式，使得每个棋子都被放下，每个棋子所在行列不能有其他棋子（且每一行/每一列至多只有一个棋子） 思路 用将所有#所在位置信息记录（在 posX 和 posY），模拟键值对，并且每行/每列都加上状态信息（statusX 和 statusY；其中，0:为没旗子，可放棋子；1:代表该行/列已有棋子，不能放其他棋子了）。 小技巧 当剩余棋子数不足（i&lt;=max）以供剩下棋子放置时，提前退出递归，以减少计算量。 代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#include &lt;cstdio&gt;char a[8][8];int statusX[8]=&#123;0&#125;,statusY[8]=&#123;0&#125;;int posX[66],posY[66];int cnt,k,ans;void recur(int now,int layer) &#123; if(layer==k) &#123; ++ans; &#125;else &#123; int max = cnt - k + layer; for(int i=now+1;i&lt;=max;++i) &#123; if(!statusX[posX[i]]&amp;&amp;!statusY[posY[i]]) &#123; statusX[posX[i]] = 1; statusY[posY[i]] = 1; recur(i,layer+1); statusX[posX[i]] = 0; statusY[posY[i]] = 0; &#125; &#125; &#125;&#125;int main(int argc, char const *argv[])&#123; int n; while(1) &#123; int mouse = 0; ans = 0; cnt = 0; scanf(&quot;%d %d&quot;,&amp;n,&amp;k); if(n==-1&amp;&amp;k==-1) break; for(int i=0;i&lt;n;++i) &#123; getchar(); for(int j=0;j&lt;n;++j) &#123; scanf(&quot;%c&quot;,&amp;a[i][j]); if(a[i][j]==&#x27;#&#x27;) &#123; posX[mouse] = i; posY[mouse] = j; ++mouse; ++cnt; &#125; &#125; &#125; --k; int max = cnt-k; for(int i=0;i&lt;max;++i) &#123; statusX[posX[i]] = 1; statusY[posY[i]] = 1; recur(i,0); statusX[posX[i]] = 0; statusY[posY[i]] = 0; &#125; printf(&quot;%d\\n&quot;,ans); &#125; return 0;&#125;/*2 1#..#4 4...#..#..#..#...-1 -1*/","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"search","slug":"search","permalink":"http://laclic.github.io/tags/search/"},{"name":"recursion","slug":"recursion","permalink":"http://laclic.github.io/tags/recursion/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"Linux 下运行 C/C++ 与 Python 代码","slug":"Linux-下运行-C-C-与-Python-代码","date":"2021-01-25T04:08:36.000Z","updated":"2021-04-01T12:30:04.133Z","comments":true,"path":"2021/01/25/Linux-下运行-C-C-与-Python-代码/","link":"","permalink":"http://laclic.github.io/2021/01/25/Linux-%E4%B8%8B%E8%BF%90%E8%A1%8C-C-C-%E4%B8%8E-Python-%E4%BB%A3%E7%A0%81/","excerpt":"","text":"本篇使用的是 ubuntu 发行版 gcc/g++ 编译运行 C/C++ 代码 安装编译器 先建立并进入文件夹 1234mkdir programmecd programme&#x2F;mkdir ccd c&#x2F; 输入gcc --version检查是否安装 gcc（ubuntu20.04 版本是默认自带安装的） 若显示： 1234gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0Copyright (C) 2019 Free Software Foundation, Inc.This is free software; see the source for copying conditions. There is NOwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 表示已安装，没有的话输入如下命令通过 apt（ubuntu/debian）安装（centOS 用 yum, manjaro/Arch 用 pacman）： 1sudo apt install build-essential 一次性安装 gcc, g++, make，安装后同样输入gcc --version检查是否成功安装 gcc，若成功回显版本信息，则成功安装 写出你的 Hello world! 这里使用vim编辑器（当然你要是喜欢vi或者nano还有gedit编辑器也不是不可以） 输入vim test.c，进入 vim 编辑器界面，小写状态下按下 i 键进入insert模式，输入如下代码 123456#include &lt;stdio.h&gt;int main() &#123; printf(&quot;Hello world!\\n&quot;); return 0;&#125; 输入后，按下esc，输入:wq并enter以写入并退出 用gcc test.c -o test.o进行编译并生成可执行文件 test.o（如果是 c++则用g++命令） 用./test.o运行可执行文件 12root@LacLic-S-LaPToP:~&#x2F;programme&#x2F;c# .&#x2F;test.oHello world! 至此，C/C++编译器配置完成（make 是用来编译安装软件的，这里不作演示了） python3 运行 python 代码 安装 python3 先创建并进入 python 文件夹 123cd ~&#x2F;programme&#x2F;mkdir pythoncd python&#x2F; 通过输入命令python3或python3 --version查看版本，如果你使用python3，则会进入 python 交互式编程，在这里可以输入print(&quot;hello world&quot;)来输出hello world 输入exit()或按下ctrl+Z来退出交互式编程界面 1234567root@LacLic-S-LaPToP:~&#x2F;programme&#x2F;python# python3Python 3.8.2 (default, Jul 16 2020, 14:00:26)[GCC 9.3.0] on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; print(&quot;hello world&quot;)hello world&gt;&gt;&gt; exit() 12root@LacLic-S-LaPToP:~&#x2F;programme&#x2F;python# python3 --versionPython 3.8.2 如果没有安装 python3，推荐使用sudo apt install python3快速安装 python3 或者，可以用wget下载 linux 下安装包，通过make编译安装，并自行添加环境变量和建立 pip 与 python 的软链 之后，同样通过输入命令python3或python3 --version查看版本，就不过多赘述 执行 python 代码文件 通过echo快速建立test.py文件并写入 12echo &quot;print(&#39;\\n&#39;.join([&#39;&#39;.join([(&#39;ZhangDong&#39;[(x-y)%9]if((x*0.05)**2+(y*0.1)**2-1)**3-(x*0.05)**2*(y*0.1)**3&lt;&#x3D;0 else&#39; &#39;)for x in range(-30,30)])for y in range(15,-15,-1)])) # 一个大大的爱心，该版本为python3.x，若为python2.x版本请去掉最外层的括号&quot; &gt; test.pypython3 test.py 然后通过python3 test.py来执行代码 12345678910111213141516171819202122232425262728293031python3 test.py hangDongZ ngDongZha ngZhangDongZhangD ZhangDongZhangDon ongZhangDongZhangDongZhangDongZhangDongZh ongZhangDongZhangDongZhangDongZhangDongZhan ongZhangDongZhangDongZhangDongZhangDongZhangD ngZhangDongZhangDongZhangDongZhangDongZhangDo gZhangDongZhangDongZhangDongZhangDongZhangDon ZhangDongZhangDongZhangDongZhangDongZhangDong hangDongZhangDongZhangDongZhangDongZhangDongZ angDongZhangDongZhangDongZhangDongZhangDongZh gDongZhangDongZhangDongZhangDongZhangDongZh ongZhangDongZhangDongZhangDongZhangDongZh ngZhangDongZhangDongZhangDongZhangDongZha hangDongZhangDongZhangDongZhangDongZh ngDongZhangDongZhangDongZhangDongZh DongZhangDongZhangDongZhangDongZh gZhangDongZhangDongZhangDongZ angDongZhangDongZhangDong DongZhangDongZhangDon ZhangDongZhangD gDongZhan gZh h 当然你也可以和写入 c 文件一样，使用文本编辑器来写代码","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://laclic.github.io/tags/python/"},{"name":"linux","slug":"linux","permalink":"http://laclic.github.io/tags/linux/"},{"name":"c","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"Codeforces-Ropewalkers","slug":"Codeforces-Ropewalkers","date":"2021-01-24T03:52:11.000Z","updated":"2021-03-22T07:16:53.265Z","comments":true,"path":"2021/01/24/Codeforces-Ropewalkers/","link":"","permalink":"http://laclic.github.io/2021/01/24/Codeforces-Ropewalkers/","excerpt":"","text":"题意：有3个人分别在一条平直的绳子（数轴）上的a,b,c处，3个人中，每秒只有一个人能移动，而且他/她/它(?)每次只能移动一格。问：经过多少秒，他们两两间距才会不小于d？ 12345678910111213141516171819202122232425262728293031// 让靠两边的人往外走即可#include &lt;cstdio&gt;inline void swap(int&amp; a,int&amp; b) &#123; a^=b^=a^=b;&#125;void sort(int&amp; min,int&amp; mid,int&amp; max) &#123; if(min&gt;mid) swap(min,mid); if(min&gt;max) swap(min,max); if(mid&gt;max) swap(mid,max);&#125;int main(int argc, char const *argv[])&#123; // 2,141,783,647 // 1,000,000,000 int a,b,c,d; long long ans=0; // maybe no need to use long long scanf(&quot;%d %d %d %d&quot;,&amp;a,&amp;b,&amp;c,&amp;d); sort(a,b,c); // now, a==min, b==mid, c==max int Dab = b-a, Dbc = c-b; // distance of a,b; distance of c,b if(Dab&lt;d) ans += d - Dab; if(Dbc&lt;d) ans += d - Dbc; printf(&quot;%lld&quot;,ans); return 0;&#125;","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"sort","slug":"sort","permalink":"http://laclic.github.io/tags/sort/"}]},{"title":"Codeforces-Email from Polycarp","slug":"Codeforces-Email-from-Polycarp","date":"2021-01-24T03:51:51.000Z","updated":"2021-03-22T07:16:53.236Z","comments":true,"path":"2021/01/24/Codeforces-Email-from-Polycarp/","link":"","permalink":"http://laclic.github.io/2021/01/24/Codeforces-Email-from-Polycarp/","excerpt":"","text":"字符串问题 题意：有一个键盘，打字的时候会失控，同一个字符打很多个出来，比如hello会打成heeeellllooo（YES情况），但是不会打成hell或者helo（NO情况）。输入给出了原文和失控后的文本，需要判断，失控后文本是否符合YES情况 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647// 逐字判断 --若字不同--&gt; 判断重复 --变为相同--&gt; 继续逐字判断 ----都到底了----&gt; YES!// --还是不同--&gt; NO！ --另一个没到底--&gt; NO!#include &lt;cstdio&gt;// #include &lt;iostream&gt;// using namespace std;char origin[1000006];char input[1000006];int main(int argc, char const *argv[])&#123; int n; scanf(&quot;%d&quot;,&amp;n); int mouse1, mouse2; for(;n;--n) &#123; int isTrue = 1; mouse1 = 0; mouse2 = 0; scanf(&quot;%s&quot;,origin); scanf(&quot;%s&quot;,input); while(origin[mouse1]!=&#x27;\\0&#x27;) &#123; if(origin[mouse1]==input[mouse2]) &#123; ++mouse1; ++mouse2; &#125;else &#123; if(mouse2&lt;1||input[mouse2-1]!=input[mouse2]) &#123; break; &#125; while(input[mouse2-1]==input[mouse2]) &#123; ++mouse2; &#125; &#125; if(origin[mouse1]!=&#x27;\\0&#x27;) printf(&quot;NO\\n&quot;); else &#123; while(origin[mouse1-1]==input[mouse2]) &#123; ++mouse2; &#125; if(input[mouse2]==&#x27;\\0&#x27;) printf(&quot;YES\\n&quot;); else printf(&quot;NO\\n&quot;); &#125; &#125; return 0;&#125;","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"string","slug":"string","permalink":"http://laclic.github.io/tags/string/"}]},{"title":"Codeforces-Finding Sasuke","slug":"Codeforces-Finding-Sasuke","date":"2021-01-23T11:26:25.000Z","updated":"2021-03-22T07:16:53.236Z","comments":true,"path":"2021/01/23/Codeforces-Finding-Sasuke/","link":"","permalink":"http://laclic.github.io/2021/01/23/Codeforces-Finding-Sasuke/","excerpt":"","text":"思路 存在性问题，只要找到一个通解即可 我们选取每一对（2个）数，取相反数后交换位置 相乘后必为0 e.g. there is A(a1) and B(a2), AB+B(-A) == 0, just let b1 = B, b2 = -A. 代码 123456789101112131415161718192021#include &lt;cstdio&gt;int main(int argc, char const *argv[])&#123; int T,n; scanf(&quot;%d&quot;,&amp;T); for(;T;--T) &#123; scanf(&quot;%d&quot;,&amp;n); int temp1,temp2; for(int i=0;i&lt;n;i+=2) &#123; scanf(&quot;%d&quot;,&amp;temp1); scanf(&quot;%d&quot;,&amp;temp2); printf(&quot;%d &quot;,-temp2); printf(&quot;%d &quot;,temp1); &#125; printf(&quot;\\n&quot;); &#125; return 0;&#125;","categories":[],"tags":[{"name":"existence problem","slug":"existence-problem","permalink":"http://laclic.github.io/tags/existence-problem/"},{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"}]},{"title":"FZU2021-0x12-Prime Ring Problem","slug":"FZU2021-0x12-Prime-Ring-Problem","date":"2021-01-23T11:25:53.000Z","updated":"2021-03-22T07:16:53.264Z","comments":true,"path":"2021/01/23/FZU2021-0x12-Prime-Ring-Problem/","link":"","permalink":"http://laclic.github.io/2021/01/23/FZU2021-0x12-Prime-Ring-Problem/","excerpt":"","text":"Just do what the problem tell you to do. Take care of the format (I got a presentation error). 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263// brute force#include &lt;cstdio&gt;int status[23]; // to node whether a num is chosenint chosen[23];int n;int isPrime(int x) &#123; // prime table since the max of sum is 20+19=39 switch (x) &#123; case 2: case 3: case 5: case 7: case 11: case 13: case 17: case 19: case 23: case 29: case 31: case 37: case 41: return 1; default: return 0; &#125;&#125;void recur(const int&amp; now,const int&amp; layer) &#123; // recur is the abbr of &quot;recursion&quot; chosen[layer] = now; // just over-write it! if(layer==n) &#123; if(!isPrime(now+1)) return; // check whether the sum of 1st and last is prime printf(&quot;1&quot;); // print the first for(int i=2;i&lt;=n;++i) &#123; printf(&quot; %d&quot;,chosen[i]); &#125; printf(&quot;\\n&quot;); &#125;else &#123; for(int i=2;1;++i) &#123; for(;!status[i];++i); // skip chosen nums (whose status is 0) if(i&gt;n) break; // roop condition if(!isPrime(now+i)) continue; status[i] = 0; recur(i,layer+1); status[i] = 1; // restore the origin stage &#125; &#125;&#125;int main(int argc, char const *argv[])&#123; for(int i=1;i&lt;=23;++i) &#123; status[i] = 1; &#125; int case_count = 0; while(scanf(&quot;%d&quot;,&amp;n)!=EOF) &#123; ++case_count; printf(&quot;Case %d:\\n&quot;,case_count); recur(1,1); printf(&quot;\\n&quot;); &#125; return 0;&#125;","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"search","slug":"search","permalink":"http://laclic.github.io/tags/search/"},{"name":"brute force","slug":"brute-force","permalink":"http://laclic.github.io/tags/brute-force/"},{"name":"format","slug":"format","permalink":"http://laclic.github.io/tags/format/"}]},{"title":"FZU2021-0x11-Lake Counting","slug":"FZU2021-0x11-Lake-Counting","date":"2021-01-23T11:25:05.000Z","updated":"2021-03-22T07:16:53.264Z","comments":true,"path":"2021/01/23/FZU2021-0x11-Lake-Counting/","link":"","permalink":"http://laclic.github.io/2021/01/23/FZU2021-0x11-Lake-Counting/","excerpt":"","text":"idea： Just read the input, then fill the water(‘W’) with land(‘.’) one by one, the count of filling water times is the answer. 小 心 换 行 符 Be care of line-breaker code： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include &lt;cstdio&gt;/*10 12....W....WW..WWW.....WWW....WW...WW..........WW..........W....W......W...W.W.....WW.W.W.W.....W..W.W......W...W.......W.*/char a[106][106];const char b[8][2] = &#123;&#123;-1,-1&#125;,&#123;-1,0&#125;,&#123;-1,1&#125;,&#123;0,-1&#125;,&#123;0,1&#125;,&#123;1,-1&#125;,&#123;1,0&#125;,&#123;1,1&#125;&#125;;inline int fill(int x,int y) &#123; a[x][y] = &#x27;.&#x27;; for(int i=0;i&lt;8;++i) &#123; if(a[x+b[i][0]][y+b[i][1]]==&#x27;W&#x27;) &#123; fill(x+b[i][0],y+b[i][1]); &#125; &#125; return 1;&#125;int main(int argc, char const *argv[])&#123; int cnt=0; int N,M; scanf(&quot;%d %d&quot;,&amp;N,&amp;M); int M1 = M+1,N1 = N+1; int min = M&gt;N?N:M; for(int i=0;i&lt;=min;++i) &#123; a[i][0] = &#x27;.&#x27;; a[i][M1] = &#x27;.&#x27;; a[0][i] = &#x27;.&#x27;; a[N1][i] = &#x27;.&#x27;; &#125; for(int i=min+1;i&lt;=M;++i) &#123; a[0][i] = &#x27;.&#x27;; a[N1][i] = &#x27;.&#x27;; &#125; for(int i=min+1;i&lt;=N;++i) &#123; a[i][0] = &#x27;.&#x27;; a[i][M1] = &#x27;.&#x27;; &#125; a[N1][M1] = &#x27;.&#x27;; for(int i=1;i&lt;=N;++i) &#123; getchar(); // &lt;--- 读取换行符，刷新输入流 for(int j=1;j&lt;=M;++j) &#123; scanf(&quot;%c&quot;,&amp;a[i][j]); &#125; &#125; for(int i=1;i&lt;=N;++i) &#123; for(int j=1;j&lt;=M;++j) &#123; if(a[i][j]==&#x27;W&#x27;) cnt += fill(i,j); &#125; &#125; printf(&quot;%d&quot;,cnt); return 0;&#125;","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"search","slug":"search","permalink":"http://laclic.github.io/tags/search/"}]},{"title":"搭建vnt-chain开发测试网络（小白版）","slug":"搭建vnt-chain开发测试网络（小白版）","date":"2021-01-22T05:27:10.000Z","updated":"2021-01-22T11:54:39.894Z","comments":true,"path":"2021/01/22/搭建vnt-chain开发测试网络（小白版）/","link":"","permalink":"http://laclic.github.io/2021/01/22/%E6%90%AD%E5%BB%BAvnt-chain%E5%BC%80%E5%8F%91%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%EF%BC%88%E5%B0%8F%E7%99%BD%E7%89%88%EF%BC%89/","excerpt":"","text":"原文有些地方没讲清楚，有些坑不好绕（比如golang环境配置，gvnt环境变量添加等，这些都没讲，而且由于用的人少，百度谷歌都搜不到，我拉了一整个目录下来去找才知道gvnt怎么装），所以这边重新整理归纳一遍。 环境安装这个原文里完全没有这个步骤，百度也搜不到，找了好久 安装golang环境首先查看是否安装了golang环境 1&gt; go version 如果显示 1go version go1.13.8 linux/amd64 &lt;--- 如果有这句话，则说明你已经安装了golang，这步可以跳过啦~（不过可能要注意一下版本问题） 如果是 1234Command &#x27;go&#x27; not found, but can be installed with:apt install golang-go # version 2:1.13~1ubuntu2, orapt install gccgo-go # version 2:1.13~1ubuntu2 那我们进入下面的步骤手动安装： 1234# 创建文件夹并下载压缩包：mkdir golangcd golangwget https://golang.google.cn/dl/go1.15.7.linux-amd64.tar.gz 等待安装包下载完毕（是国内镜像，应该挺快） 解压 1tar -C /usr/local -zxvf go1.15.7.linux-amd64.tar.gz 将golang添加至环境变量先用vim编辑器打开环境变量文件vim /etc/profile大写状态下按下 L 将光标转移至最末尾小写状态下按下 i 进入插入模式在最后新建几行，添加 123export GOROOT=/usr/local/goexport GOPATH=/usr/local/go/bin/goexport PATH=$PATH:$GOROOT/bin 然后按esc，输入:wq，回车，写入并退出 接下来输入source /etc/profile重新载入一下 或者 用管理员身份打开powershell重启wsl 12net stop LxssManagernet start LxssManager 或者reboot重启虚拟机（wsl是无法重启的，只能用powershell关开） 然后go version检查一下是否安装并配置成功 12root@LacLic-S-LaPToP:~&#x2F;testnet# go versiongo version go1.13.8 linux&#x2F;amd64 &lt;--- 表示golang安装成功 安装go-vnt（gvnt）12mkdir -p &#x2F;src&#x2F;github.com&#x2F;vntchain&#x2F;cd &#x2F;src&#x2F;github.com&#x2F;vntchain&#x2F; 然后git clone https://github.com/vntchain/go-vnt克隆仓库 如果慢的话可以试试我拉取到gitee上的镜像 git clone https://gitee.com/LacLic/go-vnt 1cd go-vnt 如果有以前的版本，请更新到最新: git pull 然后，使用命令编译gvnt: make gvnt 或者使用命令编译gvnt和所有工具: make all 编译完成后，进入gvnt的bin文件夹 cd /src/github.com/vntchain/go-vnt/build/bin/ 运行gvnt./gvnt version，查看版本 1234567891011WARN [01-22|12:14:39] Sanitizing cache to Go&#x27;s GC limits provided=1024 updated=662GvntVersion: 0.6.4Git Commit: 298e779f11a2cab8da88ec9afaae756cf297463bArchitecture: amd64Protocol Versions: [63 62]Network Id: 1Go Version: go1.15.7Operating System: linuxGOPATH=/usr/local/go/bin/goGOROOT=/usr/local/go 至此，gvnt安装完成，我们将其添加至环境变量 老办法，vim /etc/profile打开环境变量配置文件，在最后添加一句 1export PATH=$PATH:/src/github.com/vntchain/go-vnt/build/bin 保存退出，忘了vim编辑器怎么用的话，回到上面再看一下，这里不再赘述（如果会用nano编辑器的话其实用nano也没问题） 接下来输入source /etc/profile重新载入一下 或者 用管理员身份打开powershell重启wsl 12net stop LxssManagernet start LxssManager 或者reboot重启虚拟机 此时运行gvnt version 同样回显了版本信息，至此，gvnt环境变量配置成功 搭建开发测试网络这里就和原文差不多了，只是集成一下命令，另外提醒一下注意的点 创建4个初始见证人的账号123cd ~mkdir testnetcd testnet 通过gvnt account new --datadir node0，建立node0节点，可以不用输入密码（直接按两下回车） 12345INFO [12-16|14:47:13] Maximum peer count VNT=25 LES=0 total=25Your new account is locked with a password. Please give a password. Do not forget this password.Passphrase:Repeat passphrase:Address: &#123;&quot;node0的address，先记录下来，后面有用&quot;&#125; 同理，现在请你再建立3个节点 123gvnt account new --datadir node1gvnt account new --datadir node2gvnt account new --datadir node3 输入tree .检查文件目录，大概是这样子的 12345678910111213.├── node0│ └── keystore│ └── UTC--2021-01-22T04-30-41.086197018Z--(这里是node0的地址)├── node1│ └── keystore│ └── UTC--2021-01-22T04-30-57.796677093Z--(这里是node1的地址)├── node2│ └── keystore│ └── UTC--2021-01-22T04-31-03.028884008Z--(这里是node2的地址)└── node3 └── keystore └── UTC--2021-01-22T04-31-07.940695653Z--(这里是node3的地址) 现在请要生成每个节点的p2p地址，我们分别分配端口号12340~12343gvnt --datadir node0 --port 12340 console启动后，输入admin.nodeInfo.vnode查看node0的p2p地址 12345&#x2F;&#x2F; 省略很多输出&gt; admin.nodeInfo.vnode ← 这是你的控制台输入&quot;&#x2F;ip4&#x2F;127.0.0.1&#x2F;tcp&#x2F;12340&#x2F;ipfs&#x2F;(一串字符))&quot;~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~这就是node0的p2p地址，请自行记录下来（不是记录这上面的），要记录你自己的机器上的 然后按ctrl+D退出 这时候node0目录下多了很多文件ls node0 12➜ ls node0gvnt history keystore vntdb vntdb文件夹下面保存了p2p地址，由于node0的p2p地址比较重要，我们需要将其备份cp node0/vntdb node0/vntdb.bk -r 其他三个如法炮制，用下面的命令分别启动后，控制台输入admin.nodeInfo.vnode获取p2p地址 123gvnt --datadir node1 --port 12341 consolegvnt --datadir node2 --port 12342 consolegvnt --datadir node3 --port 12343 console 接下来，移除节点0的临时数据gvnt目录: 1rm -rf node0&#x2F;gvnt 另外还要清理节点1，2，3的临时数据，否则使用配置文件初始化节点时会失败。 123rm -rf node1&#x2F;gvntrm -rf node2&#x2F;gvntrm -rf node3&#x2F;gvnt 创建创世块配置文件dpos.json我们可以直接直接拿仓库中的模板过来改 先把东西复制过来cp /src/github.com/vntchain/go-vnt/genesis_dpos.json dpos.json 然后vim dpos.json开始编辑文件，总共有8个地方需要改，已经全部用（括号形式）和 &lt;— here 标注 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&#123; &quot;config&quot;: &#123; &quot;chainId&quot;: 1012, &quot;dpos&quot;: &#123; &quot;period&quot;: 2, &quot;witnessesNum&quot;: 4, &quot;witnessesUrl&quot;: [ &quot;（node0的p2p地址）&quot;, &lt;--- here1 &quot;（node1的p2p地址）&quot;, &lt;--- here2 &quot;（node2的p2p地址）&quot;, &lt;--- here3 &quot;（node3的p2p地址）&quot; &lt;--- here4 ] &#125; &#125;, &quot;timestamp&quot;: &quot;0x5c2a3d00&quot;, &quot;extraData&quot;: &quot;0x&quot;, &quot;gasLimit&quot;: &quot;0x47b760&quot;, &quot;difficulty&quot;: &quot;0x1&quot;, &quot;coinbase&quot;: &quot;0x0000000000000000000000000000000000000000&quot;, &quot;alloc&quot;: &#123; &quot;0x122369f04f32269598789998de33e3d56e2c507a&quot;: &#123; &quot;balance&quot;: &quot;0x200000000000000000000000000000000000000000000000000000000000000&quot; &#125;, &quot;0x3dcf0b3787c31b2bdf62d5bc9128a79c2bb18829&quot;: &#123; &quot;balance&quot;: &quot;0x200000000000000000000000000000000000000000000000000000000000000&quot; &#125;, &quot;0x42a875ac43f2b4e6d17f54d288071f5952bf8911&quot;: &#123; &quot;balance&quot;: &quot;0x200000000000000000000000000000000000000000000000000000000000000&quot; &#125;, &quot;0xbf66d398226f200467cd27b14e85b25a8c232384&quot;: &#123; &quot;balance&quot;: &quot;0x200000000000000000000000000000000000000000000000000000000000000&quot; &#125;, &quot;0x491f4e8d914e30b1a5e8c804789094fe30971807&quot;: &#123; &quot;balance&quot;: &quot;0x200000000000000000000000000000000000000000000000000000000000000&quot; &#125;, &quot;0xe23f3ed4b6969f29284f667c16761212678c917d&quot;: &#123; &quot;balance&quot;: &quot;0x200000000000000000000000000000000000000000000000000000000000000&quot; &#125; &#125;, &quot;witnesses&quot;: [ &quot;（node0的address）&quot;, &lt;--- here5 &quot;（node1的address）&quot;, &lt;--- here6 &quot;（node2的address）&quot;, &lt;--- here7 &quot;（node3的address）&quot; &lt;--- here8 ], &quot;number&quot;: &quot;0x0&quot;, &quot;gasUsed&quot;: &quot;0x0&quot;, &quot;parentHash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;&#125; 别写反了，最后大概会是这个样子 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&#123; &quot;config&quot;: &#123; &quot;chainId&quot;: 1012, &quot;dpos&quot;: &#123; &quot;period&quot;: 2, &quot;witnessesNum&quot;: 4, &quot;witnessesUrl&quot;: [ &quot;/ip4/127.0.0.1/tcp/12340/ipfs/1kHcch6yuBCgC5nPPSK3Yp7Es4c4eenxAeK167pYwUvNjRo&quot;, &quot;/ip4/127.0.0.1/tcp/12341/ipfs/1kHJFKr2bzUnMr1NbeyYbYJa3RXT18cEu7cNDrHWjg8XYKB&quot;, &quot;/ip4/127.0.0.1/tcp/12342/ipfs/1kHfop9dnUHHmtBXVkLB5UauAmACtrsEX5H5t6oCRpdL198&quot;, &quot;/ip4/127.0.0.1/tcp/12343/ipfs/1kHHWuQNUVV2wgE8SqzQjWhiFQcfpkP5tRVTdJXAPWVj4nR&quot; ] &#125; &#125;, &quot;nonce&quot;: &quot;0x0&quot;, &quot;timestamp&quot;: &quot;0x5b45b949&quot;, &quot;extraData&quot;: &quot;0x&quot;, &quot;gasLimit&quot;: &quot;0x47b760&quot;, &quot;difficulty&quot;: &quot;0x1&quot;, &quot;mixHash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;, &quot;coinbase&quot;: &quot;0x0000000000000000000000000000000000000000&quot;, &quot;alloc&quot;: &#123; &quot;0x122369f04f32269598789998de33e3d56e2c507a&quot;: &#123; &quot;balance&quot;: &quot;0x200000000000000000000000000000000000000000000000000000000000000&quot; &#125;, &quot;0x3dcf0b3787c31b2bdf62d5bc9128a79c2bb18829&quot;: &#123; &quot;balance&quot;: &quot;0x200000000000000000000000000000000000000000000000000000000000000&quot; &#125;, &quot;0x42a875ac43f2b4e6d17f54d288071f5952bf8911&quot;: &#123; &quot;balance&quot;: &quot;0x200000000000000000000000000000000000000000000000000000000000000&quot; &#125;, &quot;0xbf66d398226f200467cd27b14e85b25a8c232384&quot;: &#123; &quot;balance&quot;: &quot;0x200000000000000000000000000000000000000000000000000000000000000&quot; &#125;, &quot;0x491f4e8d914e30b1a5e8c804789094fe30971807&quot;: &#123; &quot;balance&quot;: &quot;0x200000000000000000000000000000000000000000000000000000000000000&quot; &#125;, &quot;0xe23f3ed4b6969f29284f667c16761212678c917d&quot;: &#123; &quot;balance&quot;: &quot;0x200000000000000000000000000000000000000000000000000000000000000&quot; &#125; &#125;, &quot;witnesses&quot;: [ &quot;0xf31a08c03e03e36214f737755c235e6eadc5502e&quot;, &quot;0x9689e062952b71b825cd9dfc1d1d01a6319c6ebc&quot;, &quot;0x54604da2bad12b66e9aef6b8c04629b68771778e&quot;, &quot;0xe3d4f3e7d1b82dcc210efe1e0666b45e5a619a2d&quot; ], &quot;number&quot;: &quot;0x0&quot;, &quot;gasUsed&quot;: &quot;0x0&quot;, &quot;parentHash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;&#125; 经过以上操作后，查看testnet tree . -L 2testnet的目录应当如下： 12345678910111213141516171819➜ testnet tree . -L 2.├── dpos.json├── node0│ ├── history│ ├── keystore│ └── vntdb├── node1│ ├── history│ ├── keystore│ └── vntdb├── node2│ ├── history│ ├── keystore│ └── vntdb└── node3 ├── history ├── keystore └── vntdb 启动节点这里原文没详细讲怎么同时运行，我用的screen来同时部署运行的 启动0节点（bootnode）12screen -S node0gvnt --networkid 1012 --datadir node0 --port 12340 console 注意不要ctrl+D关闭了，我们直接关闭wsl-ubuntu(shell)窗口就好，screen窗口会在后台持续运行，不会随着关闭shell窗口而停止 启动剩余节点重新打开ubuntu，输入cd testnet，进入测试网目录，剩下的如法炮制 123456screen -S node1gvnt --networkid 1012 --datadir node1 --port 12341 --vntbootnode &quot;（这里填入是node0的p2p地址，不是node1&#x2F;2&#x2F;3）&quot; consolescreen -S node2gvnt --networkid 1012 --datadir node2 --port 12342 --vntbootnode &quot;（这里填入是node0的p2p地址，不是node1&#x2F;2&#x2F;3）&quot; consolescreen -S node3gvnt --networkid 1012 --datadir node3 --port 12343 --vntbootnode &quot;（这里填入是node0的p2p地址，不是node1&#x2F;2&#x2F;3）&quot; console 之后如果想回到控制页面的话，只要screen -r node0/1/2/3回到相应screen就好了 节点3上的peer信息如下，各节点上都会有3个节点，说明我们的测试网络已经搭建起来了：大概会是这样的（id什么的有不同很正常） 1234567891011121314151617181920212223242526272829303132333435363738&gt; admin.peers[&#123; caps: null, id: &quot;&lt;peer.ID 1kHJFKr2bzUnMr1NbeyYbYJa3RXT18cEu7cNDrHWjg8XYKB&gt;&quot;, name: &quot;&quot;, network: &#123; inbound: false, localAddress: &quot;/ip4/127.0.0.1/tcp/12343&quot;, remoteAddress: &quot;/ip4/127.0.0.1/tcp/12341&quot;, static: false, trusted: false &#125;, protocols: null&#125;, &#123; caps: null, id: &quot;&lt;peer.ID 1kHcch6yuBCgC5nPPSK3Yp7Es4c4eenxAeK167pYwUvNjRo&gt;&quot;, name: &quot;&quot;, network: &#123; inbound: false, localAddress: &quot;/ip4/127.0.0.1/tcp/12343&quot;, remoteAddress: &quot;/ip4/127.0.0.1/tcp/12340&quot;, static: false, trusted: false &#125;, protocols: null&#125;, &#123; caps: null, id: &quot;&lt;peer.ID 1kHfop9dnUHHmtBXVkLB5UauAmACtrsEX5H5t6oCRpdL198&gt;&quot;, name: &quot;&quot;, network: &#123; inbound: false, localAddress: &quot;/ip4/127.0.0.1/tcp/12343&quot;, remoteAddress: &quot;/ip4/127.0.0.1/tcp/12342&quot;, static: false, trusted: false &#125;, protocols: null&#125;] 打包区块在每个初始见证人节点上解锁账户、开启共识，可以看到区块不断产生。 12personal.unlockAccount(core.coinbase, &quot;账户密码&quot;, 3153600000) &#x2F;&#x2F; 3153600000指解锁的秒数，这段时间之后，账户会自动锁住bp.start() 以上，开发测试网络就搭建起来了。","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://laclic.github.io/tags/linux/"},{"name":"ubuntu","slug":"ubuntu","permalink":"http://laclic.github.io/tags/ubuntu/"},{"name":"shell","slug":"shell","permalink":"http://laclic.github.io/tags/shell/"},{"name":"vnt-chain","slug":"vnt-chain","permalink":"http://laclic.github.io/tags/vnt-chain/"},{"name":"block chain","slug":"block-chain","permalink":"http://laclic.github.io/tags/block-chain/"}]},{"title":"FZU2021-0x03-Boxes in a Line","slug":"FZU2021-0x03-Boxes-in-a-Line","date":"2021-01-21T09:51:41.000Z","updated":"2021-03-22T07:16:53.264Z","comments":true,"path":"2021/01/21/FZU2021-0x03-Boxes-in-a-Line/","link":"","permalink":"http://laclic.github.io/2021/01/21/FZU2021-0x03-Boxes-in-a-Line/","excerpt":"","text":"Use two array to simulate doubly linked list Take care of side-to-side swap Watch out reverse Command 1 (when reversed) is equal to command 2 (when normally ordered), command 2 (when reversed) is in a similar way. Command 3 is the same whether it is reversed. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125// doubly linked list#include &lt;cstdio&gt;#include &lt;cstdlib&gt;/*6 41 1 42 3 53 1 646 31 1 42 3 53 1 6100000 14*/int left[100006];int right[100006];int case_count = 0;int reverse;int cmd;inline void link(const int &amp;L, const int &amp;R) &#123; right[L] = R; left[R] = L;&#125;void prt(const int &amp;reverse, const int max) &#123; int now = max * reverse; // if reversed, now starts at max, otherwise at 0; long long sum = 0; int shouldAdd = 1; switch (reverse) &#123; case 0: &#123; for (now = right[now]; now%max; now = right[now]) &#123; if (shouldAdd%2) &#123; sum += now; &#125; ++shouldAdd; &#125; break; &#125; case 1: &#123; for (now = left[now]; now; now = left[now]) &#123; if (shouldAdd%2) &#123; sum += now; &#125; ++shouldAdd; &#125; break; &#125; &#125; printf(&quot;Case %d: %lld\\n&quot;, case_count, sum);&#125;int main(int argc, char const *argv[]) &#123; int n, m; while (scanf(&quot;%d %d&quot;, &amp;n, &amp;m) != EOF) &#123; reverse = 0; ++case_count; for (int i = 1; i &lt;= n; ++i) &#123; left[i] = i - 1; right[i] = i + 1; &#125; right[0] = 1; left[n + 1] = n; // printf(&quot;pwn! %d\\n&quot;,m); for (; m; --m) &#123; scanf(&quot;%d&quot;,&amp;cmd); // printf(&quot;pwn! %d\\n&quot;,m); switch (cmd) &#123; case 4: reverse = !reverse; break; default: &#123; int first, second; scanf(&quot;%d %d&quot;, &amp;first, &amp;second); if(reverse) cmd = 3-cmd; if(left[second]==first&amp;&amp;cmd==1) &#123;continue;&#125; if(right[second]==first&amp;&amp;cmd==2) &#123;continue;&#125; int L1 = left[first], R1 = right[first], L2 = left[second], R2 = right[second]; switch (cmd) &#123; case 0: case 3: if(right[first]==second) &#123; link(L1,second); link(second,first); link(first,R2); &#125;else if (left[first]==second) &#123; link(L2,first); link(first,second); link(second,R1); &#125;else &#123; link(L1, second); link(second, R1); link(L2, first); link(first, R2); &#125; continue; case 1: link(L1, R1); link(L2, first); link(first, second); continue; case 2: link(L1, R1); link(second, first); link(first, R2); continue; &#125; &#125; &#125; &#125; // for(int i=right[0];i%7;i=right[i]) &#123; // printf(&quot;%d &quot;,i); // &#125; prt(reverse, n + 1); &#125; return 0;&#125;","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"linked list","slug":"linked-list","permalink":"http://laclic.github.io/tags/linked-list/"},{"name":"array list","slug":"array-list","permalink":"http://laclic.github.io/tags/array-list/"}]},{"title":"安装 wsl2-ubuntu","slug":"wsl2-ubuntu","date":"2021-01-21T09:49:27.000Z","updated":"2021-01-27T05:58:30.379Z","comments":true,"path":"2021/01/21/wsl2-ubuntu/","link":"","permalink":"http://laclic.github.io/2021/01/21/wsl2-ubuntu/","excerpt":"","text":"为了搭建临时测试网络，我们需要linux环境，ubuntu是一个比较易上手的linux发行版 官方教程：链接 以下是我自己电脑安装wsl2-ubuntu的过程（比较简单，但是可能有些设置是不一样的，比如我这个win10的wsl是默认开启的，还有win10版本是默认最新的） 前言为何需要使用 linux因为很多教程命令都是基于linux系统撰写的，也为了防止由于系统版本问题而产生与教程结果不一致的问题 为何使用 wsl2(windows-subsystem-linux 2)因为方便好装（win10商店就有），而且不用安装双系统天天重启切换，并且性能比虚拟机好（如果已经有虚拟机，嫌麻烦其实不用装wsl也可以） 另外，wsl2还有很多好用的功能，在这里就不列举了（因为我也没体会过），就作个引用好了。原文. 为什么要升级到WSL2用过 WSL 第一代的朋友一定都遇到过一些比较蛋疼兼容性的问题，这些问题是由于 WSL 并不“完整”导致的。说到底 WSL 还只是一个用于访问 Linux 环境的兼容层，并没有实现 Linux 内核的完整功能。比如，我遇到了这些情况：· 无法启动Go的 Debug 进程，导致调试Go程序很麻烦· 需要在 WSL 下单独安装一套 Docker 引擎，并进行额外配置· 在 WSL 下启动 VS Code 后，会出现目录中文件被占用的情况，导致无法重命名，必须要先退出 VS Code· 无法正常使用 Linux 下全部命令，比如netstat而 WSL2 基于Hyper-V功能的子集提供了“真正的 Linux 内核”，因此上述问题也被解决了。同时，WSL2 也 支持 Windows 10 家庭版，因此之前家庭版不能用 Docker Desktop 的情况也已经成了历史。 这对于习惯使用 Linux 开发，但是又需要 Windows 玩游戏，同时不希望用盗版的有志青年们来说简直是天大的福音。 使用教程下载与安装单击你的win键（没有输入框，但是你可以试试随便按一个字幕/数字键，会自动切换到搜索输入框），输入Microsoft store（如果你经常用的话，输入个M可能就能出来了） 搜索ubuntu（无需穿墙），下载安装（免费）三个版本其实都可以 此时，单击win键输入ubuntu，点击即可打开 打开后，什么都没有，嗯也可能会显示版本信息，一天显示一次现在我们处于欢迎视窗（刚进wsl-ubuntu时候就会打开的东西，我也不知道有什么用，反正挺迷惑的）需要我们自行退出 键盘进行ctrl+C，退出欢迎视窗 然后你就可以关掉了，因为现在装的是wsl1，我们需要升级wsl2 升级 wsl2单击win，输入powershell，右键一个蓝蓝的东西Microsoft Powershell（别开PowerPoint去了），点击以管理员身份运行（一定要是这样开！！不然后面会报错的！） 输入 1wsl --set-default-version 2 会提示你安装wsl2内核，按照提示安装即可 （或者试试下面这条命令，请注意，一定要以管理员身份打开powershell） 1dism.exe &#x2F;online &#x2F;enable-feature &#x2F;featurename:VirtualMachinePlatform &#x2F;all &#x2F;norestart 然后再来 1wsl --set-default-version 2 最后输入wsl --list --verbose检查一下确实是装上了wsl2-ubuntu","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://laclic.github.io/tags/linux/"},{"name":"wsl","slug":"wsl","permalink":"http://laclic.github.io/tags/wsl/"},{"name":"ubuntu","slug":"ubuntu","permalink":"http://laclic.github.io/tags/ubuntu/"},{"name":"shell","slug":"shell","permalink":"http://laclic.github.io/tags/shell/"}]},{"title":"FZU2021-0x05-Train Problem I","slug":"FZU2021-0x05-Train-Problem-I","date":"2021-01-20T06:41:01.000Z","updated":"2021-04-01T12:30:04.134Z","comments":true,"path":"2021/01/20/FZU2021-0x05-Train-Problem-I/","link":"","permalink":"http://laclic.github.io/2021/01/20/FZU2021-0x05-Train-Problem-I/","excerpt":"","text":"同样是消消乐 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364// use stack#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;stack&gt;#define TOTAL 10using namespace std;char cmd[18] = &#123;0&#125;; // 1: IN, 2: OUT, 0: endchar now_at = 0; // to point out where to push the next cmdinline void cmd_push(int command) &#123; cmd[now_at] = command; ++now_at;&#125;// inline void clear(stack&lt;char&gt;&amp;thiz) &#123; // no need to initialize it, when one problem is over, because stack will be disposed before going to the next roop// stack&lt;char&gt; empty;// swap(thiz,empty);// &#125;int main(int argc, char const *argv[])&#123; int N; char in[TOTAL],out[TOTAL]; while(scanf(&quot;%d&quot;,&amp;N)!=EOF) &#123; stack&lt;char&gt; stk; scanf(&quot;%s %s&quot;,in,out); int mouse[3] = &#123;0&#125;; // 1: in, 2: out, 0: of no use while(mouse[1]&lt;N) &#123; if(in[mouse[1]]==out[mouse[2]]) &#123; ++mouse[1]; ++mouse[2]; cmd_push(1); cmd_push(2); while(!stk.empty()&amp;&amp;stk.top()==out[mouse[2]]) &#123; ++mouse[2]; stk.pop(); cmd_push(2); &#125; &#125;else &#123; stk.push(in[mouse[1]]); ++mouse[1]; cmd_push(1); &#125; &#125; cmd[now_at] = 0; if(!stk.empty()) printf(&quot;No.\\n&quot;); else &#123; printf(&quot;Yes.\\n&quot;); // print the content in cmd[] for(int i=0;cmd[i]!=0;++i) &#123; switch (cmd[i]) &#123; case 1: printf(&quot;in\\n&quot;); break; case 2: printf(&quot;out\\n&quot;); break; &#125; &#125; &#125; printf(&quot;FINISH\\n&quot;); // reset now_at now_at = 0; &#125; return 0;&#125;","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"stack","slug":"stack","permalink":"http://laclic.github.io/tags/stack/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"FZU2021-0x06-看病要排队","slug":"FZU2021-0x06-看病要排队","date":"2021-01-20T03:26:14.000Z","updated":"2021-04-01T12:30:04.133Z","comments":true,"path":"2021/01/20/FZU2021-0x06-看病要排队/","link":"","permalink":"http://laclic.github.io/2021/01/20/FZU2021-0x06-%E7%9C%8B%E7%97%85%E8%A6%81%E6%8E%92%E9%98%9F/","excerpt":"","text":"Remain Cause error if using Class Patient with reload operator&lt;, WHY? 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687// priority_queue// need to clear queue before new problem comes#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;queue&gt;using namespace std;// class Patient &#123;// public:// int id;// int prior;// bool operator &lt; (const Patient other) &#123;// if(this-&gt;prior == other.prior) return this-&gt;id &gt; other.id;// else return this-&gt;prior &lt; other.prior;// &#125;// &#125;typedef struct _patient&#123; int id; int prior;&#125;Patient;bool operator &lt; (const Patient&amp;thiz,const Patient other) &#123; if(thiz.prior == other.prior) return thiz.id &gt; other.id; else return thiz.prior &lt; other.prior;&#125;void clear(priority_queue&lt;Patient&gt; &amp;target) &#123; priority_queue&lt;Patient&gt; empty; target.swap(empty);&#125;int main(int argc, char const *argv[])&#123; int N,doctor,prior; char cmd[4]; while(scanf(&quot;%d&quot;,&amp;N)!=EOF) &#123; priority_queue&lt;Patient&gt; que[4]; int i=1; for(;N;--N) &#123; scanf(&quot;%s&quot;,cmd); if(cmd[0]==&#x27;I&#x27;) &#123; scanf(&quot;%d %d&quot;,&amp;doctor,&amp;prior); Patient temp = &#123;i,prior&#125;; que[doctor].push(temp); ++i; &#125;else &#123; scanf(&quot;%d&quot;,&amp;doctor); if(que[doctor].empty()) printf(&quot;EMPTY\\n&quot;); else &#123; printf(&quot;%d\\n&quot;,que[doctor].top().id); que[doctor].pop(); &#125; &#125; &#125; for(int i=1;i&lt;4;++i) &#123; clear(que[i]); &#125; &#125; return 0;&#125;/*7IN 1 1IN 1 2OUT 1OUT 2IN 2 1OUT 2OUT 12IN 1 1OUT 18IN 1 1IN 1 1IN 1 1IN 1 1OUT 1OUT 1OUT 1OUT 1*/","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"priority_queue","slug":"priority-queue","permalink":"http://laclic.github.io/tags/priority-queue/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"FZU2021-0x04-Replace To Make Regular Bracket Sequence","slug":"FZU2021-0x04-Replace-To-Make-Regular-Bracket-Sequence","date":"2021-01-20T03:25:55.000Z","updated":"2021-04-01T12:30:04.133Z","comments":true,"path":"2021/01/20/FZU2021-0x04-Replace-To-Make-Regular-Bracket-Sequence/","link":"","permalink":"http://laclic.github.io/2021/01/20/FZU2021-0x04-Replace-To-Make-Regular-Bracket-Sequence/","excerpt":"","text":"消消乐 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758// Use stack#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;stack&gt;using namespace std;char s[1000006];// &lt; &gt;, &#123; &#125;, [ ], ( ).// 0 4 1 5 2 6 3 7inline char table(char ch) &#123; switch (ch) &#123; case &#x27;&lt;&#x27;: return 0; case &#x27;&#123;&#x27;: return 1; case &#x27;[&#x27;: return 2; case &#x27;(&#x27;: return 3; case &#x27;&gt;&#x27;: return 4; case &#x27;&#125;&#x27;: return 5; case &#x27;]&#x27;: return 6; case &#x27;)&#x27;: return 7; &#125; return -1;&#125;int main(int argc, char const *argv[])&#123; int cnt = 0; while(scanf(&quot;%s&quot;,s)!=EOF) &#123; stack&lt;char&gt; stk; int impossible = 0; for(int i=0;s[i]!=&#x27;\\0&#x27;;++i) &#123; int temp = table(s[i]); if(temp&gt;=4) &#123; if(stk.empty()) &#123; impossible = 1; break; &#125; if(temp - stk.top()==4) &#123; stk.pop(); &#125;else &#123; stk.pop(); ++cnt; &#125; &#125;else &#123; stk.push(temp); &#125; &#125; if(!stk.empty()) impossible=1; if(impossible) &#123; printf(&quot;Impossible\\n&quot;); &#125;else &#123; printf(&quot;%d\\n&quot;,cnt); &#125; &#125; return 0;&#125;","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"stack","slug":"stack","permalink":"http://laclic.github.io/tags/stack/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"FZU2021-0x02-Broken Keyboard (a.k.a. Beiju Text)","slug":"FZU2021-0x02-Broken-Keyboard-a-k-a-Beiju-Text","date":"2021-01-20T03:25:21.000Z","updated":"2021-04-01T12:30:04.133Z","comments":true,"path":"2021/01/20/FZU2021-0x02-Broken-Keyboard-a-k-a-Beiju-Text/","link":"","permalink":"http://laclic.github.io/2021/01/20/FZU2021-0x02-Broken-Keyboard-a-k-a-Beiju-Text/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;deque&gt;using namespace std;char s[100007];int main(int argc, char const *argv[])&#123; while(scanf(&quot;%s&quot;,s)==1) &#123; deque&lt;char*&gt; v; v.push_back(s); int i; for(i=0;s[i]!=&#x27;\\0&#x27;;++i) &#123; if(s[i]==&#x27;[&#x27;) &#123; s[i] = &#x27;\\0&#x27;; v.push_front(s+i+1); &#125; if(s[i]==&#x27;]&#x27;) &#123; s[i] = &#x27;\\0&#x27;; v.push_back(s+i+1); &#125; &#125; s[i] = &#x27;\\0&#x27;; s[i+1] = &#x27;\\0&#x27;; // int len = v.size(); // for(i=0;i&lt;len;++i) &#123; // printf(&quot;%s&quot;,v[i]); // &#125; for(deque&lt;char*&gt;::iterator it=v.begin();it!=v.end();++it) &#123; printf(&quot;%s&quot;,*it); &#125; printf(&quot;\\n&quot;); // printf(&quot;#&quot;); &#125; return 0;&#125;","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"string and point","slug":"string-and-point","permalink":"http://laclic.github.io/tags/string-and-point/"},{"name":"deque","slug":"deque","permalink":"http://laclic.github.io/tags/deque/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"FZU2021-0x01-小孩报数问题","slug":"FZU2021-0x01-小孩报数问题","date":"2021-01-20T03:24:51.000Z","updated":"2021-04-01T12:30:04.133Z","comments":true,"path":"2021/01/20/FZU2021-0x01-小孩报数问题/","link":"","permalink":"http://laclic.github.io/2021/01/20/FZU2021-0x01-%E5%B0%8F%E5%AD%A9%E6%8A%A5%E6%95%B0%E9%97%AE%E9%A2%98/","excerpt":"","text":"Take care of how the end comes back to the begin 1234567891011121314151617181920212223242526272829303132333435363738394041424344/* circle problem */// take care of how the end comes back to the begin#include &lt;cstdio&gt;#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;int main(int argc, char const *argv[])&#123; int N,W,S; scanf(&quot;%d&quot;,&amp;N); vector&lt;string&gt; v; string temp; for(;N;--N) &#123; cin &gt;&gt; temp; v.push_back(temp); &#125; scanf(&quot;%d,%d&quot;,&amp;W,&amp;S); // int len = v.size(); // for(int i=0;i&lt;len;++i) &#123; // debug // printf(&quot;%s\\n&quot;,&amp;v[i][0]); // &#125; // vector&lt;string&gt;::iterator it = v.begin(); int cnt = 1; int lenth = v.size(); for(int now=W-1;!v.empty();++now) &#123; lenth = v.size(); int SS = S % lenth; if(SS == 0) SS = lenth; if(SS == 1) SS += lenth; if(now &gt;= lenth) now %= lenth; if(cnt==SS) &#123; printf(&quot;%s\\n&quot;,&amp;v[now][0]); v.erase(v.begin()+now); cnt = 1; &#125; ++cnt; &#125; return 0;&#125;","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"circle","slug":"circle","permalink":"http://laclic.github.io/tags/circle/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"}]},{"title":"spider get ajax and frame page","slug":"spider-get-ajax-and-frame-page","date":"2020-12-30T09:54:10.000Z","updated":"2020-12-30T11:15:02.919Z","comments":true,"path":"2020/12/30/spider-get-ajax-and-frame-page/","link":"","permalink":"http://laclic.github.io/2020/12/30/spider-get-ajax-and-frame-page/","excerpt":"","text":"Copyright: LacLic python: 获取 ajax 和 frame 子页面该博客提供的解决思路适用于需要获取子界面情况 事件发生想要爬取该页面的阅读数，审计网页元素后找到了相应信息。 爬取后源代码后发现问题，审计网页源代码，发现没有阅读数的值，只发现了一串urn 解决方案爬取urn，接入url合并为新的uri，打开对应页面，并爬取新的页面源代码，得到所需内容 12345678910111213141516171819def parse_page_content(html): pattern = re.compile( # Regex r&#x27;&lt;div class=&quot;detail_main_content&quot;&gt;\\s.*?&gt;(.*?)&lt;/p&gt;[\\s\\S]*fbsj.*?&gt;([0-9]*)-([0-9]*)-([0-9]*)[\\s\\S]*author.*?&gt;(.*?)&lt;/span&gt;[\\s\\S]*?Count.*?id=([0-9]*)[\\s\\S]*?&lt;strong&gt;(.*?)/&lt;/strong&gt;(.*?)&lt;/div&gt;&#x27;, re.S) # 其中 Count.*?id=([0-9]*) 中 id= 后的部分便是需要的id内容 ↑-----↑ items = re.findall(pattern, html) for item in items: response = requests.get( f&#x27;&quot;&quot;&quot;省略无关url&quot;&quot;&quot;/getDocReadCount.do?id=&#123;item[5]&#125;&#x27;) # &lt;--- 获阅返回读数页面的uri并爬取页面 yield &#123; # convert to dict &#x27;title&#x27;: item[0], &#x27;year&#x27;: item[1], &#x27;month&#x27;: item[2], &#x27;day&#x27;: item[3], &#x27;author&#x27;: item[4], &#x27;read&#x27;: response.text, # &lt;--- 写入到阅读数 &#x27;from&#x27;: item[6], &#x27;content&#x27;: &quot;&quot;&quot;省略无关解析内容的表达式（写太长了，又懒得改，只好掩人耳目了！）&quot;&quot;&quot; &#125; return 0 爬取成功！ 解决过程（使用火狐浏览器）F12打开开发者工具，点开network（网络）发现除了获取了主页面外，还通过POST获取了getDocReadCount的东西，如下图： 通过英文审计，这不就是我们需要的阅读数吗！ 另外看到上面的urn，似曾相识… 123&lt;span id=&quot;readcount&quot;&gt;&lt;/span&gt;&lt;script&gt; $.ajax(&#123;type:&#x27;post&#x27;,url:&#x27;/interFace/getDocReadCount.do?id=509488&#x27;,timeout:2000,success:function(ret)&#123;$(&#x27;#readcount&#x27;).html($.trim(ret))&#125;,error:function(ret)&#123;$.ajax(&#123;type:&#x27;post&#x27;,url:&#x27;/ecms_external?method=syncOfflineVisitCount&#x27;,data:&#x27;type=doc&amp;requestUrl=&#x27;+location.href,timeout:2000,success:function(ret)&#123;$(&#x27;#readcount&#x27;).html(ret);&#125;,error:function()&#123;$(&#x27;#readcount&#x27;).html(0);&#125;&#125;);&#125;&#125;); 这不就是上面看到的 12url:&#x27;/interFace/getDocReadCount.do?id=509488&#x27; 好了，我们只要构造request去获取 ‘(相关url)/interFace/getDocReadCount.do?id=509488’（组成成为一个网址）的页面即可！ 12345id = (&quot;&quot;&quot;已经爬到的id&quot;&quot;&quot;)response = requests.get( f&#x27;http://(相关url)/interFace/getDocReadCount.do?id=&#123;id&#125;&#x27;)","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://laclic.github.io/tags/python/"},{"name":"spider","slug":"spider","permalink":"http://laclic.github.io/tags/spider/"}]},{"title":"C语言实现 红黑树 源代码","slug":"RBtree","date":"2020-12-25T08:39:21.000Z","updated":"2020-12-27T07:35:17.150Z","comments":true,"path":"2020/12/25/RBtree/","link":"","permalink":"http://laclic.github.io/2020/12/25/RBtree/","excerpt":"","text":"int 型 红黑树&emsp;采用了双向结构，子节点可指向父节点&emsp;代码采用了多.c文件形式，需要在一个project下进行编译 函数名 英文释义 中文释义 treeCrt() Tree Create 创建树 treeAdd() Tree Add 向树添加节点 treePrt() Tree Print 打印树/输出树 \\ \\ \\ _treeAdd_recur() Tree Add Recursion 通过递归方式查找插入位点并插入 _treeJug() Tree Judge 比较判断节点值的大小关系 _treePrt_recur() Tree Print Recursion 通过递归方式打印树 _treeChk() Tree Check 检查节点附近的情况 _treeRot() Tree Rotate 选择树的结点 _nodeCrt() Node Create 创建并返回一个带值的节点 &emsp;注：开头带下划线的函数表示私有函数（不希望直接被访问，只是为了给非下划线函数使用方便） 头文件： 123456789101112131415161718192021222324252627282930#ifndef _TREE_H_#define _TREE_H_#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;typedef struct _node&#123; int value; struct _node *p[2]; // p[0]: left-son, p[1]: right-son struct _node *father; char BR; // 0: black; 1: red; &#125;Node;typedef struct _rbtree&#123; Node* head;&#125;RBTree;RBTree treeCrt();void treeAdd(RBTree* t,int value);void treePrt(RBTree t);void _treeAdd_recur(Node* now,const int value);void _treePrt_recur(Node* now,int layer);void _treeChk(Node* now,int son);int _treeJdg(Node* const now,const int value);void _treeRot(Node* now,const int drc); // lift the left or right one to now position, drc means directionNode* _nodeCrt(Node* father,int value);#endif 红黑树 的 创建 与 添加 函数名 英文释义 中文释义 treeCrt() Tree Create 创建树 treeAdd() Tree Add 向树添加节点 _treeAdd_recur() Tree Add Recursion 通过递归方式查找插入位点并插入 _treeJug() Tree Judge 比较判断节点值的大小关系 _nodeCrt() Node Create 创建并返回一个带值的节点 1234567#include &quot;tree.h&quot;RBTree treeCrt() &#123; RBTree t = &#123;NULL&#125;; return t;&#125; 1234567891011121314151617#include &quot;tree.h&quot;void treeAdd(RBTree*t,int value) &#123; // 将添加函数进行了封装，而非直接用主函数来进行递归 if(t-&gt;head) _treeAdd_recur(t-&gt;head,value); else t-&gt;head = _nodeCrt(NULL,value); t-&gt;head-&gt;BR = 0;&#125;void _treeAdd_recur(Node* now,int value) &#123; int drc = _treeJdg(now,value); // drc: direction, left(0) or right(1) // _treeJdg()函数用于判断大小以确定 if(now-&gt;p[drc]) _treeAdd_recur(now-&gt;p[drc],value); else &#123; now-&gt;p[drc] = _nodeCrt(now,value); _treeChk(now,drc); // 用于检查红黑关系的函数 &#125;&#125; 1234#include &quot;tree.h&quot;int _treeJdg(Node* const now,const int value) &#123; return now-&gt;value &lt; value; &#125; 12345678910#include &quot;tree.h&quot;Node* _nodeCrt(Node* father,int value) &#123; Node* node = (Node*) malloc(sizeof(Node)); node-&gt;father = father; node-&gt;p[0] = NULL; node-&gt;p[1] = NULL; node-&gt;value = value; node-&gt;BR = 1;&#125; 红黑树 的 打印/输出/展示&emsp;由于输出的特性，我们无法竖着输出我们所熟悉的二叉树，只能通过递归的方式来横向输出我们的二叉树 函数名 英文释义 中文释义 treePrt() Tree Print 打印树/输出树 _treePrt_recur() Tree Print Recursion 通过递归方式打印树 123456789101112131415#include &quot;tree.h&quot;void treePrt(RBTree t) &#123; // 同样是进行了封装 if(t.head) _treePrt_recur(t.head,0); // 判断空树，如果t上有结点（不是空树）就进入递归 else printf(&quot;This is an empty tree.\\n&quot;); // 否则，输出空树 printf(&quot;------------------------------------\\n&quot;); // 分隔符&#125;void _treePrt_recur(Node* now,int layer) &#123; // layer 代指当前所处的层数/递归的深度 if(now-&gt;p[1]) _treePrt_recur(now-&gt;p[1],layer+1); for(int i=0;i&lt;layer;++i) printf(&quot;\\t&quot;); // 制表符，让格式更好看 printf(&quot;%d(BR-%d)\\n&quot;,now-&gt;value,now-&gt;BR); if(now-&gt;p[0]) _treePrt_recur(now-&gt;p[0],layer+1);&#125; 红黑树 的 检查与旋转 函数名 英文释义 中文释义 _treeChk() Tree Check 检查节点附近的情况 _treeRot() Tree Rotate 选择树的结点 &emsp;检查新插入节点、其父节点，以及其祖父节点（父节点的父节点） 12345678910111213141516171819202122232425262728293031323334353637383940#include &quot;tree.h&quot;void _treeChk(Node* f,int son) &#123; // son of father(f) is the added node int status = 0b00; // if (son &gt; f) ==&gt; 0b1??, son &gt; gf ==&gt; 0b?1? Node* gf = f-&gt;father; Node* s; // s means son, Node* if(gf&amp;&amp;f-&gt;BR) &#123; if(gf-&gt;p[0]&amp;&amp;gf-&gt;p[1]&amp;&amp;gf-&gt;p[0]-&gt;BR&amp;&amp;gf-&gt;p[1]-&gt;BR) &#123; // left-son and right-son exists, left and right sons are both red gf-&gt;BR = 1; gf-&gt;p[0]-&gt;BR = 0; gf-&gt;p[1]-&gt;BR = 0; if(gf-&gt;father) &#123; _treeChk(gf-&gt;father,gf-&gt;value &gt; gf-&gt;father-&gt;value); &#125; &#125;else &#123; status = son; s = f-&gt;p[son]; // s means son of f, Node* status = (status &lt;&lt; 1) + (f-&gt;p[son]-&gt;value &gt; gf-&gt;value); switch(status) &#123; case 0b00 : ; case 0b11 : f-&gt;BR = 1; gf-&gt;BR = 0; _treeRot(gf,!(1&amp;status)); break; case 0b10 : ; case 0b01 : f-&gt;BR = 1; gf-&gt;BR = 0; _treeRot(f,!son); _treeRot(gf,!(1&amp;status)); break; default : ; &#125; &#125; &#125; return;&#125; &emsp;以下函数中的drc，0代表左旋，1代表右旋 12345678910111213#include &quot;tree.h&quot;void _treeRot(Node* now,const int drc) &#123; // left-rotate: 0 now-&gt;value ^= now-&gt;p[!drc]-&gt;value ^= now-&gt;value ^= now-&gt;p[!drc]-&gt;value; // swap value Node* temp = now-&gt;p[drc]; now-&gt;p[drc] = now-&gt;p[!drc]; now-&gt;p[!drc] = now-&gt;p[drc]-&gt;p[!drc]; now-&gt;p[drc]-&gt;p[!drc] = now-&gt;p[drc]-&gt;p[drc]; now-&gt;p[drc]-&gt;p[drc] = temp; if(temp) temp-&gt;father = now-&gt;p[drc]; if(now-&gt;p[!drc]) now-&gt;p[!drc]-&gt;father = now;&#125;","categories":[],"tags":[{"name":"algorithm","slug":"algorithm","permalink":"http://laclic.github.io/tags/algorithm/"},{"name":"data structure","slug":"data-structure","permalink":"http://laclic.github.io/tags/data-structure/"}]},{"title":"P1980 最优解（30ms）","slug":"P1980","date":"2020-12-24T05:07:50.000Z","updated":"2021-03-22T07:16:53.261Z","comments":true,"path":"2020/12/24/P1980/","link":"","permalink":"http://laclic.github.io/2020/12/24/P1980/","excerpt":"","text":"Copyright LacLic 思路 每一位 = 去尾数据 + 此位值 * 此位后的输入 显然，需要重点考虑0出现的次数 举例 记 输入为 26759，（不考虑x，直接把0~9全都算出来，最后再输出） 记 答案数组 为 A[0~9](26759)（10长度的数组） 其中，A是长度为10的数组，用以表示数字出现的次数，0~9表示0到9每一位，括号内表示输入 A[0~9](26759) = A[0~9](20000) + A[2](6759) A[0~9](6759) = A[0~9](6000) + A[6](759) A[0~9](759) = A[0~9](700) + A[7](59) A[0~9](59) = A[0~9](50) + A[5](9) A[0~9](759) = A[0~9](9) + A[9](0) A[9](0) = 0 A[0~9] = {1,1,1,1,1,1,1,1,1,1} 此处考虑到方便，就先记0处为1，后续进行删除 最终代码（虽然用的是c++，但是完全用的是c的语法，30ms） 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253// copyright LacLic#include &lt;cstdio&gt;#include &lt;iostream&gt;using namespace std;#define BITS 8#define NUM 10unsigned long long storage[BITS] = &#123;1,20,300,4000,50000,600000,7000000,80000000&#125;;unsigned long long a[NUM] = &#123;0&#125;;inline int intPow(int base,int power) &#123; int ret = 1; for(;power;--power) &#123; ret *= base; &#125; return ret;&#125;int main(int argc, char const *argv[])&#123; int b[BITS]; // 10 000 000 int n,x,height; int LEN; // means the total bits-1 scanf(&quot;%d %d&quot;,&amp;n,&amp;x); ++n; // 这句只是因为发现最后算出来的数据会不到n，所以++后刚刚好 int N = n; for(LEN=0;1;++LEN) &#123; b[LEN] = n%10; n /= 10; if(!n) break; &#125; height = intPow(10,LEN); for(int i=LEN;i&gt;=0;--i) &#123; int numOfBit = intPow(NUM,i); for(int j=0;j&lt;b[i];++j) &#123; a[j] += numOfBit; for(int k=0;k&lt;NUM;++k) &#123; a[k] += storage[i-1]; &#125; &#125; a[b[i]] += N % numOfBit; &#125; for(;height;height/=10) &#123; // 发现0处有问题，所以添加这段来修正a[0] a[0] -= height; &#125; printf(&quot;%d&quot;,a[x]); return 0;&#125;// 30ms 普通递归算法(129ms) 12345678910111213141516171819202122232425262728#include &lt;cstdio&gt;#include &lt;iostream&gt;using namespace std;int a[10] = &#123;0&#125;;void count(int now) &#123; for(;now;now/=10) &#123; ++a[now%10]; &#125; return;&#125;int main(int argc, char const *argv[])&#123; int N,x; scanf(&quot;%d %d&quot;,&amp;N,&amp;x); for(int i=1;i&lt;=N;++i) &#123; count(i); &#125; // for(int i=0;i&lt;10;++i) &#123; // printf(&quot;a[%d] = %d\\n&quot;,i,a[i]); // &#125; printf(&quot;%d&quot;,a[x]); return 0;&#125;","categories":[],"tags":[{"name":"algorithm","slug":"algorithm","permalink":"http://laclic.github.io/tags/algorithm/"},{"name":"Leetcode","slug":"Leetcode","permalink":"http://laclic.github.io/tags/Leetcode/"}]},{"title":"Flutter autovalidate is deprecated","slug":"Flutter-autovalidate-is-deprecated","date":"2020-11-25T15:07:20.000Z","updated":"2020-12-03T10:09:26.969Z","comments":true,"path":"2020/11/25/Flutter-autovalidate-is-deprecated/","link":"","permalink":"http://laclic.github.io/2020/11/25/Flutter-autovalidate-is-deprecated/","excerpt":"","text":"Flutter Deprecated:&emsp;‘autovalidate’ is deprecated and shouldn’t be used.Created by: © LacLic 事件发生&emsp;在表单 (FormField) 中调用 autovalidate (自动生效)参数时，发生了如下现象（在 vscode 中）： autovalidate形式参数被划上了删除线 vscode提供了相应的提示信息（如下 / 如图） &emsp;Used to enable/disable form fields auto validation and update their error text. &emsp;autovalidate参数 曾用于启用 / 停用表单的 自动生效并更新他们的错误文本（错误文本大概是”密码应不少于6位”的提示文本） &emsp;’autovalidate’ is deprecated and shouldn’t be used. Use autoValidateMode parameter which provides more specific behavior related to auto validation. This feature was deprecated after v1.19.0.. &emsp;autovalidate参数 已经被逐步弃用。试着用用能提供更具体化的 autoValidateMode参数 来进行代替 autovalidate 功能。这个功能（原本的autovalidate参数）在版本1.19.0开始已经被弃用了。 Try replacing the use of the deprecated member with the replacement. &emsp;去用 autovalidateMode 参数吧 &emsp;flutter 中文网上的教程并没有关于这方面的阐述说明，以下资料参考自 StackoverFlow 等网站. 解决方案 &emsp;All you need to do is replace autovalidate: true with autovalidateMode: AutovalidateMode.always &emsp;翻译：把 autovalidate: true 换成 autovalidateMode: AutovalidateMode.always即可 例： 12345child: Form( key: _formKey, autovalidate: true, // &lt;- here child: null,), 12345child: Form( key: _formKey, autovalidateMode: AutovalidateMode.always, // &lt;- here child: null,), 关于 autovalidateMode The different supported modes are: AutovalidateMode.disabled: No auto validation will occur.· 表单不会自动更新 AutovalidateMode.always: Used to auto-validate FormField even without user interaction.· 实时更新表单 AutovalidateMode.onUserInteraction: Used to auto-validate FormField only after each user interaction.· 只有在用户交互后，才会更新表单","categories":[],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://laclic.github.io/tags/Flutter/"},{"name":"Deprecation","slug":"Deprecation","permalink":"http://laclic.github.io/tags/Deprecation/"}]},{"title":"Flutter_Exception_multiple_heroes","slug":"Flutter-Exception-multiple-heroes","date":"2020-11-16T14:31:23.000Z","updated":"2020-12-03T10:09:37.408Z","comments":true,"path":"2020/11/16/Flutter-Exception-multiple-heroes/","link":"","permalink":"http://laclic.github.io/2020/11/16/Flutter-Exception-multiple-heroes/","excerpt":"","text":"Flutter Exception： &emsp;There are multiple heroes that share the same tag within a subtreeCreated by: © LacLic 错误发生&emsp;这个异常(exception)主要出现于一个页面/路由(route)中有两个及以上的浮标按钮(FloatingActionButtom)。 &emsp;以下是异常报错代码及状况：*仅展示了部分代码* 123456789101112131415161718192021222324252627282930class _MyHomePageState extends State&lt;MyHomePage&gt; &#123;// ...省略无关代码@overrideWidget build(BuildContext context) &#123; return Scaffold( appBar: /* ...省略无关代码 */, body: Center( child: Column( mainAxisAlignment: MainAxisAlignment.center, children: &lt;Widget&gt;[ /*...省略无关widget代码 */ FloatingActionButton( onPressed: () =&gt; Navigator.pushNamed(context, &quot;test_form&quot;), child: Icon(Icons.plus_one), ), ], ), ), floatingActionButton: FloatingActionButton( onPressed: () &#123; Navigator.pushNamed(context, &quot;test_theme&quot;); _decrementCounter(); &#125;, tooltip: &#x27;new page&#x27;, child: Icon(Icons.home), ), );&#125; &emsp;会出现如图所示的异常(exception) 解决方案&emsp;只需要向各个浮标按钮的heroTag参数传入一个与其它浮标按钮不同的值（字符串）即可： 1234567FloatingActionButton( onPressed: () =&gt; Navigator.pushNamed(context, &quot;test_form&quot;), child: Icon(Icons.plus_one), heroTag: &#x27;example&#x27;, // &lt;- here), 里面的example可以替换成任意你想输入的值，只要不与其它的浮标按钮(FloatingActionButtom)的heroTag值相同即可 错误原理&emsp;首先得知道Hero是Flutter中的一种动画形式，两个带有同样hero标识的元素在页面切换时会有一个飞动的效果，该效果由flutter自动实现。该标识对应的属性名为heroTag，在同一个页面内，每个heroTag只能拥有一个独一无二的值（和 html 中的 id 一样），如果重复就会抛出标题所示的异常 ‘There are multiple heroes that share the same tag within a subtree.’ [^REF] &emsp;Flutter 相应部分源码： 1234567const FloatingActionButton(&#123; //省略无关参数 this.heroTag = const _DefaultHeroTag(), //省略无关参数&#125;) 其中： 1234567class _DefaultHeroTag &#123; const _DefaultHeroTag(); @override String toString() =&gt; &#x27;&lt;default FloatingActionButton tag&gt;&#x27;;&#125; &emsp;明显看出，heroTag会被默认初始化为 ‘&lt;default FloatingActionButton tag&gt;‘ ，导致未向heroTag传入参数的地方，全都默认为上面那段字符串 1234567final Object heroTag;/// The callback that is called when the button is tapped or otherwise activated.////// If this is set to null, the button will be disabled. &emsp;就是说这个参数是用来管理这个按钮的点击等事件的，如果多个按钮使用同一个heroTag则会触发联动，造成问题，为了防止问题，flutter提前进行了异常报错 [^REF]: CSDN id: in_motion 的博客.","categories":[],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://laclic.github.io/tags/Flutter/"},{"name":"Exception","slug":"Exception","permalink":"http://laclic.github.io/tags/Exception/"}]},{"title":"my-first-blog","slug":"my-first-blog","date":"2020-11-07T12:11:54.000Z","updated":"2020-12-03T10:07:27.701Z","comments":true,"path":"2020/11/07/my-first-blog/","link":"","permalink":"http://laclic.github.io/2020/11/07/my-first-blog/","excerpt":"","text":"Make it great!","categories":[],"tags":[{"name":"Default","slug":"Default","permalink":"http://laclic.github.io/tags/Default/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-11-07T08:26:14.862Z","updated":"2020-11-07T08:26:14.862Z","comments":true,"path":"2020/11/07/hello-world/","link":"","permalink":"http://laclic.github.io/2020/11/07/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"cpp","slug":"cpp","permalink":"http://laclic.github.io/tags/cpp/"},{"name":"problem E","slug":"problem-E","permalink":"http://laclic.github.io/tags/problem-E/"},{"name":"binary indexed tree","slug":"binary-indexed-tree","permalink":"http://laclic.github.io/tags/binary-indexed-tree/"},{"name":"dynamic programming","slug":"dynamic-programming","permalink":"http://laclic.github.io/tags/dynamic-programming/"},{"name":"problem D","slug":"problem-D","permalink":"http://laclic.github.io/tags/problem-D/"},{"name":"problem C","slug":"problem-C","permalink":"http://laclic.github.io/tags/problem-C/"},{"name":"greedy","slug":"greedy","permalink":"http://laclic.github.io/tags/greedy/"},{"name":"problem B","slug":"problem-B","permalink":"http://laclic.github.io/tags/problem-B/"},{"name":"problem A","slug":"problem-A","permalink":"http://laclic.github.io/tags/problem-A/"},{"name":"div1","slug":"div1","permalink":"http://laclic.github.io/tags/div1/"},{"name":"dp","slug":"dp","permalink":"http://laclic.github.io/tags/dp/"},{"name":"interactive","slug":"interactive","permalink":"http://laclic.github.io/tags/interactive/"},{"name":"algorithm","slug":"algorithm","permalink":"http://laclic.github.io/tags/algorithm/"},{"name":"ACM","slug":"ACM","permalink":"http://laclic.github.io/tags/ACM/"},{"name":"math","slug":"math","permalink":"http://laclic.github.io/tags/math/"},{"name":"difference","slug":"difference","permalink":"http://laclic.github.io/tags/difference/"},{"name":"stack","slug":"stack","permalink":"http://laclic.github.io/tags/stack/"},{"name":"string","slug":"string","permalink":"http://laclic.github.io/tags/string/"},{"name":"network","slug":"network","permalink":"http://laclic.github.io/tags/network/"},{"name":"docker","slug":"docker","permalink":"http://laclic.github.io/tags/docker/"},{"name":"priority_queue","slug":"priority-queue","permalink":"http://laclic.github.io/tags/priority-queue/"},{"name":"dijkstra","slug":"dijkstra","permalink":"http://laclic.github.io/tags/dijkstra/"},{"name":"graph","slug":"graph","permalink":"http://laclic.github.io/tags/graph/"},{"name":"board first search","slug":"board-first-search","permalink":"http://laclic.github.io/tags/board-first-search/"},{"name":"brute force","slug":"brute-force","permalink":"http://laclic.github.io/tags/brute-force/"},{"name":"linked list","slug":"linked-list","permalink":"http://laclic.github.io/tags/linked-list/"},{"name":"doubly linked list","slug":"doubly-linked-list","permalink":"http://laclic.github.io/tags/doubly-linked-list/"},{"name":"linked list circle","slug":"linked-list-circle","permalink":"http://laclic.github.io/tags/linked-list-circle/"},{"name":"map","slug":"map","permalink":"http://laclic.github.io/tags/map/"},{"name":"big integer","slug":"big-integer","permalink":"http://laclic.github.io/tags/big-integer/"},{"name":"quantization","slug":"quantization","permalink":"http://laclic.github.io/tags/quantization/"},{"name":"divide simulate","slug":"divide-simulate","permalink":"http://laclic.github.io/tags/divide-simulate/"},{"name":"easy","slug":"easy","permalink":"http://laclic.github.io/tags/easy/"},{"name":"clever","slug":"clever","permalink":"http://laclic.github.io/tags/clever/"},{"name":"bit operation","slug":"bit-operation","permalink":"http://laclic.github.io/tags/bit-operation/"},{"name":"conditions","slug":"conditions","permalink":"http://laclic.github.io/tags/conditions/"},{"name":"PTA","slug":"PTA","permalink":"http://laclic.github.io/tags/PTA/"},{"name":"dfs","slug":"dfs","permalink":"http://laclic.github.io/tags/dfs/"},{"name":"contest hunter","slug":"contest-hunter","permalink":"http://laclic.github.io/tags/contest-hunter/"},{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"c++","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"android","slug":"android","permalink":"http://laclic.github.io/tags/android/"},{"name":"Android","slug":"Android","permalink":"http://laclic.github.io/tags/Android/"},{"name":"brute-force","slug":"brute-force","permalink":"http://laclic.github.io/tags/brute-force/"},{"name":"MISC","slug":"MISC","permalink":"http://laclic.github.io/tags/MISC/"},{"name":"the Spring Festival","slug":"the-Spring-Festival","permalink":"http://laclic.github.io/tags/the-Spring-Festival/"},{"name":"special","slug":"special","permalink":"http://laclic.github.io/tags/special/"},{"name":"password","slug":"password","permalink":"http://laclic.github.io/tags/password/"},{"name":"remains problem","slug":"remains-problem","permalink":"http://laclic.github.io/tags/remains-problem/"},{"name":"deep learning","slug":"deep-learning","permalink":"http://laclic.github.io/tags/deep-learning/"},{"name":"computer vision","slug":"computer-vision","permalink":"http://laclic.github.io/tags/computer-vision/"},{"name":"neural network","slug":"neural-network","permalink":"http://laclic.github.io/tags/neural-network/"},{"name":"search","slug":"search","permalink":"http://laclic.github.io/tags/search/"},{"name":"broad first search","slug":"broad-first-search","permalink":"http://laclic.github.io/tags/broad-first-search/"},{"name":"sort","slug":"sort","permalink":"http://laclic.github.io/tags/sort/"},{"name":"gcd","slug":"gcd","permalink":"http://laclic.github.io/tags/gcd/"},{"name":"python","slug":"python","permalink":"http://laclic.github.io/tags/python/"},{"name":"existence","slug":"existence","permalink":"http://laclic.github.io/tags/existence/"},{"name":"binary","slug":"binary","permalink":"http://laclic.github.io/tags/binary/"},{"name":"array","slug":"array","permalink":"http://laclic.github.io/tags/array/"},{"name":"set","slug":"set","permalink":"http://laclic.github.io/tags/set/"},{"name":"multiset","slug":"multiset","permalink":"http://laclic.github.io/tags/multiset/"},{"name":"dpkt","slug":"dpkt","permalink":"http://laclic.github.io/tags/dpkt/"},{"name":"packet capture","slug":"packet-capture","permalink":"http://laclic.github.io/tags/packet-capture/"},{"name":"recursion","slug":"recursion","permalink":"http://laclic.github.io/tags/recursion/"},{"name":"Problem Remains","slug":"Problem-Remains","permalink":"http://laclic.github.io/tags/Problem-Remains/"},{"name":"big(高精度)","slug":"big-高精度","permalink":"http://laclic.github.io/tags/big-%E9%AB%98%E7%B2%BE%E5%BA%A6/"},{"name":"linux","slug":"linux","permalink":"http://laclic.github.io/tags/linux/"},{"name":"c","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"existence problem","slug":"existence-problem","permalink":"http://laclic.github.io/tags/existence-problem/"},{"name":"format","slug":"format","permalink":"http://laclic.github.io/tags/format/"},{"name":"ubuntu","slug":"ubuntu","permalink":"http://laclic.github.io/tags/ubuntu/"},{"name":"shell","slug":"shell","permalink":"http://laclic.github.io/tags/shell/"},{"name":"vnt-chain","slug":"vnt-chain","permalink":"http://laclic.github.io/tags/vnt-chain/"},{"name":"block chain","slug":"block-chain","permalink":"http://laclic.github.io/tags/block-chain/"},{"name":"array list","slug":"array-list","permalink":"http://laclic.github.io/tags/array-list/"},{"name":"wsl","slug":"wsl","permalink":"http://laclic.github.io/tags/wsl/"},{"name":"string and point","slug":"string-and-point","permalink":"http://laclic.github.io/tags/string-and-point/"},{"name":"deque","slug":"deque","permalink":"http://laclic.github.io/tags/deque/"},{"name":"circle","slug":"circle","permalink":"http://laclic.github.io/tags/circle/"},{"name":"spider","slug":"spider","permalink":"http://laclic.github.io/tags/spider/"},{"name":"data structure","slug":"data-structure","permalink":"http://laclic.github.io/tags/data-structure/"},{"name":"Leetcode","slug":"Leetcode","permalink":"http://laclic.github.io/tags/Leetcode/"},{"name":"Flutter","slug":"Flutter","permalink":"http://laclic.github.io/tags/Flutter/"},{"name":"Deprecation","slug":"Deprecation","permalink":"http://laclic.github.io/tags/Deprecation/"},{"name":"Exception","slug":"Exception","permalink":"http://laclic.github.io/tags/Exception/"},{"name":"Default","slug":"Default","permalink":"http://laclic.github.io/tags/Default/"}]}