{"meta":{"title":"LacLic's Blog","subtitle":"Living with bustle, hearing of isolation.","description":"","author":"LacLic Vanilla","url":"http://laclic.github.io","root":"/"},"pages":[{"title":"tags","date":"2020-11-29T06:38:30.000Z","updated":"2020-11-29T06:43:34.854Z","comments":true,"path":"tags/index.html","permalink":"http://laclic.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"FZU2021-0xd2-Dividing","slug":"FZU2021-0xd2-Dividing","date":"2021-02-09T01:22:42.000Z","updated":"2021-02-09T01:30:55.819Z","comments":true,"path":"2021/02/09/FZU2021-0xd2-Dividing/","link":"","permalink":"http://laclic.github.io/2021/02/09/FZU2021-0xd2-Dividing/","excerpt":"","text":"题意有两个人捡到了一组大理石，价值有1-6元，它们的个数分别有n1-n6个（总数不超过20000个）。 问，两人想以价值为基准平摊这组大理石，请你设计一个程序告诉他们能不能平摊 思路计算价值总和total，除以2得到target，通过dp计算出，能不能凑出价值为target的大理石组 剪枝：若total为奇数，必不可能成功 状态转移同前一题，每种大理石都去试一次 另外，记录使用大理石个数时，只有之前无法凑出的数字才需要使用新的大理石 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;cstdio&gt;#include &lt;cstring&gt;int main(int argc, char const *argv[])&#123; // freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin); int n[7]; struct &#123; int isTrue[60006]; // int isTrue[36]; int used[60006]; // int used[36]; &#125; dp; int cnt=0; while(1) &#123; scanf(&quot;%d %d %d %d %d %d&quot;,&amp;n[1],&amp;n[2],&amp;n[3],&amp;n[4],&amp;n[5],&amp;n[6]); if(!n[1]&amp;&amp;!n[2]&amp;&amp;!n[3]&amp;&amp;!n[4]&amp;&amp;!n[5]&amp;&amp;!n[6]) break; ++cnt; memset(dp.isTrue,0,sizeof(dp.isTrue)); dp.isTrue[0] = 1; int target=0; for(int i=1;i&lt;=6;++i) &#123; target += i*n[i]; &#125; if(target%2==1) &#123; printf(&quot;Collection #%d:\\nCan&#x27;t be divided.\\n\\n&quot;,cnt); dp.isTrue[target] = 0; continue; &#125; target /= 2; for(int i=1;i&lt;=6;++i) &#123; memset(dp.used,0,sizeof(dp.used)); for(int j=i;j&lt;=target;++j) &#123; if(dp.isTrue[j-i]&amp;&amp;dp.used[j-i]&lt;n[i]&amp;&amp;!dp.isTrue[j]) &#123; // 上一种dp能否凑出相应价值来，上一种dp用了多少第i种石头，该种dp是否之前就能凑出来了 dp.isTrue[j] = 1; dp.used[j] = dp.used[j-i] + 1; &#125; &#125; &#125; here: ; if(dp.isTrue[target]) printf(&quot;Collection #%d:\\nCan be divided.\\n\\n&quot;,cnt); else printf(&quot;Collection #%d:\\nCan&#x27;t be divided.\\n\\n&quot;,cnt); &#125; return 0;&#125;","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"c++","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"dynamic programming","slug":"dynamic-programming","permalink":"http://laclic.github.io/tags/dynamic-programming/"}]},{"title":"深度学习：构建神经网络并识别手写数字","slug":"深度学习：构建神经网络并识别手写数字","date":"2021-02-08T04:14:19.000Z","updated":"2021-02-08T04:29:22.523Z","comments":true,"path":"2021/02/08/深度学习：构建神经网络并识别手写数字/","link":"","permalink":"http://laclic.github.io/2021/02/08/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%9A%E6%9E%84%E5%BB%BA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%B9%B6%E8%AF%86%E5%88%AB%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97/","excerpt":"","text":"效果可以看出（10个数据，分别是认为该数字为0-9的程度，最后取最高的那个即为结果）基本能正确识别 但是1和7，4和9还是不太容易识别的 github链接Github. 全代码（ipynb）引入库1234567import numpy# scipy.special for the sigmoid function expit()import scipy.special# library for plotting arraysimport matplotlib.pyplot# (?) ensure the plots are inside this notebook, not an external window# %matplotlib inline 构建神经网络类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778class neuralNetwork(): # neural network class definition # initialize the neural network def __init__(self, inputNodes, hiddenNodes, outputNodes, learningRate): # set number of nodes in each input, hidden, output layer self.iNodes = inputNodes self.hNodes = hiddenNodes self.oNodes = outputNodes # learning rate self.learnRate = learningRate # link weight matrices, wih and who # weight inside the arrays are w_i_j, where link is from node i to node j in the next layer # w11 w21 # w12 w22 etc self.wih = numpy.random.normal( 0.0, pow(self.hNodes, -0.5), (self.hNodes, self.iNodes)) self.who = numpy.random.normal( 0.0, pow(self.oNodes, -0.5), (self.oNodes, self.hNodes)) # annoymous func self.actiFunc = lambda x: scipy.special.expit(x) # train the neural network def train(self, inputs_list, targets_list): # convert inputs and targets list to 2d array inputs = numpy.array(inputs_list, ndmin=2).T targets = numpy.array(targets_list, ndmin=2).T # calculate signals into hidden layer hidden_inputs = numpy.dot(self.wih, inputs) # calculate the signals emerging from hidden layer hidden_outputs = self.actiFunc(hidden_inputs) # calculate signals into final output layer final_inputs = numpy.dot(self.who, hidden_outputs) # calculate the signals emerging from final output layer final_outputs = self.actiFunc(final_inputs) # error is the difference of target and output output_errors = targets - final_inputs # hidden layer error is the output_errors, split by weights, recombined at hidden nodes hidden_errors = numpy.dot(self.who.T, output_errors) # update the weights for the links between the hidden and output layers self.who += self.learnRate * \\ numpy.dot((output_errors*final_outputs*(1.0-final_outputs)), numpy.transpose(hidden_outputs)) &quot;&quot;&quot; self.who += self.learnRate * \\ numpy.dot((output_errors*final_outputs*(1.0-final_outputs)), hidden_outputs.T)&quot;&quot;&quot; # between the input and hidden layers self.wih += self.learnRate * \\ numpy.dot((hidden_errors*hidden_outputs * (1.0 - hidden_outputs)), numpy.transpose(inputs)) # query the neural network def query(self, inputs_list): # convert inputs list to 2d array inputs = numpy.array(inputs_list, ndmin=2).T # calculate signals into hidden layer hidden_inputs = numpy.dot(self.wih, inputs) # calculate the signals emerging from hidden layer hidden_outputs = self.actiFunc(hidden_inputs) # calculate signals into final output layer final_inputs = numpy.dot(self.who, hidden_outputs) # calculate the signals emerging from final output layer final_outputs = self.actiFunc(final_inputs) return final_outputs 网络布置12345input_nodes = 784 # 28*28hidden_nodes = 100output_nodes = 10learning_rate = 0.3network = neuralNetwork(input_nodes, hidden_nodes, output_nodes, learning_rate) 打开训练数据文件1234with open(&#x27;train.csv&#x27;, &#x27;r&#x27;) as data_file: data_list = data_file.readlines()[1:] # 除首行外，全部读取到内存中 # print(data_list) data_file.close() 训练神经网络123456789101112131415for record in data_list: all_values = record.split(&#x27;,&#x27;) # make data into 0.01 ~ 1.00 &quot;&quot;&quot; Remains problem (why?) 0.01: prevent 0.00 leading to failing to update the weight 1.00: just preventing the output value being 1.00 is enough &quot;&quot;&quot; inputs = (numpy.asfarray(all_values[1:])/255.0 * 0.99) + 0.01 # create the target output values (all 0.01, except the desired label which is 0.99) # numpy.zeros(): use 0 to pad the array targets = numpy.zeros(output_nodes) + 0.01 # all_values[0] is the label of the record targets[int(all_values[0])] = 0.99 network.train(inputs, targets) 打开测试数据集test.csv里的数据集是无标签的 1234# load the test data CSV file into a listwith open(&#x27;test.csv&#x27;, &#x27;r&#x27;) as test_data_file: test_data_list = test_data_file.readlines()[1:] test_data_file.close() 测试数据并输出使用test.csv的数据集进行测试输出（无标签） 123456# from test.csvtest = test_data_list[0] # 调度第0个测试数据test_values = test.split(&#x27;,&#x27;)test_inputs = (numpy.asfarray(test_values)/255.0 * 0.99) + 0.1print(network.query(test_inputs))# print(test_data_list[0].strip().split(&#x27;,&#x27;)) 使用train.csv的数据集进行测试输出（带标签） 123456# from train.csvtest = data_list[999]print(&#x27;Answer is&#x27;, test[0])test_values = test.split(&#x27;,&#x27;)test_inputs = (numpy.asfarray(test_values[1:])/255.0 * 0.99) + 0.1print(network.query(test_inputs)) 疑难杂症tenserflow把numpy卸载了…没关系，会安装对应版本的numpy的 Python关于%matplotlib inline报错这个是 jupyter notebook 或者 jupyter qtconsole 的专属代码，使用%matplotlib inline这段代码可以输出图像。但是vscode编辑器并没有这个功能。（但这并不妨碍vscode是宇宙第一编辑器的事实） FileNotFoundError12345PS F:\\Programme_works\\Python&gt; python -u &quot;f:\\Programme_works\\Python\\DeepLearning\\numRecog\\neuralNetwork.py&quot;Traceback (most recent call last): File &quot;f:\\Programme_works\\Python\\DeepLearning\\numRecog\\neuralNetwork.py&quot;, line 106, in \\&lt;module\\&gt; with open(&#x27;train.csv&#x27;, &#x27;r&#x27;) as data_file:FileNotFoundError: [Errno 2] No such file or directory: &#x27;train.csv&#x27; 未找到文件，检查一下文件是否在命令执行时的目录（一般都是vscode打开的文件夹，或者jupyter notebook运行的文件所在的文件夹） 非jupyter编辑器输出csv图像将 1matplotlib.pyplot.imshow(image_array, cmap=&#x27;Greys&#x27;, interpolation=&#x27;None&#x27;) 改为 1matplotlib.pyplot.imsave(&#x27;temp.png&#x27;, image_array, cmap=&#x27;Greys&#x27;) 便会保存在目录下","categories":[],"tags":[{"name":"deep learning","slug":"deep-learning","permalink":"http://laclic.github.io/tags/deep-learning/"},{"name":"computer vision","slug":"computer-vision","permalink":"http://laclic.github.io/tags/computer-vision/"},{"name":"neural network","slug":"neural-network","permalink":"http://laclic.github.io/tags/neural-network/"}]},{"title":"FZUACM-动规DP爆锤计划！（持续更新ing...）","slug":"FZUACM-动规DP爆锤计划！","date":"2021-02-07T03:09:56.000Z","updated":"2021-02-09T01:32:08.916Z","comments":true,"path":"2021/02/07/FZUACM-动规DP爆锤计划！/","link":"","permalink":"http://laclic.github.io/2021/02/07/FZUACM-%E5%8A%A8%E8%A7%84DP%E7%88%86%E9%94%A4%E8%AE%A1%E5%88%92%EF%BC%81/","excerpt":"","text":"DP教程程序员小灰的漫画解DP. 强推！图很多，思路也很清晰。 题目题解（内含题目大意）所有题目复制到百度上都能找到oj题（たぶん） 01(hex)买咖啡-Charlie’s Change 02(hex)分石头-Dividing","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"dynamic programming","slug":"dynamic-programming","permalink":"http://laclic.github.io/tags/dynamic-programming/"}]},{"title":"FZU2021-0xd1-Charlie's Change","slug":"FZU2021-0xd1-Charlie-s-Change","date":"2021-02-06T13:20:56.000Z","updated":"2021-02-07T03:18:10.967Z","comments":true,"path":"2021/02/06/FZU2021-0xd1-Charlie-s-Change/","link":"","permalink":"http://laclic.github.io/2021/02/06/FZU2021-0xd1-Charlie-s-Change/","excerpt":"","text":"题意有一个人想买咖啡，现在告诉你一杯咖啡P分钱，他身上有c1,c2,c3,c4个1分,5分,10分,25分硬币。 问：在不找零的情况下，他至多能用多少个硬币（并输出分别要用多少个硬币）？ 思路状态转移（最优子问题）： 4种硬币，每种都有用/不用的选项 所以F(e) = min{F(e-1),F(e-5),F(e-10),F(e-25)} 且F(0) = 0（咖啡不要钱，一个硬币也不能使用） 接下来就是从简单开始（就像数学归纳法一样，整体思路就是数学中的化归） 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include &lt;cstdio&gt;#include &lt;cstring&gt;// F(a,b,c,d,e) = min&#123;F(a-1,b,c,d,e-1),F(a,b-1,c,d,e-5),F(a,b,c-1,d,e-10),F(a,b,c,d-1,e-25)&#125;int main(int argc, char const *argv[])&#123; // freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin); int money[] = &#123;1,5,10,25&#125;; struct _dp&#123; int max[10006]; // How many coins can be used as much as possible int from[10006]; // which dp is this dp from &#125; dp; int C[4],P; int used[10006]; while(1) &#123; scanf(&quot;%d %d %d %d %d&quot;,&amp;P,&amp;C[0],&amp;C[1],&amp;C[2],&amp;C[3]); if(P==0) break; memset(dp.max,-10060,sizeof(dp.max)); memset(dp.from,0,sizeof(dp.from)); dp.from[0] = -1; // board dp.max[0] = 0; // board for(int i=0;i&lt;4;++i) &#123; memset(used,0,sizeof(used)); for(int j=money[i];j&lt;=P;++j) &#123; if(dp.max[j-money[i]]&gt;=0&amp;&amp;dp.max[j-money[i]]+1&gt;dp.max[j]&amp;&amp;used[j-money[i]]+1&lt;=C[i]) &#123; // previous dp exists, max increases if use this coin, the used coin num is no more than total coins dp.max[j] = dp.max[j-money[i]] + 1; dp.from[j] = j-money[i]; used[j] = used[j-money[i]] + 1; &#125; &#125; &#125; if(dp.max[P]&lt;0) printf(&quot;Charlie cannot buy coffee.\\n&quot;); else &#123; int now = P; // derive back int coin[4] = &#123;0&#125;; while(dp.from[now]!=-1) &#123; switch(now-dp.from[now]) &#123; case 1: ++coin[0]; break; case 5: ++coin[1]; break; case 10: ++coin[2]; break; case 25: ++coin[3]; break; &#125; now = dp.from[now]; &#125; printf(&quot;Throw in %d cents, %d nickels, %d dimes, and %d quarters.\\n&quot;,coin[0],coin[1],coin[2],coin[3]); &#125; &#125; return 0;&#125;","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"c++","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"dynamic programming","slug":"dynamic-programming","permalink":"http://laclic.github.io/tags/dynamic-programming/"}]},{"title":"FZU2021-0x17-Find a way","slug":"FZU2021-0x17-Find-a-way","date":"2021-02-05T13:08:29.000Z","updated":"2021-02-06T13:20:03.278Z","comments":true,"path":"2021/02/05/FZU2021-0x17-Find-a-way/","link":"","permalink":"http://laclic.github.io/2021/02/05/FZU2021-0x17-Find-a-way/","excerpt":"","text":"题意有两个人YFF和MCK在宁波，想要去肯德基（KFC）面基，现在告诉你YFF和MCK二人的位置，并告诉你所有KFC店家的位置，以及路况地图。请问至少要走多远（步数*11）才能一起到达KFC（任意一家）见面？ 思路由于可能存在多家KFC，使用A*算法可能时间爆炸，我们使用广度优先搜索（bfs），把走到地图上任意位置的步数都标注，最后一个个相加取最小值即可。 小技巧：把边框用’#’围起来，代表不可通过边界。 另外，地图上的一家KFC可能被封死。 代码另外，初始化边框的时候注意测试非正方形道路（非方阵）情况，不要因为写成同一个数据而debug半天（指我）。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;queue&gt;using namespace std;int Y[202][202];int M[202][202];typedef struct _pos&#123; int X; int Y;&#125;Pos;typedef struct _round&#123; Pos pos; int step;&#125;Round;queue&lt;Round&gt; que;void go(int(*who)[202]) &#123; while(!que.empty()) &#123; Round temp = que.front(); que.pop(); if(who[temp.pos.X+1][temp.pos.Y]==0) &#123; que.push(&#123;&#123;temp.pos.X+1,temp.pos.Y&#125;,temp.step+1&#125;); who[temp.pos.X+1][temp.pos.Y] = temp.step; &#125; if(who[temp.pos.X-1][temp.pos.Y]==0) &#123; que.push(&#123;&#123;temp.pos.X-1,temp.pos.Y&#125;,temp.step+1&#125;); who[temp.pos.X-1][temp.pos.Y] = temp.step; &#125; if(who[temp.pos.X][temp.pos.Y+1]==0) &#123; que.push(&#123;&#123;temp.pos.X,temp.pos.Y+1&#125;,temp.step+1&#125;); who[temp.pos.X][temp.pos.Y+1] = temp.step; &#125; if(who[temp.pos.X][temp.pos.Y-1]==0) &#123; que.push(&#123;&#123;temp.pos.X,temp.pos.Y-1&#125;,temp.step+1&#125;); who[temp.pos.X][temp.pos.Y-1] = temp.step; &#125; &#125;/* for(int i=0;i&lt;=6;++i) &#123; // debug for(int j=0;j&lt;=6;++j) &#123; printf(&quot;%2d&quot;,who[i][j]); &#125; printf(&quot;\\n&quot;); &#125; printf(&quot;\\n&quot;);*/&#125;int main(int argc, char const *argv[])&#123; int n,m; char temp; Pos YFF,MCK; while(scanf(&quot;%d %d&quot;,&amp;n,&amp;m)!=EOF) &#123; int n1 = n+1, m1 = m+1; queue&lt;Pos&gt; KFC; for(int i=1;i&lt;=n1;++i) &#123; Y[i][0] = -1; Y[i][m1] = -1; M[i][0] = -1; M[i][m1] = -1; &#125; for(int j=1;j&lt;=m1;++j) &#123; Y[0][j] = -1; Y[n1][j] = -1; // Y[m1][j] = -1; 低级错误 M[0][j] = -1; M[n1][j] = -1; // M[m1][j] = -1; 低级错误 &#125;/* for(int i=0;i&lt;=7;++i) &#123; // debug for(int j=0;j&lt;=7;++j) &#123; printf(&quot;%2d&quot;,Y[i][j]); &#125; printf(&quot;\\n&quot;); &#125; printf(&quot;\\n&quot;);*/ for(int i=1;i&lt;=n;++i) &#123; getchar(); for(int j=1;j&lt;=m;++j) &#123; scanf(&quot;%c&quot;,&amp;temp); switch (temp) &#123; case &#x27;Y&#x27;: &#123; YFF.X = i; YFF.Y = j; Y[i][j] = 0; M[i][j] = 0; break; &#125; case &#x27;M&#x27;:&#123; MCK.X = i; MCK.Y = j; Y[i][j] = 0; M[i][j] = 0; break; &#125; case &#x27;#&#x27;:&#123; Y[i][j] = -1; M[i][j] = -1; break; &#125; case &#x27;.&#x27;:&#123; Y[i][j] = 0; M[i][j] = 0; break; &#125; case &#x27;@&#x27;:&#123; Y[i][j] = 0; M[i][j] = 0; KFC.push(&#123;i,j&#125;); break; &#125; &#125; &#125; &#125; que.push(&#123;YFF,1&#125;); Y[YFF.X][YFF.Y] = 1; go(Y); Y[YFF.X][YFF.Y] = 0; que.push(&#123;MCK,1&#125;); M[MCK.X][MCK.Y] = 1; go(M); M[MCK.X][MCK.Y] = 0; unsigned long long min = -1; while(!KFC.empty()) &#123; Pos temp = KFC.front(); KFC.pop(); if(Y[temp.X][temp.Y]==0&amp;&amp;M[temp.X][temp.Y]==0) continue; // 道路被封死 if(min&gt;Y[temp.X][temp.Y]+M[temp.X][temp.Y]) &#123; min = Y[temp.X][temp.Y]+M[temp.X][temp.Y]; &#125; &#125; printf(&quot;%lld\\n&quot;,min*11); &#125; return 0;&#125;","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"c++","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"search","slug":"search","permalink":"http://laclic.github.io/tags/search/"},{"name":"broad first search","slug":"broad-first-search","permalink":"http://laclic.github.io/tags/broad-first-search/"}]},{"title":"Codeforces-Knights of a Polygonal Table","slug":"Codeforces-Knights-of-a-Polygonal-Table","date":"2021-02-03T01:52:27.000Z","updated":"2021-02-02T06:15:06.145Z","comments":true,"path":"2021/02/03/Codeforces-Knights-of-a-Polygonal-Table/","link":"","permalink":"http://laclic.github.io/2021/02/03/Codeforces-Knights-of-a-Polygonal-Table/","excerpt":"","text":"题意现在有n个骑士，每个骑士最多能杀k个其他力量弱于自己的骑士（每个骑士的力量都不同），并抢走他们的钱。问：对于每个骑士，当只有自己能杀其他骑士的时候，最多能抢到多少钱。 思路将所有骑士，标记上他们原来输入时的位置后（因为输出要按位置顺序输出），重新按力量从小到大排序。当遍历到第i个骑士时，所有第i个之前的骑士所持有的钱数按从大到小排序，取最前的k个（不足k则能抢多少抢多少）。 实现钱数排序的方法，有个小窍门，就只要在遍历的时候，每次将他前面那个人的钱放入到从大到小排序的容器即可。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;map&gt;using namespace std;typedef struct _knight &#123; int num; int coin;&#125;Knight;int main(int argc, char const *argv[])&#123; int n,k; scanf(&quot;%d %d&quot;,&amp;n,&amp;k); int a[n]; map&lt;int,Knight&gt; mapp; // &lt;power,coins&gt; Knight temp; long long ans[n]; // 数据较大，需要用long long for(int i=0;i&lt;n;++i) &#123; scanf(&quot;%d&quot;,&amp;a[i]); &#125; for(int i=0;i&lt;n;++i) &#123; scanf(&quot;%d&quot;,&amp;temp.coin); temp.num = i; mapp[a[i]] = temp; &#125; map&lt;int,int,greater&lt;int&gt;&gt; coins; map&lt;int,Knight&gt;::iterator it=mapp.begin(); ans[it-&gt;second.num] = it-&gt;second.coin; ++coins[it-&gt;second.coin]; ++it; for(;it!=mapp.end();++it) &#123; ans[it-&gt;second.num] = it-&gt;second.coin; int cnt=0; for(map&lt;int,int&gt;::iterator it_coin=coins.begin();it_coin!=coins.end();++it_coin) &#123; for(int remain=it_coin-&gt;second;remain;--remain) &#123; if(cnt&gt;=k) goto here; ans[it-&gt;second.num] += it_coin-&gt;first; ++cnt; &#125; &#125; here: ; ++coins[it-&gt;second.coin]; &#125; for(int i=0;i&lt;n;++i) &#123; printf(&quot;%lld &quot;,ans[i]); &#125; return 0;&#125;","categories":[],"tags":[{"name":"c++","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"sort","slug":"sort","permalink":"http://laclic.github.io/tags/sort/"}]},{"title":"Codeforces-Polycarp and Div 3","slug":"Codeforces-Polycarp-and-Div-3","date":"2021-02-03T01:26:16.000Z","updated":"2021-02-02T05:54:18.336Z","comments":true,"path":"2021/02/03/Codeforces-Polycarp-and-Div-3/","link":"","permalink":"http://laclic.github.io/2021/02/03/Codeforces-Polycarp-and-Div-3/","excerpt":"","text":"题意给定一个很长的数字串，现在要你将其分割为很多小子串，使得能被3整除的子数字串最多，输出最多有多少个。 思路分情况：对于数字串中，新开始的一位：（mod3代表对3取余） 若本身mod3就是0，直接成为一个符合条件的串，前面的舍弃 若与前面串之和mod3为0，则一起成为符合条件的串 若与前面串之和-最首位后，mod3为0，则成为符合条件的串，最首位舍弃 都不符合，则前往下一位 当然有一个可能的例外，比如最首2位都去掉才能变成mod3位0呢？ 答：因为mod3只会有3中情况，0，1，2。最首位（head1）为0则直接自成一串。head1为1时，首第二位（head2）mod3为0则自成一串，head1舍弃；head2 mod3为2，则合成一串；head2为1时，再前往下一位；若再下一位（head3）为0，自成一串；若为1，head1+2+3合成一串，若为2，则head2+3合成一串，舍弃head1，完美填满了所有情况，head1 mod3为2时同理，所以只需要记录一个head1即可。 代码123456789101112131415161718192021222324252627282930313233343536373839#include &lt;cstdio&gt;char a[200006];int main(int argc, char const *argv[])&#123; scanf(&quot;%s&quot;,a); int cnt=0,total=0,head; head = a[0] - &#x27;0&#x27;; for(int i=0;a[i]!=0;) &#123; if(a[i]%3==0) &#123; ++cnt; ++i; head = a[i] - &#x27;0&#x27;; total = 0; continue; &#125;else &#123; total += a[i] - &#x27;0&#x27;; if(total%3==0) &#123; ++cnt; ++i; head = a[i] - &#x27;0&#x27;; total = 0; continue; &#125; if(head!=total&amp;&amp;(total-head)%3==0) &#123; ++cnt; ++i; head = a[i] - &#x27;0&#x27;; total = 0; continue; &#125; ++i; &#125; &#125; printf(&quot;%d&quot;,cnt); return 0;&#125;","categories":[],"tags":[{"name":"c++","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"string","slug":"string","permalink":"http://laclic.github.io/tags/string/"}]},{"title":"Codeforces-Fingerprints","slug":"Codeforces-Fingerprints","date":"2021-02-02T05:52:46.000Z","updated":"2021-02-07T03:18:49.286Z","comments":true,"path":"2021/02/02/Codeforces-Fingerprints/","link":"","permalink":"http://laclic.github.io/2021/02/02/Codeforces-Fingerprints/","excerpt":"","text":"题意其实有点没看懂，大意就是，给定n和k，给你n个数，再告诉你其中k个数上有标记，现在让你按输入这n个数时的顺序，输出所有有标记的数。 思路将k个数写入一个数组，0为没标记，1为有标记，最后去遍历n个数的数组，有标记就输出 代码1234567891011121314151617181920212223242526272829303132333435#include &lt;cstdio&gt;int main(int argc, char const *argv[])&#123; int n,m; scanf(&quot;%d %d&quot;,&amp;n,&amp;m); int a[n],mapp[10]=&#123;0&#125;,temp; for(int i=0;i&lt;n;++i) &#123; scanf(&quot;%d&quot;,&amp;a[i]); &#125; for(int i=0;i&lt;m;++i) &#123; scanf(&quot;%d&quot;,&amp;temp); ++mapp[temp]; &#125; int i=0, flag=0; for(i;i&lt;n;++i) &#123; if(mapp[a[i]]==1) &#123; printf(&quot;%d&quot;,a[i]); flag = 1; ++i; break; &#125; &#125; for(;i&lt;n;++i) &#123; if(mapp[a[i]]==1) &#123; printf(&quot; %d&quot;,a[i]); &#125; &#125; if(flag) &#123; printf(&quot;\\n&quot;); &#125;else &#123; printf(&quot;\\n&quot;); &#125; return 0;&#125;","categories":[],"tags":[{"name":"c++","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"}]},{"title":"Codeforces-Delete from the Left","slug":"Codeforces-Delete-from-the-Left","date":"2021-02-02T03:44:23.000Z","updated":"2021-02-02T04:23:41.599Z","comments":true,"path":"2021/02/02/Codeforces-Delete-from-the-Left/","link":"","permalink":"http://laclic.github.io/2021/02/02/Codeforces-Delete-from-the-Left/","excerpt":"","text":"题意给定2个字符串，你只能将两个字符串从左往右删减，直到他们完全相同或同为空字符串 思路这题目是经典的说反话，其实应该从右往左看，找到最长的相同串即可 代码1234567891011121314151617181920#include &lt;cstdio&gt;#include &lt;cstring&gt;char s[200006],t[200006];int main(int argc, char const *argv[])&#123; scanf(&quot;%s %s&quot;,&amp;s[1],&amp;t[1]); s[0] = &#x27;A&#x27;, t[0] = &#x27;B&#x27;; // 使用不可能出现的串标记最后一位，作为退出标志 int nowS = strlen(s), nowT = strlen(t); int sum = nowS + nowT - 2; int cnt = -1; // 从&#x27;\\0&#x27;开始 while(s[nowS]==t[nowT]) &#123; ++cnt; --nowS; --nowT; &#125; printf(&quot;%d&quot;,sum - cnt*2); return 0;&#125;","categories":[],"tags":[{"name":"c++","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"string","slug":"string","permalink":"http://laclic.github.io/tags/string/"}]},{"title":"Codeforces-Summarize to the Power of Two","slug":"Codeforces-Summarize-to-the-Power-of-Two","date":"2021-02-01T04:24:19.000Z","updated":"2021-02-02T05:26:41.520Z","comments":true,"path":"2021/02/01/Codeforces-Summarize-to-the-Power-of-Two/","link":"","permalink":"http://laclic.github.io/2021/02/01/Codeforces-Summarize-to-the-Power-of-Two/","excerpt":"","text":"题意给定一个有n个数字（每个数字≤10^9^）的数组。 对于每个数，需要你找出，该数组中，是否存在一个其他数，使得两数相加之和为2的整数次方。 输出不符合上述条件的数据个数。 思路将2的整数次方列成表，减去当前数，得到所需要的数，一个个查过去数组内是否存在所需要的数 代码12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;map&gt;using namespace std;map&lt;int,int&gt; mapp;int table[] = &#123;1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152,4194304,8388608,16777216,33554432,67108864,134217728,268435456,536870912,1073741824,0&#125;;int check(int x) &#123; int i=0; --mapp[x]; for(;table[i]&lt;=x;++i) ; for(;table[i]!=0;++i) &#123; if(mapp[table[i]-x]) &#123; ++mapp[x]; return 1; &#125; &#125; return 0;&#125;int main(int argc, char const *argv[])&#123; int n; scanf(&quot;%d&quot;,&amp;n); int a[n],cnt=0; // plz initialize the counter, onnegai....orz... for(int i=0;i&lt;n;++i) &#123; scanf(&quot;%d&quot;,&amp;a[i]); ++mapp[a[i]]; &#125; for(int i=0;i&lt;n;++i) &#123; if(!check(a[i])) ++cnt; &#125; printf(&quot;%d\\n&quot;,cnt); return 0;&#125;","categories":[],"tags":[{"name":"c++","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"search","slug":"search","permalink":"http://laclic.github.io/tags/search/"},{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"map","slug":"map","permalink":"http://laclic.github.io/tags/map/"}]},{"title":"Codeforces-Tanya and Stairways","slug":"Codeforces-Tanya-and-Stairways","date":"2021-02-01T03:33:55.000Z","updated":"2021-02-02T03:42:25.722Z","comments":true,"path":"2021/02/01/Codeforces-Tanya-and-Stairways/","link":"","permalink":"http://laclic.github.io/2021/02/01/Codeforces-Tanya-and-Stairways/","excerpt":"","text":"题意有一座很高的建筑，有很多层，每一层都有很多阶梯（可能不一样，这到底是什么鬼建筑），现在告诉你一共有几个阶梯，并且告诉你每个阶梯是当前层的第几阶 现在要你求出有多少层，并且每层有多少阶梯。 思路每检测到第1阶的时候，层数+1，并记录上一层的有多少阶梯。 首个就随便给个数据，之后弃用。 最后一层的阶梯数信息还存储在阶数计数器中，直接在最后读取即可。 代码1234567891011121314151617181920212223242526272829303132#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;queue&gt;using namespace std;int main(int argc, char const *argv[])&#123; int n; scanf(&quot;%d&quot;,&amp;n); int cnt=0,temp,max; queue&lt;int&gt; que; for(;n;--n) &#123; scanf(&quot;%d&quot;,&amp;temp); if(temp==1) &#123; // 检测到阶数==1 que.push(max); // 将层数推入队列 max = temp; ++cnt; &#125;else &#123; max = temp; &#125; &#125; printf(&quot;%d\\n&quot;,cnt); que.pop(); // 第一个数据是无效的，踢出队列 while(!que.empty()) &#123; printf(&quot;%d &quot;,que.front()); que.pop(); &#125; printf(&quot;%d&quot;,max); // 最后一层的阶数 return 0;&#125;","categories":[],"tags":[{"name":"c++","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"}]},{"title":"Codeforces-Buying a TV Set","slug":"Codeforces-Buying-a-TV-Set","date":"2021-01-31T03:24:00.000Z","updated":"2021-02-02T03:34:51.154Z","comments":true,"path":"2021/01/31/Codeforces-Buying-a-TV-Set/","link":"","permalink":"http://laclic.github.io/2021/01/31/Codeforces-Buying-a-TV-Set/","excerpt":"","text":"题意有个人（摩诺卡普Monocarp）给自家的墙装个电视，商店街的电视尺寸只有一种比例的，而且长宽均为整数（题外话：汗…要是换个单位，小数不也能变整数） 现在告诉你他家的墙的长宽，和其中一种尺寸的电视的长宽，请问至多能买多少种尺寸的电视？ 思路将电视长宽分解，得出互质的长宽比例（长除以最大公约数gcd，宽同理），然后算出墙长最多能容纳多少种电视，宽同理，二者取最小值即为答案。 代码123456789101112131415161718192021#include &lt;cstdio&gt;int main(int argc, char const *argv[])&#123; long long a,b,x,y; scanf(&quot;%lld %lld %lld %lld&quot;,&amp;a,&amp;b,&amp;x,&amp;y); // 数据较大，用longlong long long xx=x,yy=y,temp; do &#123; temp = xx%yy; xx = yy; yy = temp; &#125;while(temp!=0); // gcd is xx x /= xx; y /= xx; long long count_x = a/x; long long count_y = b/y; long long ans = count_x&gt;count_y?count_y:count_x; printf(&quot;%lld&quot;,ans); return 0;&#125;","categories":[],"tags":[{"name":"c++","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"gcd","slug":"gcd","permalink":"http://laclic.github.io/tags/gcd/"}]},{"title":"Codeforces-Heist","slug":"Codeforces-Heist","date":"2021-01-31T03:18:37.000Z","updated":"2021-02-02T03:23:21.314Z","comments":true,"path":"2021/01/31/Codeforces-Heist/","link":"","permalink":"http://laclic.github.io/2021/01/31/Codeforces-Heist/","excerpt":"","text":"题意有家键盘店被抢劫了，已知键盘标号是连续的（比如最小是5，最大时10，那原来至少是有标号为5，6，7，8，9，10共6把键盘）。 现在知道还剩n个键盘，并给出他们的标号，请问，至少有多少把键盘被盗走？ 思路找出标号的最大值最小值，得出原来至少有多少把键盘，减去剩余键盘数，便是被盗键盘数。 代码12345678910111213141516#include &lt;cstdio&gt;int main(int argc, char const *argv[])&#123; int n; scanf(&quot;%d&quot;,&amp;n); int temp; unsigned int max=0, min=-1; for(int i=0;i&lt;n;++i) &#123; scanf(&quot;%d&quot;,&amp;temp); if(temp&gt;max) max = temp; if(temp&lt;min) min = temp; &#125; printf(&quot;%d&quot;,max-min+1-n); return 0;&#125;","categories":[],"tags":[{"name":"c++","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"}]},{"title":"Codeforces-Problem for Nazar","slug":"Codeforces-Problem-for-Nazar","date":"2021-01-30T15:52:40.000Z","updated":"2021-01-30T15:44:07.001Z","comments":true,"path":"2021/01/30/Codeforces-Problem-for-Nazar/","link":"","permalink":"http://laclic.github.io/2021/01/30/Codeforces-Problem-for-Nazar/","excerpt":"","text":"题意将所有正整数分为奇偶两部分 1234567第一次，取1个奇数第二次，取2个偶数第三次，取4个奇数第四次，取8个偶数第五次，取16个奇数第六次，取32个偶数以此类推…… 123412 43 5 7 96 8 10 12 14 16 18 20 现在，我们要读入2个数据l和r，从第l个累加到第r个，最后结果对1000000007取余 思路将l到r根据2的n次方分为很多个小区间，计算每个小区间之和（首项+末项）×项数÷2 代码由于涉及高精度，使用python 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&quot;&quot;&quot;12 43 5 7 96 8 10 12 14 16 18 20&quot;&quot;&quot;s = input(&quot;&quot;).split()l = int(s[0])r = int(s[1])i = 0sign = 1dic = &#123;&#125;while sign &lt; l: i += 1 sign *= 2while sign &lt;= r: dic[i] = sign i += 1 sign *= 2dic[i] = signi += 1sign *= 2dic2 = &#123;&#125;ans = 0for k, v in dic.items(): # v == 2**k if k % 2 == 1: summ = (v*2-1) // (4-1) highest = 2*summ - 1 # num == 2**k - 1 num2 = v - 1 lowest = highest - v + 2 # num == 2**(k-1) num1 = v//2 if k % 2 == 0: summ = (v*2-2) // (4-1) highest = 2*summ # num == 2**k - 1 num2 = v - 1 lowest = highest - v + 2 # num == 2**(k-1) num1 = v//2 if l &gt; num1: left = (l - num1)*2 + lowest numl = l else: left = lowest numl = num1 if r &lt; num2: right = (r - num1)*2 + lowest numr = r else: right = highest numr = num2 ans += (left+right)*(numr-numl+1)//2print(ans % 1000000007, end=&#x27;&#x27;)","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://laclic.github.io/tags/python/"},{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"math","slug":"math","permalink":"http://laclic.github.io/tags/math/"}]},{"title":"Codeforces-Maxim and Biology","slug":"Codeforces-Maxim-and-Biology","date":"2021-01-30T15:43:47.000Z","updated":"2021-02-07T03:18:54.533Z","comments":true,"path":"2021/01/30/Codeforces-Maxim-and-Biology/","link":"","permalink":"http://laclic.github.io/2021/01/30/Codeforces-Maxim-and-Biology/","excerpt":"","text":"每个子串都试一遍过去 1234567891011121314151617181920212223242526272829303132333435#include &lt;cstdio&gt;inline int dis(char x,char y) &#123; int ret = x-y; ret += 26; ret %= 26; if(ret&gt;13) ret = 26 - ret; return ret;&#125;inline int formula(char* a) &#123; int ret = 0; ret += dis(a[0],&#x27;A&#x27;); ret += dis(a[1],&#x27;C&#x27;); ret += dis(a[2],&#x27;T&#x27;); ret += dis(a[3],&#x27;G&#x27;); return ret;&#125;int main(int argc, char const *argv[])&#123; int n; scanf(&quot;%d&quot;,&amp;n); char a[56]; scanf(&quot;%s&quot;,a); int count=n-3; unsigned int min = -1; for(int i=0;i&lt;count;++i) &#123; int temp = formula(&amp;a[i]); if(temp&lt;min) min = temp; &#125; printf(&quot;%d&quot;,min); return 0;&#125;","categories":[],"tags":[{"name":"c++","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"string","slug":"string","permalink":"http://laclic.github.io/tags/string/"},{"name":"brute-force","slug":"brute-force","permalink":"http://laclic.github.io/tags/brute-force/"}]},{"title":"Codeforces-Dima and a Bad XOR","slug":"Codeforces-Dima-and-a-Bad-XOR","date":"2021-01-30T15:12:20.000Z","updated":"2021-01-30T15:45:33.226Z","comments":true,"path":"2021/01/30/Codeforces-Dima-and-a-Bad-XOR/","link":"","permalink":"http://laclic.github.io/2021/01/30/Codeforces-Dima-and-a-Bad-XOR/","excerpt":"","text":"存在性问题，取所有数组的第一个，若xor结果为0，则去每个数组寻找不同于第一个的数即可，找到一个即可break 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;cstdio&gt;int main(int argc, char const *argv[])&#123; int n,m; scanf(&quot;%d %d&quot;,&amp;n,&amp;m); int a[n+1][m+1]; int chosen[n+1]; for(int i=1;i&lt;=n;++i) &#123; chosen[i] = 1; &#125; for(int i=1;i&lt;=n;++i) &#123; for(int j=1;j&lt;=m;++j) &#123; scanf(&quot;%d&quot;,&amp;a[i][j]); &#125; &#125; int sum=a[1][1]; for(int i=2;i&lt;=n;++i) &#123; sum ^= a[i][1]; &#125; if(sum==0) &#123; for(int i=1;i&lt;=n;++i) &#123; int temp = a[i][1]; for(int j=2;j&lt;=m;++j) &#123; if(temp!=a[i][j]) &#123; chosen[i] = j; sum = 1; goto out; &#125; &#125; &#125; out: ; &#125; if(sum==0) &#123; printf(&quot;NIE&quot;); &#125;else &#123; printf(&quot;TAK\\n%d&quot;,chosen[1]); for(int i=2;i&lt;=n;++i) &#123; printf(&quot; %d&quot;,chosen[i]); &#125; &#125; return 0;&#125;","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"existence","slug":"existence","permalink":"http://laclic.github.io/tags/existence/"},{"name":"binary","slug":"binary","permalink":"http://laclic.github.io/tags/binary/"}]},{"title":"Codeforces-Vasya And Array","slug":"Codeforces-Vasya-And-Array","date":"2021-01-30T06:31:30.000Z","updated":"2021-01-30T15:55:10.618Z","comments":true,"path":"2021/01/30/Codeforces-Vasya-And-Array/","link":"","permalink":"http://laclic.github.io/2021/01/30/Codeforces-Vasya-And-Array/","excerpt":"","text":"题意给定一个有n个数的数组，再给定一些输入t,l,r 其中，t只能为0或1 t==1时，数组中下标从l到r的数均为非递减 t==0时，数组中下标从l到r的数不全为非递减，即至少有2个是递减的，即存在i使得A_i&gt;A_(i+1) 思路先记录所有严格非递减区间的首位，经过一次变量全部标记为非递减区间（下图绿色），并将所有t==0情况压入栈中（队列也行，无先后顺序要求），最后便利栈中所有的区间，碰到的第一个非递增区间（已标记递减的亦可），标记为递减，最后处理输出 详情见图 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;stack&gt;using namespace std;typedef struct _dis &#123; int from; int to;&#125;Dis;int main(int argc, char const *argv[])&#123; int n,m,isPossible=1; scanf(&quot;%d %d&quot;,&amp;n,&amp;m); int a[n+1] = &#123;0&#125;; stack&lt;Dis&gt; stk; Dis temp; for(;m;--m) &#123; int cmd; scanf(&quot;%d %d %d&quot;,&amp;cmd,&amp;temp.from,&amp;temp.to); if(cmd==1) &#123; ++a[temp.from]; --a[temp.to]; &#125;else &#123; stk.push(temp); &#125; &#125; int flag = 0; for(int i=1;i&lt;n;++i) &#123; flag+=a[i]; if(flag) &#123; a[i] = 1; &#125; &#125; while(!stk.empty()) &#123; temp = stk.top(); stk.pop(); int i; for(i=temp.from;i&lt;temp.to;++i) &#123; if(a[i]!=1) &#123; a[i] = -1; break; &#125; &#125; if(i==temp.to) &#123; isPossible = 0; break; &#125; &#125; if(isPossible) &#123; printf(&quot;YES\\n&quot;); // int now = 1; // (WARNING: 1 ≤ ai ≤ 10^9) int now = 500000000; printf(&quot;500000000&quot;); for(int i=1;i&lt;n;++i) &#123; now += a[i]; printf(&quot; %d&quot;,now); &#125; &#125;else &#123; printf(&quot;NO&quot;); &#125; return 0;&#125;","categories":[],"tags":[{"name":"c++","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"array","slug":"array","permalink":"http://laclic.github.io/tags/array/"}]},{"title":"Codeforces-Gambling","slug":"Codeforces-Gambling","date":"2021-01-29T03:45:43.000Z","updated":"2021-01-29T04:14:40.461Z","comments":true,"path":"2021/01/29/Codeforces-Gambling/","link":"","permalink":"http://laclic.github.io/2021/01/29/Codeforces-Gambling/","excerpt":"","text":"题意有两个人纸牌游戏（相互明牌），每个人起手有n张牌，每回合由A开始再B，可丢弃自己的一张牌并给自己加分，或者丢弃对方一张牌（没有加分）。 求每个人都进行了最佳选择后，A的得分减去B的得分的值（可为负） 思路竞争性游戏，只求分差 丢弃对方一张牌其实某种意义上是给自己加分了 我的思路是2个人分别存储手牌 不过后来想想，不需要这么麻烦，其实只要一个set，光加分就够了 代码使用multiset 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;set&gt;using namespace std;int main(int argc, char const *argv[])&#123; int n,temp; scanf(&quot;%d&quot;,&amp;n); multiset&lt;int&gt; a,b; long long /*score*/sa=0,sb=0; // need long long for(int i=0;i&lt;n;++i) &#123; scanf(&quot;%d&quot;,&amp;temp); a.insert(temp); &#125; for(int i=0;i&lt;n;++i) &#123; scanf(&quot;%d&quot;,&amp;temp); b.insert(temp); &#125; multiset&lt;int&gt;::iterator ita,itb; // multi int flag; ita = a.end(); --ita; itb = b.end(); --itb; while(1) &#123; // A round: if(*ita&gt;*itb) &#123; sa += *ita; a.erase(ita); if(a.empty()) &#123; flag = 0b00; // round, empty set break; &#125; ita = a.end(); --ita; &#125;else &#123; b.erase(itb); if(b.empty()) &#123; flag = 0b01; break; &#125; itb = b.end(); --itb; &#125; // B round: if(*itb&gt;*ita) &#123; sb += *itb; b.erase(itb); if(b.empty()) &#123; flag = 0b11; break; &#125; itb = b.end(); --itb; &#125;else &#123; a.erase(ita); if(a.empty()) &#123; flag = 0b10; break; &#125; ita = a.end(); --ita; &#125; &#125; switch(flag) &#123; case 0b00: &#123; while(1) &#123; // B round: itb = b.end(); --itb; sb += *itb; b.erase(itb); if(b.empty()) break; // roop condition // A round: itb = b.end(); --itb; b.erase(itb); &#125; break; &#125; case 0b01: &#123; while(1) &#123; // B ita = a.end(); --ita; a.erase(ita); if(a.empty()) break; // A ita = a.end(); --ita; sa += *ita; a.erase(ita); &#125; break; &#125; case 0b10: &#123; while(!b.empty()) &#123; // A itb = b.end(); --itb; b.erase(itb); // B itb = b.end(); --itb; sb += *itb; b.erase(itb); &#125; break; &#125; case 0b11: &#123; while(!a.empty()) &#123; // A ita = a.end(); --ita; sa += *ita; a.erase(ita); // B ita = a.end(); --ita; a.erase(ita); &#125; &#125; break; &#125; printf(&quot;%lld&quot;,sa-sb); return 0;&#125;","categories":[],"tags":[{"name":"c++","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"set","slug":"set","permalink":"http://laclic.github.io/tags/set/"},{"name":"multiset","slug":"multiset","permalink":"http://laclic.github.io/tags/multiset/"}]},{"title":"Codeforces-Non-Coprime Partition","slug":"Codeforces-Non-Coprime-Partition","date":"2021-01-29T03:44:01.000Z","updated":"2021-01-29T04:32:14.463Z","comments":true,"path":"2021/01/29/Codeforces-Non-Coprime-Partition/","link":"","permalink":"http://laclic.github.io/2021/01/29/Codeforces-Non-Coprime-Partition/","excerpt":"","text":"题意给定一个n，求一种方式，把由1到n的数分成A、B两组，使得A之和与B之和不互质 思路存在性问题，只需要求取一种解法即可 对于所有奇数，由于1到n-1之和为((n-1)*n)/2 == (n-1)/2*n，且n-1为偶数，必含因子n。所以，把1到n-1丢入一个集合，n丢到另一个集合 对于4的倍数，由于有偶数个奇数（和必为偶数），将所有奇数和偶数分开为两个集合，必定含公约数2 对于4取模为2的数，从中间切开，得到n/2（奇数，n-1为偶数），前半部分之和(n-1)/2*n必定含因子n/2，后半部分之和(n-1)*(n/2)也必定含因子n/2 代码123456789101112131415161718192021222324252627282930313233343536373839#include &lt;cstdio&gt;int main(int argc, char const *argv[])&#123; int n; scanf(&quot;%d&quot;,&amp;n); if(n&lt;=2) printf(&quot;No&quot;); else if(n%2==1) &#123; printf(&quot;Yes\\n&quot;); printf(&quot;%d&quot;,n-1); for(int i=1;i&lt;n;++i) &#123; printf(&quot; %d&quot;,i); &#125; printf(&quot;\\n1 %d&quot;,n); &#125;else if(n%4==2)&#123; int mid = n/2; printf(&quot;Yes\\n&quot;); printf(&quot;%d&quot;,mid); for(int i=1;i&lt;=mid;++i) &#123; printf(&quot; %d&quot;,i); &#125; printf(&quot;\\n%d&quot;,mid); for(int i=mid+1;i&lt;=n;++i) &#123; printf(&quot; %d&quot;,i); &#125; &#125;else &#123; printf(&quot;Yes\\n&quot;); printf(&quot;%d&quot;,n/2); for(int i=1;i&lt;=n;i+=2) &#123; printf(&quot; %d&quot;,i); &#125; printf(&quot;\\n%d&quot;,n/2); for(int i=2;i&lt;=n;i+=2) &#123; printf(&quot; %d&quot;,i); &#125; &#125; return 0;&#125;","categories":[],"tags":[{"name":"c++","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"existence","slug":"existence","permalink":"http://laclic.github.io/tags/existence/"}]},{"title":"Codeforces-Equality","slug":"Codeforces-Equality","date":"2021-01-29T03:43:53.000Z","updated":"2021-01-29T03:47:36.115Z","comments":true,"path":"2021/01/29/Codeforces-Equality/","link":"","permalink":"http://laclic.github.io/2021/01/29/Codeforces-Equality/","excerpt":"","text":"题意给定n长度字符串，一共有前k个字母（大写），求该串中最多有多少个字符使得前k个字母的个数相同 思路给每个字母计数，最小值即为答案 代码1234567891011121314151617181920#include &lt;cstdio&gt;int main(int argc, char const *argv[])&#123; int n,k; scanf(&quot;%d %d&quot;,&amp;n,&amp;k); int mapp[26] = &#123;0&#125;; char a[n+6]; scanf(&quot;%s&quot;,a); for(int i=0;a[i]!=&#x27;\\0&#x27;;++i) &#123; ++mapp[a[i]-&#x27;A&#x27;]; // &#x27;A&#x27; == 65 &#125; unsigned int min = -1; for(int i=0;i&lt;k;++i) &#123; if(mapp[i]&lt;min) min = mapp[i]; &#125; printf(&quot;%d&quot;,min*k); return 0;&#125;","categories":[],"tags":[{"name":"c++","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"}]},{"title":"Python dpkt study note","slug":"Python-dpkt-study-note","date":"2021-01-28T12:50:50.000Z","updated":"2021-01-29T08:05:35.715Z","comments":true,"path":"2021/01/28/Python-dpkt-study-note/","link":"","permalink":"http://laclic.github.io/2021/01/28/Python-dpkt-study-note/","excerpt":"","text":"# from: https://blog.csdn.net/javajiawei/article/details/100513267 import sys import os import dpkt def checkIfHTTPRes(data): # 检查是否为HTTP协议 if len(data) &lt; 4: return False if data[:4] == str.encode(&#39;HTTP&#39;): return True return False def httpPacketParser(http): # 分析流 if checkIfHTTPRes(http): # 检查是否为HTTP协议 try: response = dpkt.http.Response(http) # 尝试以HTTP读取响应 print(response.status) except Exception as e: # print(e) pass # else: # print(&quot;Not HTTP&quot;) def tcpPacketParser(tcp): # 获取流 stream = tcp.data if len(stream): httpPacketParser(stream) # 尝试以HTTP分析流 def ipPacketParser(ip): # 获取TCP包 if isinstance(ip.data, dpkt.tcp.TCP): &quot;&quot;&quot;这里也许可以考虑一下加一条来读UDP包？&quot;&quot;&quot; tcpPacketParser(ip.data) # 分析tcp包 def decodePacket(packet): # 解码获取以太网包 eth = dpkt.ethernet.Ethernet(packet) if isinstance(eth.data, dpkt.ip.IP): ipPacketParser(eth.data) # 分析ip包 def pcapReader(filename): # 打开.pcap文件 try: with open(filename, &#39;rb&#39;) as f: capture = dpkt.pcap.Reader(f) i = 1 for timestamp, packet in capture: # 键值对，提取packet进行解码 decodePacket(packet) i += 1 except Exception as e: print(&#39;parse &#123;&#125;, error:&#123;&#125;&#39;.format(filename, e)) if __name__ == &quot;__main__&quot;: if len(sys.argv) &lt; 2: print(&#39;HELP: python &#123;&#125; &lt;PCAP_PATH&gt;&#39;.format(sys.argv[0])) sys.exit(0) # _EXIT_ filename = sys.argv[1] if filename: pcapReader(filename)","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://laclic.github.io/tags/python/"},{"name":"dpkt","slug":"dpkt","permalink":"http://laclic.github.io/tags/dpkt/"},{"name":"network","slug":"network","permalink":"http://laclic.github.io/tags/network/"},{"name":"packet capture","slug":"packet-capture","permalink":"http://laclic.github.io/tags/packet-capture/"}]},{"title":"Codeforces-Stickers and Toys","slug":"Codeforces-Stickers-and-Toys","date":"2021-01-28T05:32:16.000Z","updated":"2021-01-28T05:39:54.680Z","comments":true,"path":"2021/01/28/Codeforces-Stickers-and-Toys/","link":"","permalink":"http://laclic.github.io/2021/01/28/Codeforces-Stickers-and-Toys/","excerpt":"","text":"题意有n个健达奇趣蛋，其中有s个贴纸，t个玩具，每个蛋至多有1个贴纸、也至多有1个玩具（但可以既有1个贴纸又有1个玩具）。 问：至少要买几个，才会必定又获得玩具又获得贴纸 思路s和t取最小值，再寻找最差情况 代码1234567891011121314151617#include &lt;cstdio&gt;int main(int argc, char const *argv[])&#123; int N; scanf(&quot;%d&quot;,&amp;N); for(;N;--N) &#123; int a,b,c; scanf(&quot;%d %d %d&quot;,&amp;a,&amp;b,&amp;c); int min; if(b&gt;c) min = c; else min = b; printf(&quot;%d\\n&quot;,a+1-min); &#125; return 0;&#125;","categories":[],"tags":[{"name":"c++","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"}]},{"title":"Codeforces-Letters Shop","slug":"Codeforces-Letters-Shop","date":"2021-01-28T05:32:03.000Z","updated":"2021-02-07T03:19:04.656Z","comments":true,"path":"2021/01/28/Codeforces-Letters-Shop/","link":"","permalink":"http://laclic.github.io/2021/01/28/Codeforces-Letters-Shop/","excerpt":"","text":"题意先读入一串长字符串，再读入一串短字符串，要求从左开始遍历到所有短字符串所有字母都出现为止（且出现次数亦有要求，短字符串所有字母出现次数小于等于已遍历的长字符串的） 思路记录所有字母第x次出现的位置（不这么做会超时），取最大值 代码1234567891011121314151617181920212223242526272829303132333435#include &lt;cstdio&gt;char s[200006];char input[200006];int letter[26] = &#123;0&#125;; // &#x27;a&#x27; == 97int mapp[26][200006];int main(int argc, char const *argv[])&#123; int n,m; scanf(&quot;%d&quot;,&amp;n); scanf(&quot;%s&quot;,s); scanf(&quot;%d&quot;,&amp;m); for(int i=0;s[i]!=&#x27;\\0&#x27;;++i) &#123; mapp[s[i]-97][letter[s[i]-97]] = i; ++letter[s[i]-97]; &#125; for(;m;--m) &#123; int max = 0; for(int i=0;i&lt;26;++i) &#123; letter[i] = 0; &#125; scanf(&quot;%s&quot;,input); for(int i=0;input[i]!=&#x27;\\0&#x27;;++i) &#123; int now = mapp[input[i]-97][letter[input[i]-97]]; ++letter[input[i]-97]; if(now&gt;max) max = now; &#125; printf(&quot;%d\\n&quot;,max+1); &#125; return 0;&#125;","categories":[],"tags":[{"name":"c++","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"map","slug":"map","permalink":"http://laclic.github.io/tags/map/"}]},{"title":"FZU2021-0x16-哈密顿绕行世界问题","slug":"FZU2021-0x16-哈密顿绕行世界问题","date":"2021-01-27T04:12:35.000Z","updated":"2021-01-27T04:36:26.930Z","comments":true,"path":"2021/01/27/FZU2021-0x16-哈密顿绕行世界问题/","link":"","permalink":"http://laclic.github.io/2021/01/27/FZU2021-0x16-%E5%93%88%E5%AF%86%E9%A1%BF%E7%BB%95%E8%A1%8C%E4%B8%96%E7%95%8C%E9%97%AE%E9%A2%98/","excerpt":"","text":"题意有一个十二面体（20个顶点），现在给出这20个顶点相邻的顶点，以及起点m，要求你输出所有（60种）绕行所有点最后回到m点的方案。 思路一开始以为这题用枚举，大O会有A^20^20的量级，后来想想每次只能选&lt;=3个的路径，对于20个点撑死也只有3^7^*2^7^，完全可以考虑暴力枚举 所以我们用20*3大小的数组存储这20个点相邻点的数据，并用长度为20的数组以0（没经过）/1（已经过）来记录是否经过，再用一个长度20的数组来存储已经被选择的数。 递归到20层时（选了20个数时），我们进行检查，是否能回到m点，如果能，则输出，反之return。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include &lt;cstdio&gt;int a[21][3];int status[21] = &#123;0&#125;;int cnt;int chosen[21];inline int check(int now) &#123; // 判断能否返回原点 if(a[chosen[1]][0]==now||a[chosen[1]][1]==now||a[chosen[1]][2]==now) &#123; return 1; &#125; return 0;&#125;void go(int now,int layer) &#123; if(layer==20) &#123; if(check(now))&#123; printf(&quot;%d: &quot;,cnt); for(int i=1;i&lt;=20;++i) &#123; printf(&quot; %d&quot;,chosen[i]); &#125; printf(&quot; %d\\n&quot;,chosen[1]); ++cnt; &#125;else return; &#125;else &#123; // 用for循环也可以，只是觉得只有3次，加之用for还要消耗判断的性能 if(!status[a[now][0]]) &#123; status[a[now][0]] = 1; chosen[layer+1] = a[now][0]; // 因为到layer==20的时候不会进else，所以不必担心数组溢出 go(a[now][0],layer+1); status[a[now][0]] = 0; &#125; if(!status[a[now][1]]) &#123; status[a[now][1]] = 1; chosen[layer+1] = a[now][1]; go(a[now][1],layer+1); status[a[now][1]] = 0; &#125; if(!status[a[now][2]]) &#123; status[a[now][2]] = 1; chosen[layer+1] = a[now][2]; go(a[now][2],layer+1); status[a[now][2]] = 0; &#125; &#125;&#125;int main(int argc, char const *argv[])&#123; for(int i=1;i&lt;=20;++i) &#123; for(int j=0;j&lt;3;++j) &#123; scanf(&quot;%d&quot;,&amp;a[i][j]); &#125; &#125; int m; while(1) &#123; cnt = 1; scanf(&quot;%d&quot;,&amp;m); if(m==0) break; status[m] = 1; chosen[1] = m; go(m,1); status[m] = 0; &#125; return 0;&#125;","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"c++","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"search","slug":"search","permalink":"http://laclic.github.io/tags/search/"},{"name":"recursion","slug":"recursion","permalink":"http://laclic.github.io/tags/recursion/"}]},{"title":"FZU2021-0x15-迷宫问题","slug":"FZU2021-0x15-迷宫问题","date":"2021-01-26T10:34:05.000Z","updated":"2021-01-26T10:40:06.336Z","comments":true,"path":"2021/01/26/FZU2021-0x15-迷宫问题/","link":"","permalink":"http://laclic.github.io/2021/01/26/FZU2021-0x15-%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/","excerpt":"","text":"题意有一个迷宫，要求你从坐标(0,0)走到(4,4)，其中1的地方是墙壁，不能通行，这个迷宫保证有唯一解 思路注意，是可以往上和左走的，只要不原路返回即可 采用外面围一圈墙壁的方法，省去很多判断溢出的麻烦 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#define MAX 7#define LEN 5#define START 0#define RIGHT 1#define DOWN 2#define LEFT 3#define UP 4int a[MAX][MAX];typedef struct _pos &#123; int x; int y;&#125;Pos;Pos chosen[25]; // 存储已经过的路程inline void go(int x,int y,int layer,int went) &#123; if(x==5&amp;&amp;y==5) &#123; if(0&lt;layer) &#123; printf(&quot;(%d, %d)&quot;,chosen[0].x-1,chosen[0].y-1); &#125; for(int i=1;i&lt;layer;++i) &#123; printf(&quot;\\n(%d, %d)&quot;,chosen[i].x-1,chosen[i].y-1); &#125; exit(0); &#125;else &#123; if(!a[x+1][y]&amp;&amp;went!=UP) &#123; chosen[layer].x = x+1; // 直接覆写即可 chosen[layer].y = y; go(x+1,y,layer+1,DOWN);// went参数用来记录这一步是向什么方向走的 &#125; if(!a[x][y+1]&amp;&amp;went!=LEFT) &#123; chosen[layer].x = x; chosen[layer].y = y+1; go(x,y+1,layer+1,RIGHT); &#125; if(!a[x-1][y]&amp;&amp;went!=DOWN) &#123; chosen[layer].x = x+1; chosen[layer].y = y; go(x+1,y,layer+1,UP); &#125; if(!a[x][y-1]&amp;&amp;went!=RIGHT) &#123; chosen[layer].x = x+1; chosen[layer].y = y; go(x+1,y,layer+1,LEFT); &#125; &#125;&#125;int main(int argc, char const *argv[])&#123; for(int i=0;i&lt;MAX;++i) &#123; for(int j=0;j&lt;MAX;++j) &#123; a[i][j] = 1; &#125; &#125; for(int i=1;i&lt;=LEN;++i) &#123; for(int j=1;j&lt;=LEN;++j) &#123; scanf(&quot;%d&quot;,&amp;a[i][j]); &#125; &#125; Pos now; chosen[0].x = 1; chosen[0].y = 1; go(1,1,1,START); return 0;&#125;","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"search","slug":"search","permalink":"http://laclic.github.io/tags/search/"},{"name":"recursion","slug":"recursion","permalink":"http://laclic.github.io/tags/recursion/"}]},{"title":"Python 小教程（带作业）","slug":"Python-小教程（带作业）","date":"2021-01-25T14:30:45.000Z","updated":"2021-01-26T02:44:32.913Z","comments":true,"path":"2021/01/25/Python-小教程（带作业）/","link":"","permalink":"http://laclic.github.io/2021/01/25/Python-%E5%B0%8F%E6%95%99%E7%A8%8B%EF%BC%88%E5%B8%A6%E4%BD%9C%E4%B8%9A%EF%BC%89/","excerpt":"","text":"整篇教程不会让你做出人工智能来，但是可以帮助你认识python的整个框架流程与常用函数 安装 python 解释器推荐：西二python冬令营总群里的第零轮考核pdf 安装 IDE/编辑器vscode 轻便，首推！免费！vscode下载链接。戳我！ 安装教程戳我！ pycharm 好用！功能齐全！适合小白！大学生免费！（安装较为麻烦，视网络环境可能需要翻墙）pycharm下载链接。戳我！ 安装教程戳我！ 学生资格获取免费使用戳我！ 教程推荐这个教程东西讲的有点深了，不过是最全面的，遇到不会的其实可以粗略标记一下（比如把链接复制到备忘录之后看） 不要吊死在一颗树上！不要觉得教程非得看懂。看不懂就继续往后看，只要能解决之后发出的作业就好了！ 善用搜索引擎百度等，只要能做出作业来，看什么都无所谓！ 推荐廖雪峰python教程←从这里开始 需要学习的东西有里面很多作业都是抄我之前做的考核的 善用百度，遇到问题查百度比看教程快多了数据的输入与输出作业零：输出 hello world! 过程性编程（顺序、条件、循环三种语句结构）作业一：输⼊⼀个年份，判断该年份是否为闰年，是则输出yes，否则输出no。 字符串的处理作业二：输⼊⼀个字符串，判断字符串中是否含有”w2ol”这个⼦串，是则输出yes，否则输出no，并把”fzu”插⼊到”ol”后⾯，然后输出整个字符串。 元组()、列表[]、字典{}的使用作业三：声明⼀个列表（list），列表中含有字符串和整数，删除其中的字符串元素，然后把剩下的整数累加，输出结果。 作业四：声明⼀个字典（dict），获取5行输入，要求能储存5种信息：年、月、日、标题、作者。 函数的使用作业五：写⼀个判断素数的函数，然后输出1-100内的素数。 初阶面向对象编程（类、类成员、类方法、类的初始化/构造函数）作业六：设计⼀个学⽣类，它具有的私有数据成员是学号、姓名、数学、外语、计算机课程的成绩。具有的公有成员函数是：求三⻔课总成绩的函数sum，求三⻔课平均成绩的函数average，显示学⽣数据信息的函数display，设置学⽣数据信息的函数setdata。 到此为止，你已经对python有个全面的认识了，以下是偏进阶的部分，学到这里，你已经具备了一定的自学能力。后面就只有一份作业了，涉及到的点也不全。其实各种功能，只要你自己测试测试就好了。 模块引入(import)进阶面向对象编程（私有变量、私有方法）高阶面向对象编程（类的继承、类的魔术方法）错误处理(try/except)构造一个字符串，读取输入，要求总是输出字符串的第十个字符 接下来，再次运行程序，输入一个长度小于十的字符串，要求输出你有问题，小老弟！ 错误调试这个自己看看就好，平常不太用得上 格式化数据文件读写(open)写一个程序，将圆周率Π/pi（小数点后前十位）输出至文件(pi.txt)中 再写另一个程序，读取文件（pi.txt），并输出到屏幕（命令行）上 进阶总作业一、实现⼀个装饰器，在开始执⾏函数时会输出正在执⾏的函数的名称，如“into functionfunction_name”，在函数执⾏结束时，会提示退出函数及函数的运⾏时间， 如”functionfunction_name finished， usisng 0.234ms” 二、了解类的魔术⽅法。创建类“MagicMethodLearning”，其具有如下功能： 1234567891011121314151617具有数据成员data，其类型为⼀个字典（dict）在创建类对应的对象时，会输出“created a new obj of class MagicMethodLearning”在创建类对象时，可以传⼊⼀个可选的“init_data”参数， 传⼊的“init_data”为字典类型，将init_data的值作为数据成员data的初始值，若⽆传⼊init_data，则数据成员data的初始值为空字典在对类对象调⽤ len() 函数时，会返回数据成员data的⻓度在对类对象进⾏索引时，会返回对数据成员data的索引在访问类对象的属性时（如 obj.attribute_name ），会返回数据成员data的索引（ data[attribute_bname] ）在调⽤类对象时，输出数据成员data的值在对类对象调⽤ bool() 函数时，若数据成员data为空字典，则返回false，否则返回true上述⼏个功能尽量全部完成，当然类的魔术⽅法远远不⽌这些，仅仅让⼤家了解⼀下有这样⼀个东⻄，其他的魔术⽅法请⾃⾏了解 到此为止，已经基本学会了python的自带的特性/函数。如果还有兴趣，可以看看网络编程（爬虫等），再往后面写接口、做人工智能什么的，我也不会了。","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://laclic.github.io/tags/python/"}]},{"title":"Codeforces-Chunga-Changa","slug":"Codeforces-Chunga-Changa","date":"2021-01-25T06:48:27.000Z","updated":"2021-01-25T07:11:36.276Z","comments":true,"path":"2021/01/25/Codeforces-Chunga-Changa/","link":"","permalink":"http://laclic.github.io/2021/01/25/Codeforces-Chunga-Changa/","excerpt":"","text":"题意有2个小女孩去买椰子，手上分别有x元，y元，一个椰子要z元。 她们可以合起来买，但此时就要让一个人给另一个一些钱。 问：她们合起来最多买几个？最少要让一个人给另一个人多少钱？ 思路两个人先分开买，剩下的钱再合并到一起买，分别计算二人还需要多少钱才能买得起最后一个，取最小值 如果买不起就为0（不给钱） 代码（python）不能用int强制转换，只能用//整除。为什么呢？求dalao告知，感激不尽！（邮箱&#x65;&#52;&#49;&#113;&#101;&#52;&#64;&#49;&#50;&#54;&#x2e;&#99;&#x6f;&#x6d;，麻烦注明一下是从这题来的，thx~） 1234567891011121314151617181920212223242526xyz = input(&quot;&quot;).split(&quot; &quot;)x = int(xyz[0])y = int(xyz[1])z = int(xyz[2])total = 0# get how many coconuts one person can buytotal += x//z # total += int(x/z) #x %= ztotal += y//z # total += int(y/z) #y %= z&quot;&quot;&quot;If you replace things in ##, you will get WA.WHY was that? I don&#x27;t know.&quot;&quot;&quot;exchange = 0left = 0if x+y &gt;= z: total += 1 if z-x &gt; z-y: exchange = (z-y) % z else: exchange = (z-x) % zprint(f&quot;&#123;total&#125; &#123;exchange&#125;&quot;, end=&#x27;&#x27;)","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://laclic.github.io/tags/python/"},{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"Problem Remains","slug":"Problem-Remains","permalink":"http://laclic.github.io/tags/Problem-Remains/"},{"name":"big(高精度)","slug":"big-高精度","permalink":"http://laclic.github.io/tags/big-%E9%AB%98%E7%B2%BE%E5%BA%A6/"}]},{"title":"FZU2021-0x13-棋盘问题","slug":"FZU2021-0x13-棋盘问题","date":"2021-01-25T06:46:52.000Z","updated":"2021-01-25T07:03:33.719Z","comments":true,"path":"2021/01/25/FZU2021-0x13-棋盘问题/","link":"","permalink":"http://laclic.github.io/2021/01/25/FZU2021-0x13-%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98/","excerpt":"","text":"组合问题，暴力枚举 题意有个N*N的棋盘，里面有一定位置可以放棋子（为#的地方），现在有k个棋子。 问：有多少种摆放方式，使得每个棋子都被放下，每个棋子所在行列不能有其他棋子（且每一行/每一列至多只有一个棋子） 思路用将所有#所在位置信息记录（在posX和posY），模拟键值对，并且每行/每列都加上状态信息（statusX和statusY；其中，0:为没旗子，可放棋子；1:代表该行/列已有棋子，不能放其他棋子了）。 小技巧当剩余棋子数不足（i&lt;=max）以供剩下棋子放置时，提前退出递归，以减少计算量。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#include &lt;cstdio&gt;char a[8][8];int statusX[8]=&#123;0&#125;,statusY[8]=&#123;0&#125;;int posX[66],posY[66];int cnt,k,ans;void recur(int now,int layer) &#123; if(layer==k) &#123; ++ans; &#125;else &#123; int max = cnt - k + layer; for(int i=now+1;i&lt;=max;++i) &#123; if(!statusX[posX[i]]&amp;&amp;!statusY[posY[i]]) &#123; statusX[posX[i]] = 1; statusY[posY[i]] = 1; recur(i,layer+1); statusX[posX[i]] = 0; statusY[posY[i]] = 0; &#125; &#125; &#125;&#125;int main(int argc, char const *argv[])&#123; int n; while(1) &#123; int mouse = 0; ans = 0; cnt = 0; scanf(&quot;%d %d&quot;,&amp;n,&amp;k); if(n==-1&amp;&amp;k==-1) break; for(int i=0;i&lt;n;++i) &#123; getchar(); for(int j=0;j&lt;n;++j) &#123; scanf(&quot;%c&quot;,&amp;a[i][j]); if(a[i][j]==&#x27;#&#x27;) &#123; posX[mouse] = i; posY[mouse] = j; ++mouse; ++cnt; &#125; &#125; &#125; --k; int max = cnt-k; for(int i=0;i&lt;max;++i) &#123; statusX[posX[i]] = 1; statusY[posY[i]] = 1; recur(i,0); statusX[posX[i]] = 0; statusY[posY[i]] = 0; &#125; printf(&quot;%d\\n&quot;,ans); &#125; return 0;&#125;/*2 1#..#4 4...#..#..#..#...-1 -1*/","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"c++","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"search","slug":"search","permalink":"http://laclic.github.io/tags/search/"},{"name":"recursion","slug":"recursion","permalink":"http://laclic.github.io/tags/recursion/"}]},{"title":"Linux 下运行 C/C++ 与 Python 代码","slug":"Linux-下运行-C-C-与-Python-代码","date":"2021-01-25T04:08:36.000Z","updated":"2021-01-25T07:22:32.095Z","comments":true,"path":"2021/01/25/Linux-下运行-C-C-与-Python-代码/","link":"","permalink":"http://laclic.github.io/2021/01/25/Linux-%E4%B8%8B%E8%BF%90%E8%A1%8C-C-C-%E4%B8%8E-Python-%E4%BB%A3%E7%A0%81/","excerpt":"","text":"本篇使用的是 ubuntu 发行版 gcc/g++ 编译运行 C/C++ 代码安装编译器先建立并进入文件夹 1234mkdir programmecd programme&#x2F;mkdir ccd c&#x2F; 输入gcc --version检查是否安装gcc（ubuntu20.04版本是默认自带安装的） 若显示： 1234gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0Copyright (C) 2019 Free Software Foundation, Inc.This is free software; see the source for copying conditions. There is NOwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 表示已安装，没有的话输入如下命令通过apt（ubuntu/debian）安装（centOS用yum, manjaro/Arch用pacman）： 1sudo apt install build-essential 一次性安装gcc, g++, make，安装后同样输入gcc --version检查是否成功安装gcc，若成功回显版本信息，则成功安装 写出你的 Hello world!这里使用vim编辑器（当然你要是喜欢vi或者nano还有gedit编辑器也不是不可以） 输入vim test.c，进入 vim 编辑器界面，小写状态下按下 i 键进入insert模式，输入如下代码 123456#include &lt;stdio.h&gt;int main() &#123; printf(&quot;Hello world!\\n&quot;); return 0;&#125; 输入后，按下esc，输入:wq并enter以写入并退出 用gcc test.c -o test.o进行编译并生成可执行文件test.o（如果是c++则用g++命令） 用./test.o运行可执行文件 12root@LacLic-S-LaPToP:~&#x2F;programme&#x2F;c# .&#x2F;test.oHello world! 至此，C/C++编译器配置完成（make是用来编译安装软件的，这里不作演示了） python3 运行 python 代码安装python3先创建并进入python文件夹 123cd ~&#x2F;programme&#x2F;mkdir pythoncd python&#x2F; 通过输入命令python3或python3 --version查看版本，如果你使用python3，则会进入python交互式编程，在这里可以输入print(&quot;hello world&quot;)来输出hello world 输入exit()或按下ctrl+Z来退出交互式编程界面 1234567root@LacLic-S-LaPToP:~&#x2F;programme&#x2F;python# python3Python 3.8.2 (default, Jul 16 2020, 14:00:26)[GCC 9.3.0] on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; print(&quot;hello world&quot;)hello world&gt;&gt;&gt; exit() 12root@LacLic-S-LaPToP:~&#x2F;programme&#x2F;python# python3 --versionPython 3.8.2 如果没有安装python3，推荐使用sudo apt install python3快速安装python3 或者，可以用wget下载linux下安装包，通过make编译安装，并自行添加环境变量和建立pip与python的软链 之后，同样通过输入命令python3或python3 --version查看版本，就不过多赘述 执行 python 代码文件通过echo快速建立test.py文件并写入 12echo &quot;print(&#39;\\n&#39;.join([&#39;&#39;.join([(&#39;ZhangDong&#39;[(x-y)%9]if((x*0.05)**2+(y*0.1)**2-1)**3-(x*0.05)**2*(y*0.1)**3&lt;&#x3D;0 else&#39; &#39;)for x in range(-30,30)])for y in range(15,-15,-1)])) # 一个大大的爱心，该版本为python3.x，若为python2.x版本请去掉最外层的括号&quot; &gt; test.pypython3 test.py 然后通过python3 test.py来执行代码 12345678910111213141516171819202122232425262728293031python3 test.py hangDongZ ngDongZha ngZhangDongZhangD ZhangDongZhangDon ongZhangDongZhangDongZhangDongZhangDongZh ongZhangDongZhangDongZhangDongZhangDongZhan ongZhangDongZhangDongZhangDongZhangDongZhangD ngZhangDongZhangDongZhangDongZhangDongZhangDo gZhangDongZhangDongZhangDongZhangDongZhangDon ZhangDongZhangDongZhangDongZhangDongZhangDong hangDongZhangDongZhangDongZhangDongZhangDongZ angDongZhangDongZhangDongZhangDongZhangDongZh gDongZhangDongZhangDongZhangDongZhangDongZh ongZhangDongZhangDongZhangDongZhangDongZh ngZhangDongZhangDongZhangDongZhangDongZha hangDongZhangDongZhangDongZhangDongZh ngDongZhangDongZhangDongZhangDongZh DongZhangDongZhangDongZhangDongZh gZhangDongZhangDongZhangDongZ angDongZhangDongZhangDong DongZhangDongZhangDon ZhangDongZhangD gDongZhan gZh h 当然你也可以和写入c文件一样，使用文本编辑器来写代码","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://laclic.github.io/tags/python/"},{"name":"c++","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"linux","slug":"linux","permalink":"http://laclic.github.io/tags/linux/"},{"name":"c","slug":"c","permalink":"http://laclic.github.io/tags/c/"}]},{"title":"Codeforces-Ropewalkers","slug":"Codeforces-Ropewalkers","date":"2021-01-24T03:52:11.000Z","updated":"2021-01-24T14:05:18.674Z","comments":true,"path":"2021/01/24/Codeforces-Ropewalkers/","link":"","permalink":"http://laclic.github.io/2021/01/24/Codeforces-Ropewalkers/","excerpt":"","text":"题意：有3个人分别在一条平直的绳子（数轴）上的a,b,c处，3个人中，每秒只有一个人能移动，而且他/她/它(?)每次只能移动一格。问：经过多少秒，他们两两间距才会不小于d？ 12345678910111213141516171819202122232425262728293031// 让靠两边的人往外走即可#include &lt;cstdio&gt;inline void swap(int&amp; a,int&amp; b) &#123; a^=b^=a^=b;&#125;void sort(int&amp; min,int&amp; mid,int&amp; max) &#123; if(min&gt;mid) swap(min,mid); if(min&gt;max) swap(min,max); if(mid&gt;max) swap(mid,max);&#125;int main(int argc, char const *argv[])&#123; // 2,141,783,647 // 1,000,000,000 int a,b,c,d; long long ans=0; // maybe no need to use long long scanf(&quot;%d %d %d %d&quot;,&amp;a,&amp;b,&amp;c,&amp;d); sort(a,b,c); // now, a==min, b==mid, c==max int Dab = b-a, Dbc = c-b; // distance of a,b; distance of c,b if(Dab&lt;d) ans += d - Dab; if(Dbc&lt;d) ans += d - Dbc; printf(&quot;%lld&quot;,ans); return 0;&#125;","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"sort","slug":"sort","permalink":"http://laclic.github.io/tags/sort/"}]},{"title":"Codeforces-Email from Polycarp","slug":"Codeforces-Email-from-Polycarp","date":"2021-01-24T03:51:51.000Z","updated":"2021-01-24T14:05:37.163Z","comments":true,"path":"2021/01/24/Codeforces-Email-from-Polycarp/","link":"","permalink":"http://laclic.github.io/2021/01/24/Codeforces-Email-from-Polycarp/","excerpt":"","text":"字符串问题题意：有一个键盘，打字的时候会失控，同一个字符打很多个出来，比如hello会打成heeeellllooo（YES情况），但是不会打成hell或者helo（NO情况）。输入给出了原文和失控后的文本，需要判断，失控后文本是否符合YES情况 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647// 逐字判断 --若字不同--&gt; 判断重复 --变为相同--&gt; 继续逐字判断 ----都到底了----&gt; YES!// --还是不同--&gt; NO！ --另一个没到底--&gt; NO!#include &lt;cstdio&gt;// #include &lt;iostream&gt;// using namespace std;char origin[1000006];char input[1000006];int main(int argc, char const *argv[])&#123; int n; scanf(&quot;%d&quot;,&amp;n); int mouse1, mouse2; for(;n;--n) &#123; int isTrue = 1; mouse1 = 0; mouse2 = 0; scanf(&quot;%s&quot;,origin); scanf(&quot;%s&quot;,input); while(origin[mouse1]!=&#x27;\\0&#x27;) &#123; if(origin[mouse1]==input[mouse2]) &#123; ++mouse1; ++mouse2; &#125;else &#123; if(mouse2&lt;1||input[mouse2-1]!=input[mouse2]) &#123; break; &#125; while(input[mouse2-1]==input[mouse2]) &#123; ++mouse2; &#125; &#125; if(origin[mouse1]!=&#x27;\\0&#x27;) printf(&quot;NO\\n&quot;); else &#123; while(origin[mouse1-1]==input[mouse2]) &#123; ++mouse2; &#125; if(input[mouse2]==&#x27;\\0&#x27;) printf(&quot;YES\\n&quot;); else printf(&quot;NO\\n&quot;); &#125; &#125; return 0;&#125;","categories":[],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"string","slug":"string","permalink":"http://laclic.github.io/tags/string/"}]},{"title":"Codeforces-Finding Sasuke","slug":"Codeforces-Finding-Sasuke","date":"2021-01-23T11:26:25.000Z","updated":"2021-01-24T14:05:29.711Z","comments":true,"path":"2021/01/23/Codeforces-Finding-Sasuke/","link":"","permalink":"http://laclic.github.io/2021/01/23/Codeforces-Finding-Sasuke/","excerpt":"","text":"思路存在性问题，只要找到一个通解即可我们选取每一对（2个）数，取相反数后交换位置相乘后必为0 e.g. there is A(a1) and B(a2), AB+B(-A) == 0, just let b1 = B, b2 = -A. 代码123456789101112131415161718192021#include &lt;cstdio&gt;int main(int argc, char const *argv[])&#123; int T,n; scanf(&quot;%d&quot;,&amp;T); for(;T;--T) &#123; scanf(&quot;%d&quot;,&amp;n); int temp1,temp2; for(int i=0;i&lt;n;i+=2) &#123; scanf(&quot;%d&quot;,&amp;temp1); scanf(&quot;%d&quot;,&amp;temp2); printf(&quot;%d &quot;,-temp2); printf(&quot;%d &quot;,temp1); &#125; printf(&quot;\\n&quot;); &#125; return 0;&#125;","categories":[],"tags":[{"name":"existence problem","slug":"existence-problem","permalink":"http://laclic.github.io/tags/existence-problem/"},{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"}]},{"title":"FZU2021-0x12-Prime Ring Problem","slug":"FZU2021-0x12-Prime-Ring-Problem","date":"2021-01-23T11:25:53.000Z","updated":"2021-01-23T11:40:26.956Z","comments":true,"path":"2021/01/23/FZU2021-0x12-Prime-Ring-Problem/","link":"","permalink":"http://laclic.github.io/2021/01/23/FZU2021-0x12-Prime-Ring-Problem/","excerpt":"","text":"Just do what the problem tell you to do. Take care of the format (I got a presentation error). 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263// brute force#include &lt;cstdio&gt;int status[23]; // to node whether a num is chosenint chosen[23];int n;int isPrime(int x) &#123; // prime table since the max of sum is 20+19=39 switch (x) &#123; case 2: case 3: case 5: case 7: case 11: case 13: case 17: case 19: case 23: case 29: case 31: case 37: case 41: return 1; default: return 0; &#125;&#125;void recur(const int&amp; now,const int&amp; layer) &#123; // recur is the abbr of &quot;recursion&quot; chosen[layer] = now; // just over-write it! if(layer==n) &#123; if(!isPrime(now+1)) return; // check whether the sum of 1st and last is prime printf(&quot;1&quot;); // print the first for(int i=2;i&lt;=n;++i) &#123; printf(&quot; %d&quot;,chosen[i]); &#125; printf(&quot;\\n&quot;); &#125;else &#123; for(int i=2;1;++i) &#123; for(;!status[i];++i); // skip chosen nums (whose status is 0) if(i&gt;n) break; // roop condition if(!isPrime(now+i)) continue; status[i] = 0; recur(i,layer+1); status[i] = 1; // restore the origin stage &#125; &#125;&#125;int main(int argc, char const *argv[])&#123; for(int i=1;i&lt;=23;++i) &#123; status[i] = 1; &#125; int case_count = 0; while(scanf(&quot;%d&quot;,&amp;n)!=EOF) &#123; ++case_count; printf(&quot;Case %d:\\n&quot;,case_count); recur(1,1); printf(&quot;\\n&quot;); &#125; return 0;&#125;","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"search","slug":"search","permalink":"http://laclic.github.io/tags/search/"},{"name":"brute force","slug":"brute-force","permalink":"http://laclic.github.io/tags/brute-force/"},{"name":"format","slug":"format","permalink":"http://laclic.github.io/tags/format/"}]},{"title":"FZU2021-0x11-Lake Counting","slug":"FZU2021-0x11-Lake-Counting","date":"2021-01-23T11:25:05.000Z","updated":"2021-01-23T11:38:46.813Z","comments":true,"path":"2021/01/23/FZU2021-0x11-Lake-Counting/","link":"","permalink":"http://laclic.github.io/2021/01/23/FZU2021-0x11-Lake-Counting/","excerpt":"","text":"idea：Just read the input,then fill the water(‘W’) with land(‘.’) one by one,the count of filling water times is the answer. 小 心 换 行 符 Be care of line-breaker code：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include &lt;cstdio&gt;/*10 12....W....WW..WWW.....WWW....WW...WW..........WW..........W....W......W...W.W.....WW.W.W.W.....W..W.W......W...W.......W.*/char a[106][106];const char b[8][2] = &#123;&#123;-1,-1&#125;,&#123;-1,0&#125;,&#123;-1,1&#125;,&#123;0,-1&#125;,&#123;0,1&#125;,&#123;1,-1&#125;,&#123;1,0&#125;,&#123;1,1&#125;&#125;;inline int fill(int x,int y) &#123; a[x][y] = &#x27;.&#x27;; for(int i=0;i&lt;8;++i) &#123; if(a[x+b[i][0]][y+b[i][1]]==&#x27;W&#x27;) &#123; fill(x+b[i][0],y+b[i][1]); &#125; &#125; return 1;&#125;int main(int argc, char const *argv[])&#123; int cnt=0; int N,M; scanf(&quot;%d %d&quot;,&amp;N,&amp;M); int M1 = M+1,N1 = N+1; int min = M&gt;N?N:M; for(int i=0;i&lt;=min;++i) &#123; a[i][0] = &#x27;.&#x27;; a[i][M1] = &#x27;.&#x27;; a[0][i] = &#x27;.&#x27;; a[N1][i] = &#x27;.&#x27;; &#125; for(int i=min+1;i&lt;=M;++i) &#123; a[0][i] = &#x27;.&#x27;; a[N1][i] = &#x27;.&#x27;; &#125; for(int i=min+1;i&lt;=N;++i) &#123; a[i][0] = &#x27;.&#x27;; a[i][M1] = &#x27;.&#x27;; &#125; a[N1][M1] = &#x27;.&#x27;; for(int i=1;i&lt;=N;++i) &#123; getchar(); // &lt;--- 读取换行符，刷新输入流 for(int j=1;j&lt;=M;++j) &#123; scanf(&quot;%c&quot;,&amp;a[i][j]); &#125; &#125; for(int i=1;i&lt;=N;++i) &#123; for(int j=1;j&lt;=M;++j) &#123; if(a[i][j]==&#x27;W&#x27;) cnt += fill(i,j); &#125; &#125; printf(&quot;%d&quot;,cnt); return 0;&#125;","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"search","slug":"search","permalink":"http://laclic.github.io/tags/search/"}]},{"title":"搭建vnt-chain开发测试网络（小白版）","slug":"搭建vnt-chain开发测试网络（小白版）","date":"2021-01-22T05:27:10.000Z","updated":"2021-01-22T11:54:39.894Z","comments":true,"path":"2021/01/22/搭建vnt-chain开发测试网络（小白版）/","link":"","permalink":"http://laclic.github.io/2021/01/22/%E6%90%AD%E5%BB%BAvnt-chain%E5%BC%80%E5%8F%91%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%EF%BC%88%E5%B0%8F%E7%99%BD%E7%89%88%EF%BC%89/","excerpt":"","text":"原文有些地方没讲清楚，有些坑不好绕（比如golang环境配置，gvnt环境变量添加等，这些都没讲，而且由于用的人少，百度谷歌都搜不到，我拉了一整个目录下来去找才知道gvnt怎么装），所以这边重新整理归纳一遍。 环境安装这个原文里完全没有这个步骤，百度也搜不到，找了好久 安装golang环境首先查看是否安装了golang环境 1&gt; go version 如果显示 1go version go1.13.8 linux/amd64 &lt;--- 如果有这句话，则说明你已经安装了golang，这步可以跳过啦~（不过可能要注意一下版本问题） 如果是 1234Command &#x27;go&#x27; not found, but can be installed with:apt install golang-go # version 2:1.13~1ubuntu2, orapt install gccgo-go # version 2:1.13~1ubuntu2 那我们进入下面的步骤手动安装： 1234# 创建文件夹并下载压缩包：mkdir golangcd golangwget https://golang.google.cn/dl/go1.15.7.linux-amd64.tar.gz 等待安装包下载完毕（是国内镜像，应该挺快） 解压 1tar -C /usr/local -zxvf go1.15.7.linux-amd64.tar.gz 将golang添加至环境变量先用vim编辑器打开环境变量文件vim /etc/profile大写状态下按下 L 将光标转移至最末尾小写状态下按下 i 进入插入模式在最后新建几行，添加 123export GOROOT=/usr/local/goexport GOPATH=/usr/local/go/bin/goexport PATH=$PATH:$GOROOT/bin 然后按esc，输入:wq，回车，写入并退出 接下来输入source /etc/profile重新载入一下 或者 用管理员身份打开powershell重启wsl 12net stop LxssManagernet start LxssManager 或者reboot重启虚拟机（wsl是无法重启的，只能用powershell关开） 然后go version检查一下是否安装并配置成功 12root@LacLic-S-LaPToP:~&#x2F;testnet# go versiongo version go1.13.8 linux&#x2F;amd64 &lt;--- 表示golang安装成功 安装go-vnt（gvnt）12mkdir -p &#x2F;src&#x2F;github.com&#x2F;vntchain&#x2F;cd &#x2F;src&#x2F;github.com&#x2F;vntchain&#x2F; 然后git clone https://github.com/vntchain/go-vnt克隆仓库 如果慢的话可以试试我拉取到gitee上的镜像 git clone https://gitee.com/LacLic/go-vnt 1cd go-vnt 如果有以前的版本，请更新到最新: git pull 然后，使用命令编译gvnt: make gvnt 或者使用命令编译gvnt和所有工具: make all 编译完成后，进入gvnt的bin文件夹 cd /src/github.com/vntchain/go-vnt/build/bin/ 运行gvnt./gvnt version，查看版本 1234567891011WARN [01-22|12:14:39] Sanitizing cache to Go&#x27;s GC limits provided=1024 updated=662GvntVersion: 0.6.4Git Commit: 298e779f11a2cab8da88ec9afaae756cf297463bArchitecture: amd64Protocol Versions: [63 62]Network Id: 1Go Version: go1.15.7Operating System: linuxGOPATH=/usr/local/go/bin/goGOROOT=/usr/local/go 至此，gvnt安装完成，我们将其添加至环境变量 老办法，vim /etc/profile打开环境变量配置文件，在最后添加一句 1export PATH=$PATH:/src/github.com/vntchain/go-vnt/build/bin 保存退出，忘了vim编辑器怎么用的话，回到上面再看一下，这里不再赘述（如果会用nano编辑器的话其实用nano也没问题） 接下来输入source /etc/profile重新载入一下 或者 用管理员身份打开powershell重启wsl 12net stop LxssManagernet start LxssManager 或者reboot重启虚拟机 此时运行gvnt version 同样回显了版本信息，至此，gvnt环境变量配置成功 搭建开发测试网络这里就和原文差不多了，只是集成一下命令，另外提醒一下注意的点 创建4个初始见证人的账号123cd ~mkdir testnetcd testnet 通过gvnt account new --datadir node0，建立node0节点，可以不用输入密码（直接按两下回车） 12345INFO [12-16|14:47:13] Maximum peer count VNT=25 LES=0 total=25Your new account is locked with a password. Please give a password. Do not forget this password.Passphrase:Repeat passphrase:Address: &#123;&quot;node0的address，先记录下来，后面有用&quot;&#125; 同理，现在请你再建立3个节点 123gvnt account new --datadir node1gvnt account new --datadir node2gvnt account new --datadir node3 输入tree .检查文件目录，大概是这样子的 12345678910111213.├── node0│ └── keystore│ └── UTC--2021-01-22T04-30-41.086197018Z--(这里是node0的地址)├── node1│ └── keystore│ └── UTC--2021-01-22T04-30-57.796677093Z--(这里是node1的地址)├── node2│ └── keystore│ └── UTC--2021-01-22T04-31-03.028884008Z--(这里是node2的地址)└── node3 └── keystore └── UTC--2021-01-22T04-31-07.940695653Z--(这里是node3的地址) 现在请要生成每个节点的p2p地址，我们分别分配端口号12340~12343gvnt --datadir node0 --port 12340 console启动后，输入admin.nodeInfo.vnode查看node0的p2p地址 12345&#x2F;&#x2F; 省略很多输出&gt; admin.nodeInfo.vnode ← 这是你的控制台输入&quot;&#x2F;ip4&#x2F;127.0.0.1&#x2F;tcp&#x2F;12340&#x2F;ipfs&#x2F;(一串字符))&quot;~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~这就是node0的p2p地址，请自行记录下来（不是记录这上面的），要记录你自己的机器上的 然后按ctrl+D退出 这时候node0目录下多了很多文件ls node0 12➜ ls node0gvnt history keystore vntdb vntdb文件夹下面保存了p2p地址，由于node0的p2p地址比较重要，我们需要将其备份cp node0/vntdb node0/vntdb.bk -r 其他三个如法炮制，用下面的命令分别启动后，控制台输入admin.nodeInfo.vnode获取p2p地址 123gvnt --datadir node1 --port 12341 consolegvnt --datadir node2 --port 12342 consolegvnt --datadir node3 --port 12343 console 接下来，移除节点0的临时数据gvnt目录: 1rm -rf node0&#x2F;gvnt 另外还要清理节点1，2，3的临时数据，否则使用配置文件初始化节点时会失败。 123rm -rf node1&#x2F;gvntrm -rf node2&#x2F;gvntrm -rf node3&#x2F;gvnt 创建创世块配置文件dpos.json我们可以直接直接拿仓库中的模板过来改 先把东西复制过来cp /src/github.com/vntchain/go-vnt/genesis_dpos.json dpos.json 然后vim dpos.json开始编辑文件，总共有8个地方需要改，已经全部用（括号形式）和 &lt;— here 标注 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&#123; &quot;config&quot;: &#123; &quot;chainId&quot;: 1012, &quot;dpos&quot;: &#123; &quot;period&quot;: 2, &quot;witnessesNum&quot;: 4, &quot;witnessesUrl&quot;: [ &quot;（node0的p2p地址）&quot;, &lt;--- here1 &quot;（node1的p2p地址）&quot;, &lt;--- here2 &quot;（node2的p2p地址）&quot;, &lt;--- here3 &quot;（node3的p2p地址）&quot; &lt;--- here4 ] &#125; &#125;, &quot;timestamp&quot;: &quot;0x5c2a3d00&quot;, &quot;extraData&quot;: &quot;0x&quot;, &quot;gasLimit&quot;: &quot;0x47b760&quot;, &quot;difficulty&quot;: &quot;0x1&quot;, &quot;coinbase&quot;: &quot;0x0000000000000000000000000000000000000000&quot;, &quot;alloc&quot;: &#123; &quot;0x122369f04f32269598789998de33e3d56e2c507a&quot;: &#123; &quot;balance&quot;: &quot;0x200000000000000000000000000000000000000000000000000000000000000&quot; &#125;, &quot;0x3dcf0b3787c31b2bdf62d5bc9128a79c2bb18829&quot;: &#123; &quot;balance&quot;: &quot;0x200000000000000000000000000000000000000000000000000000000000000&quot; &#125;, &quot;0x42a875ac43f2b4e6d17f54d288071f5952bf8911&quot;: &#123; &quot;balance&quot;: &quot;0x200000000000000000000000000000000000000000000000000000000000000&quot; &#125;, &quot;0xbf66d398226f200467cd27b14e85b25a8c232384&quot;: &#123; &quot;balance&quot;: &quot;0x200000000000000000000000000000000000000000000000000000000000000&quot; &#125;, &quot;0x491f4e8d914e30b1a5e8c804789094fe30971807&quot;: &#123; &quot;balance&quot;: &quot;0x200000000000000000000000000000000000000000000000000000000000000&quot; &#125;, &quot;0xe23f3ed4b6969f29284f667c16761212678c917d&quot;: &#123; &quot;balance&quot;: &quot;0x200000000000000000000000000000000000000000000000000000000000000&quot; &#125; &#125;, &quot;witnesses&quot;: [ &quot;（node0的address）&quot;, &lt;--- here5 &quot;（node1的address）&quot;, &lt;--- here6 &quot;（node2的address）&quot;, &lt;--- here7 &quot;（node3的address）&quot; &lt;--- here8 ], &quot;number&quot;: &quot;0x0&quot;, &quot;gasUsed&quot;: &quot;0x0&quot;, &quot;parentHash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;&#125; 别写反了，最后大概会是这个样子 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&#123; &quot;config&quot;: &#123; &quot;chainId&quot;: 1012, &quot;dpos&quot;: &#123; &quot;period&quot;: 2, &quot;witnessesNum&quot;: 4, &quot;witnessesUrl&quot;: [ &quot;/ip4/127.0.0.1/tcp/12340/ipfs/1kHcch6yuBCgC5nPPSK3Yp7Es4c4eenxAeK167pYwUvNjRo&quot;, &quot;/ip4/127.0.0.1/tcp/12341/ipfs/1kHJFKr2bzUnMr1NbeyYbYJa3RXT18cEu7cNDrHWjg8XYKB&quot;, &quot;/ip4/127.0.0.1/tcp/12342/ipfs/1kHfop9dnUHHmtBXVkLB5UauAmACtrsEX5H5t6oCRpdL198&quot;, &quot;/ip4/127.0.0.1/tcp/12343/ipfs/1kHHWuQNUVV2wgE8SqzQjWhiFQcfpkP5tRVTdJXAPWVj4nR&quot; ] &#125; &#125;, &quot;nonce&quot;: &quot;0x0&quot;, &quot;timestamp&quot;: &quot;0x5b45b949&quot;, &quot;extraData&quot;: &quot;0x&quot;, &quot;gasLimit&quot;: &quot;0x47b760&quot;, &quot;difficulty&quot;: &quot;0x1&quot;, &quot;mixHash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;, &quot;coinbase&quot;: &quot;0x0000000000000000000000000000000000000000&quot;, &quot;alloc&quot;: &#123; &quot;0x122369f04f32269598789998de33e3d56e2c507a&quot;: &#123; &quot;balance&quot;: &quot;0x200000000000000000000000000000000000000000000000000000000000000&quot; &#125;, &quot;0x3dcf0b3787c31b2bdf62d5bc9128a79c2bb18829&quot;: &#123; &quot;balance&quot;: &quot;0x200000000000000000000000000000000000000000000000000000000000000&quot; &#125;, &quot;0x42a875ac43f2b4e6d17f54d288071f5952bf8911&quot;: &#123; &quot;balance&quot;: &quot;0x200000000000000000000000000000000000000000000000000000000000000&quot; &#125;, &quot;0xbf66d398226f200467cd27b14e85b25a8c232384&quot;: &#123; &quot;balance&quot;: &quot;0x200000000000000000000000000000000000000000000000000000000000000&quot; &#125;, &quot;0x491f4e8d914e30b1a5e8c804789094fe30971807&quot;: &#123; &quot;balance&quot;: &quot;0x200000000000000000000000000000000000000000000000000000000000000&quot; &#125;, &quot;0xe23f3ed4b6969f29284f667c16761212678c917d&quot;: &#123; &quot;balance&quot;: &quot;0x200000000000000000000000000000000000000000000000000000000000000&quot; &#125; &#125;, &quot;witnesses&quot;: [ &quot;0xf31a08c03e03e36214f737755c235e6eadc5502e&quot;, &quot;0x9689e062952b71b825cd9dfc1d1d01a6319c6ebc&quot;, &quot;0x54604da2bad12b66e9aef6b8c04629b68771778e&quot;, &quot;0xe3d4f3e7d1b82dcc210efe1e0666b45e5a619a2d&quot; ], &quot;number&quot;: &quot;0x0&quot;, &quot;gasUsed&quot;: &quot;0x0&quot;, &quot;parentHash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;&#125; 经过以上操作后，查看testnet tree . -L 2testnet的目录应当如下： 12345678910111213141516171819➜ testnet tree . -L 2.├── dpos.json├── node0│ ├── history│ ├── keystore│ └── vntdb├── node1│ ├── history│ ├── keystore│ └── vntdb├── node2│ ├── history│ ├── keystore│ └── vntdb└── node3 ├── history ├── keystore └── vntdb 启动节点这里原文没详细讲怎么同时运行，我用的screen来同时部署运行的 启动0节点（bootnode）12screen -S node0gvnt --networkid 1012 --datadir node0 --port 12340 console 注意不要ctrl+D关闭了，我们直接关闭wsl-ubuntu(shell)窗口就好，screen窗口会在后台持续运行，不会随着关闭shell窗口而停止 启动剩余节点重新打开ubuntu，输入cd testnet，进入测试网目录，剩下的如法炮制 123456screen -S node1gvnt --networkid 1012 --datadir node1 --port 12341 --vntbootnode &quot;（这里填入是node0的p2p地址，不是node1&#x2F;2&#x2F;3）&quot; consolescreen -S node2gvnt --networkid 1012 --datadir node2 --port 12342 --vntbootnode &quot;（这里填入是node0的p2p地址，不是node1&#x2F;2&#x2F;3）&quot; consolescreen -S node3gvnt --networkid 1012 --datadir node3 --port 12343 --vntbootnode &quot;（这里填入是node0的p2p地址，不是node1&#x2F;2&#x2F;3）&quot; console 之后如果想回到控制页面的话，只要screen -r node0/1/2/3回到相应screen就好了 节点3上的peer信息如下，各节点上都会有3个节点，说明我们的测试网络已经搭建起来了：大概会是这样的（id什么的有不同很正常） 1234567891011121314151617181920212223242526272829303132333435363738&gt; admin.peers[&#123; caps: null, id: &quot;&lt;peer.ID 1kHJFKr2bzUnMr1NbeyYbYJa3RXT18cEu7cNDrHWjg8XYKB&gt;&quot;, name: &quot;&quot;, network: &#123; inbound: false, localAddress: &quot;/ip4/127.0.0.1/tcp/12343&quot;, remoteAddress: &quot;/ip4/127.0.0.1/tcp/12341&quot;, static: false, trusted: false &#125;, protocols: null&#125;, &#123; caps: null, id: &quot;&lt;peer.ID 1kHcch6yuBCgC5nPPSK3Yp7Es4c4eenxAeK167pYwUvNjRo&gt;&quot;, name: &quot;&quot;, network: &#123; inbound: false, localAddress: &quot;/ip4/127.0.0.1/tcp/12343&quot;, remoteAddress: &quot;/ip4/127.0.0.1/tcp/12340&quot;, static: false, trusted: false &#125;, protocols: null&#125;, &#123; caps: null, id: &quot;&lt;peer.ID 1kHfop9dnUHHmtBXVkLB5UauAmACtrsEX5H5t6oCRpdL198&gt;&quot;, name: &quot;&quot;, network: &#123; inbound: false, localAddress: &quot;/ip4/127.0.0.1/tcp/12343&quot;, remoteAddress: &quot;/ip4/127.0.0.1/tcp/12342&quot;, static: false, trusted: false &#125;, protocols: null&#125;] 打包区块在每个初始见证人节点上解锁账户、开启共识，可以看到区块不断产生。 12personal.unlockAccount(core.coinbase, &quot;账户密码&quot;, 3153600000) &#x2F;&#x2F; 3153600000指解锁的秒数，这段时间之后，账户会自动锁住bp.start() 以上，开发测试网络就搭建起来了。","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://laclic.github.io/tags/linux/"},{"name":"ubuntu","slug":"ubuntu","permalink":"http://laclic.github.io/tags/ubuntu/"},{"name":"shell","slug":"shell","permalink":"http://laclic.github.io/tags/shell/"},{"name":"vnt-chain","slug":"vnt-chain","permalink":"http://laclic.github.io/tags/vnt-chain/"},{"name":"block chain","slug":"block-chain","permalink":"http://laclic.github.io/tags/block-chain/"}]},{"title":"FZU2021-0x03-Boxes in a Line","slug":"FZU2021-0x03-Boxes-in-a-Line","date":"2021-01-21T09:51:41.000Z","updated":"2021-01-21T12:40:43.347Z","comments":true,"path":"2021/01/21/FZU2021-0x03-Boxes-in-a-Line/","link":"","permalink":"http://laclic.github.io/2021/01/21/FZU2021-0x03-Boxes-in-a-Line/","excerpt":"","text":"Use two array to simulate doubly linked listTake care of side-to-side swapWatch out reverseCommand 1 (when reversed) is equal to command 2 (when normally ordered),command 2 (when reversed) is in a similar way. Command 3 is the same whether it is reversed. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125// doubly linked list#include &lt;cstdio&gt;#include &lt;cstdlib&gt;/*6 41 1 42 3 53 1 646 31 1 42 3 53 1 6100000 14*/int left[100006];int right[100006];int case_count = 0;int reverse;int cmd;inline void link(const int &amp;L, const int &amp;R) &#123; right[L] = R; left[R] = L;&#125;void prt(const int &amp;reverse, const int max) &#123; int now = max * reverse; // if reversed, now starts at max, otherwise at 0; long long sum = 0; int shouldAdd = 1; switch (reverse) &#123; case 0: &#123; for (now = right[now]; now%max; now = right[now]) &#123; if (shouldAdd%2) &#123; sum += now; &#125; ++shouldAdd; &#125; break; &#125; case 1: &#123; for (now = left[now]; now; now = left[now]) &#123; if (shouldAdd%2) &#123; sum += now; &#125; ++shouldAdd; &#125; break; &#125; &#125; printf(&quot;Case %d: %lld\\n&quot;, case_count, sum);&#125;int main(int argc, char const *argv[]) &#123; int n, m; while (scanf(&quot;%d %d&quot;, &amp;n, &amp;m) != EOF) &#123; reverse = 0; ++case_count; for (int i = 1; i &lt;= n; ++i) &#123; left[i] = i - 1; right[i] = i + 1; &#125; right[0] = 1; left[n + 1] = n; // printf(&quot;pwn! %d\\n&quot;,m); for (; m; --m) &#123; scanf(&quot;%d&quot;,&amp;cmd); // printf(&quot;pwn! %d\\n&quot;,m); switch (cmd) &#123; case 4: reverse = !reverse; break; default: &#123; int first, second; scanf(&quot;%d %d&quot;, &amp;first, &amp;second); if(reverse) cmd = 3-cmd; if(left[second]==first&amp;&amp;cmd==1) &#123;continue;&#125; if(right[second]==first&amp;&amp;cmd==2) &#123;continue;&#125; int L1 = left[first], R1 = right[first], L2 = left[second], R2 = right[second]; switch (cmd) &#123; case 0: case 3: if(right[first]==second) &#123; link(L1,second); link(second,first); link(first,R2); &#125;else if (left[first]==second) &#123; link(L2,first); link(first,second); link(second,R1); &#125;else &#123; link(L1, second); link(second, R1); link(L2, first); link(first, R2); &#125; continue; case 1: link(L1, R1); link(L2, first); link(first, second); continue; case 2: link(L1, R1); link(second, first); link(first, R2); continue; &#125; &#125; &#125; &#125; // for(int i=right[0];i%7;i=right[i]) &#123; // printf(&quot;%d &quot;,i); // &#125; prt(reverse, n + 1); &#125; return 0;&#125;","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"linked list","slug":"linked-list","permalink":"http://laclic.github.io/tags/linked-list/"},{"name":"array list","slug":"array-list","permalink":"http://laclic.github.io/tags/array-list/"}]},{"title":"安装 wsl2-ubuntu","slug":"wsl2-ubuntu","date":"2021-01-21T09:49:27.000Z","updated":"2021-01-27T05:58:30.379Z","comments":true,"path":"2021/01/21/wsl2-ubuntu/","link":"","permalink":"http://laclic.github.io/2021/01/21/wsl2-ubuntu/","excerpt":"","text":"为了搭建临时测试网络，我们需要linux环境，ubuntu是一个比较易上手的linux发行版 官方教程：链接 以下是我自己电脑安装wsl2-ubuntu的过程（比较简单，但是可能有些设置是不一样的，比如我这个win10的wsl是默认开启的，还有win10版本是默认最新的） 前言为何需要使用 linux因为很多教程命令都是基于linux系统撰写的，也为了防止由于系统版本问题而产生与教程结果不一致的问题 为何使用 wsl2(windows-subsystem-linux 2)因为方便好装（win10商店就有），而且不用安装双系统天天重启切换，并且性能比虚拟机好（如果已经有虚拟机，嫌麻烦其实不用装wsl也可以） 另外，wsl2还有很多好用的功能，在这里就不列举了（因为我也没体会过），就作个引用好了。原文. 为什么要升级到WSL2用过 WSL 第一代的朋友一定都遇到过一些比较蛋疼兼容性的问题，这些问题是由于 WSL 并不“完整”导致的。说到底 WSL 还只是一个用于访问 Linux 环境的兼容层，并没有实现 Linux 内核的完整功能。比如，我遇到了这些情况：· 无法启动Go的 Debug 进程，导致调试Go程序很麻烦· 需要在 WSL 下单独安装一套 Docker 引擎，并进行额外配置· 在 WSL 下启动 VS Code 后，会出现目录中文件被占用的情况，导致无法重命名，必须要先退出 VS Code· 无法正常使用 Linux 下全部命令，比如netstat而 WSL2 基于Hyper-V功能的子集提供了“真正的 Linux 内核”，因此上述问题也被解决了。同时，WSL2 也 支持 Windows 10 家庭版，因此之前家庭版不能用 Docker Desktop 的情况也已经成了历史。 这对于习惯使用 Linux 开发，但是又需要 Windows 玩游戏，同时不希望用盗版的有志青年们来说简直是天大的福音。 使用教程下载与安装单击你的win键（没有输入框，但是你可以试试随便按一个字幕/数字键，会自动切换到搜索输入框），输入Microsoft store（如果你经常用的话，输入个M可能就能出来了） 搜索ubuntu（无需穿墙），下载安装（免费）三个版本其实都可以 此时，单击win键输入ubuntu，点击即可打开 打开后，什么都没有，嗯也可能会显示版本信息，一天显示一次现在我们处于欢迎视窗（刚进wsl-ubuntu时候就会打开的东西，我也不知道有什么用，反正挺迷惑的）需要我们自行退出 键盘进行ctrl+C，退出欢迎视窗 然后你就可以关掉了，因为现在装的是wsl1，我们需要升级wsl2 升级 wsl2单击win，输入powershell，右键一个蓝蓝的东西Microsoft Powershell（别开PowerPoint去了），点击以管理员身份运行（一定要是这样开！！不然后面会报错的！） 输入 1wsl --set-default-version 2 会提示你安装wsl2内核，按照提示安装即可 （或者试试下面这条命令，请注意，一定要以管理员身份打开powershell） 1dism.exe &#x2F;online &#x2F;enable-feature &#x2F;featurename:VirtualMachinePlatform &#x2F;all &#x2F;norestart 然后再来 1wsl --set-default-version 2 最后输入wsl --list --verbose检查一下确实是装上了wsl2-ubuntu","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://laclic.github.io/tags/linux/"},{"name":"wsl","slug":"wsl","permalink":"http://laclic.github.io/tags/wsl/"},{"name":"ubuntu","slug":"ubuntu","permalink":"http://laclic.github.io/tags/ubuntu/"},{"name":"shell","slug":"shell","permalink":"http://laclic.github.io/tags/shell/"}]},{"title":"FZU2021-0x05-Train Problem I","slug":"FZU2021-0x05-Train-Problem-I","date":"2021-01-20T06:41:01.000Z","updated":"2021-01-20T06:46:44.049Z","comments":true,"path":"2021/01/20/FZU2021-0x05-Train-Problem-I/","link":"","permalink":"http://laclic.github.io/2021/01/20/FZU2021-0x05-Train-Problem-I/","excerpt":"","text":"同样是消消乐12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364// use stack#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;stack&gt;#define TOTAL 10using namespace std;char cmd[18] = &#123;0&#125;; // 1: IN, 2: OUT, 0: endchar now_at = 0; // to point out where to push the next cmdinline void cmd_push(int command) &#123; cmd[now_at] = command; ++now_at;&#125;// inline void clear(stack&lt;char&gt;&amp;thiz) &#123; // no need to initialize it, when one problem is over, because stack will be disposed before going to the next roop// stack&lt;char&gt; empty;// swap(thiz,empty);// &#125;int main(int argc, char const *argv[])&#123; int N; char in[TOTAL],out[TOTAL]; while(scanf(&quot;%d&quot;,&amp;N)!=EOF) &#123; stack&lt;char&gt; stk; scanf(&quot;%s %s&quot;,in,out); int mouse[3] = &#123;0&#125;; // 1: in, 2: out, 0: of no use while(mouse[1]&lt;N) &#123; if(in[mouse[1]]==out[mouse[2]]) &#123; ++mouse[1]; ++mouse[2]; cmd_push(1); cmd_push(2); while(!stk.empty()&amp;&amp;stk.top()==out[mouse[2]]) &#123; ++mouse[2]; stk.pop(); cmd_push(2); &#125; &#125;else &#123; stk.push(in[mouse[1]]); ++mouse[1]; cmd_push(1); &#125; &#125; cmd[now_at] = 0; if(!stk.empty()) printf(&quot;No.\\n&quot;); else &#123; printf(&quot;Yes.\\n&quot;); // print the content in cmd[] for(int i=0;cmd[i]!=0;++i) &#123; switch (cmd[i]) &#123; case 1: printf(&quot;in\\n&quot;); break; case 2: printf(&quot;out\\n&quot;); break; &#125; &#125; &#125; printf(&quot;FINISH\\n&quot;); // reset now_at now_at = 0; &#125; return 0;&#125;","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"c++","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"stack","slug":"stack","permalink":"http://laclic.github.io/tags/stack/"}]},{"title":"FZU2021-0x06-看病要排队","slug":"FZU2021-0x06-看病要排队","date":"2021-01-20T03:26:14.000Z","updated":"2021-01-20T03:41:18.889Z","comments":true,"path":"2021/01/20/FZU2021-0x06-看病要排队/","link":"","permalink":"http://laclic.github.io/2021/01/20/FZU2021-0x06-%E7%9C%8B%E7%97%85%E8%A6%81%E6%8E%92%E9%98%9F/","excerpt":"","text":"Remain&emsp; Cause error if using Class Patient with reload operator&lt;, WHY?123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687// priority_queue// need to clear queue before new problem comes#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;queue&gt;using namespace std;// class Patient &#123;// public:// int id;// int prior;// bool operator &lt; (const Patient other) &#123;// if(this-&gt;prior == other.prior) return this-&gt;id &gt; other.id;// else return this-&gt;prior &lt; other.prior;// &#125;// &#125;typedef struct _patient&#123; int id; int prior;&#125;Patient; bool operator &lt; (const Patient&amp;thiz,const Patient other) &#123; if(thiz.prior == other.prior) return thiz.id &gt; other.id; else return thiz.prior &lt; other.prior;&#125;void clear(priority_queue&lt;Patient&gt; &amp;target) &#123; priority_queue&lt;Patient&gt; empty; target.swap(empty);&#125;int main(int argc, char const *argv[])&#123; int N,doctor,prior; char cmd[4]; while(scanf(&quot;%d&quot;,&amp;N)!=EOF) &#123; priority_queue&lt;Patient&gt; que[4]; int i=1; for(;N;--N) &#123; scanf(&quot;%s&quot;,cmd); if(cmd[0]==&#x27;I&#x27;) &#123; scanf(&quot;%d %d&quot;,&amp;doctor,&amp;prior); Patient temp = &#123;i,prior&#125;; que[doctor].push(temp); ++i; &#125;else &#123; scanf(&quot;%d&quot;,&amp;doctor); if(que[doctor].empty()) printf(&quot;EMPTY\\n&quot;); else &#123; printf(&quot;%d\\n&quot;,que[doctor].top().id); que[doctor].pop(); &#125; &#125; &#125; for(int i=1;i&lt;4;++i) &#123; clear(que[i]); &#125; &#125; return 0;&#125;/*7IN 1 1IN 1 2OUT 1OUT 2IN 2 1OUT 2OUT 12IN 1 1OUT 18IN 1 1IN 1 1IN 1 1IN 1 1OUT 1OUT 1OUT 1OUT 1*/","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"c++","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"priority_queue","slug":"priority-queue","permalink":"http://laclic.github.io/tags/priority-queue/"}]},{"title":"FZU2021-0x04-Replace To Make Regular Bracket Sequence","slug":"FZU2021-0x04-Replace-To-Make-Regular-Bracket-Sequence","date":"2021-01-20T03:25:55.000Z","updated":"2021-01-20T03:41:47.896Z","comments":true,"path":"2021/01/20/FZU2021-0x04-Replace-To-Make-Regular-Bracket-Sequence/","link":"","permalink":"http://laclic.github.io/2021/01/20/FZU2021-0x04-Replace-To-Make-Regular-Bracket-Sequence/","excerpt":"","text":"消消乐12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758// Use stack#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;stack&gt;using namespace std;char s[1000006];// &lt; &gt;, &#123; &#125;, [ ], ( ).// 0 4 1 5 2 6 3 7inline char table(char ch) &#123; switch (ch) &#123; case &#x27;&lt;&#x27;: return 0; case &#x27;&#123;&#x27;: return 1; case &#x27;[&#x27;: return 2; case &#x27;(&#x27;: return 3; case &#x27;&gt;&#x27;: return 4; case &#x27;&#125;&#x27;: return 5; case &#x27;]&#x27;: return 6; case &#x27;)&#x27;: return 7; &#125; return -1;&#125;int main(int argc, char const *argv[])&#123; int cnt = 0; while(scanf(&quot;%s&quot;,s)!=EOF) &#123; stack&lt;char&gt; stk; int impossible = 0; for(int i=0;s[i]!=&#x27;\\0&#x27;;++i) &#123; int temp = table(s[i]); if(temp&gt;=4) &#123; if(stk.empty()) &#123; impossible = 1; break; &#125; if(temp - stk.top()==4) &#123; stk.pop(); &#125;else &#123; stk.pop(); ++cnt; &#125; &#125;else &#123; stk.push(temp); &#125; &#125; if(!stk.empty()) impossible=1; if(impossible) &#123; printf(&quot;Impossible\\n&quot;); &#125;else &#123; printf(&quot;%d\\n&quot;,cnt); &#125; &#125; return 0;&#125;","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"c++","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"stack","slug":"stack","permalink":"http://laclic.github.io/tags/stack/"}]},{"title":"FZU2021-0x02-Broken Keyboard (a.k.a. Beiju Text)","slug":"FZU2021-0x02-Broken-Keyboard-a-k-a-Beiju-Text","date":"2021-01-20T03:25:21.000Z","updated":"2021-01-20T03:41:43.274Z","comments":true,"path":"2021/01/20/FZU2021-0x02-Broken-Keyboard-a-k-a-Beiju-Text/","link":"","permalink":"http://laclic.github.io/2021/01/20/FZU2021-0x02-Broken-Keyboard-a-k-a-Beiju-Text/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;deque&gt;using namespace std;char s[100007];int main(int argc, char const *argv[])&#123; while(scanf(&quot;%s&quot;,s)==1) &#123; deque&lt;char*&gt; v; v.push_back(s); int i; for(i=0;s[i]!=&#x27;\\0&#x27;;++i) &#123; if(s[i]==&#x27;[&#x27;) &#123; s[i] = &#x27;\\0&#x27;; v.push_front(s+i+1); &#125; if(s[i]==&#x27;]&#x27;) &#123; s[i] = &#x27;\\0&#x27;; v.push_back(s+i+1); &#125; &#125; s[i] = &#x27;\\0&#x27;; s[i+1] = &#x27;\\0&#x27;; // int len = v.size(); // for(i=0;i&lt;len;++i) &#123; // printf(&quot;%s&quot;,v[i]); // &#125; for(deque&lt;char*&gt;::iterator it=v.begin();it!=v.end();++it) &#123; printf(&quot;%s&quot;,*it); &#125; printf(&quot;\\n&quot;); // printf(&quot;#&quot;); &#125; return 0;&#125;","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"c++","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"string and point","slug":"string-and-point","permalink":"http://laclic.github.io/tags/string-and-point/"},{"name":"deque","slug":"deque","permalink":"http://laclic.github.io/tags/deque/"}]},{"title":"FZU2021-0x01-小孩报数问题","slug":"FZU2021-0x01-小孩报数问题","date":"2021-01-20T03:24:51.000Z","updated":"2021-01-20T03:41:36.944Z","comments":true,"path":"2021/01/20/FZU2021-0x01-小孩报数问题/","link":"","permalink":"http://laclic.github.io/2021/01/20/FZU2021-0x01-%E5%B0%8F%E5%AD%A9%E6%8A%A5%E6%95%B0%E9%97%AE%E9%A2%98/","excerpt":"","text":"Take care of how the end comes back to the begin1234567891011121314151617181920212223242526272829303132333435363738394041424344/* circle problem */// take care of how the end comes back to the begin#include &lt;cstdio&gt;#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;int main(int argc, char const *argv[])&#123; int N,W,S; scanf(&quot;%d&quot;,&amp;N); vector&lt;string&gt; v; string temp; for(;N;--N) &#123; cin &gt;&gt; temp; v.push_back(temp); &#125; scanf(&quot;%d,%d&quot;,&amp;W,&amp;S); // int len = v.size(); // for(int i=0;i&lt;len;++i) &#123; // debug // printf(&quot;%s\\n&quot;,&amp;v[i][0]); // &#125; // vector&lt;string&gt;::iterator it = v.begin(); int cnt = 1; int lenth = v.size(); for(int now=W-1;!v.empty();++now) &#123; lenth = v.size(); int SS = S % lenth; if(SS == 0) SS = lenth; if(SS == 1) SS += lenth; if(now &gt;= lenth) now %= lenth; if(cnt==SS) &#123; printf(&quot;%s\\n&quot;,&amp;v[now][0]); v.erase(v.begin()+now); cnt = 1; &#125; ++cnt; &#125; return 0;&#125;","categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"circle","slug":"circle","permalink":"http://laclic.github.io/tags/circle/"},{"name":"c++","slug":"c","permalink":"http://laclic.github.io/tags/c/"}]},{"title":"spider get ajax and frame page","slug":"spider-get-ajax-and-frame-page","date":"2020-12-30T09:54:10.000Z","updated":"2020-12-30T11:15:02.919Z","comments":true,"path":"2020/12/30/spider-get-ajax-and-frame-page/","link":"","permalink":"http://laclic.github.io/2020/12/30/spider-get-ajax-and-frame-page/","excerpt":"","text":"Copyright: LacLic python: 获取 ajax 和 frame 子页面该博客提供的解决思路适用于需要获取子界面情况 事件发生想要爬取该页面的阅读数，审计网页元素后找到了相应信息。 爬取后源代码后发现问题，审计网页源代码，发现没有阅读数的值，只发现了一串urn 解决方案爬取urn，接入url合并为新的uri，打开对应页面，并爬取新的页面源代码，得到所需内容 12345678910111213141516171819def parse_page_content(html): pattern = re.compile( # Regex r&#x27;&lt;div class=&quot;detail_main_content&quot;&gt;\\s.*?&gt;(.*?)&lt;/p&gt;[\\s\\S]*fbsj.*?&gt;([0-9]*)-([0-9]*)-([0-9]*)[\\s\\S]*author.*?&gt;(.*?)&lt;/span&gt;[\\s\\S]*?Count.*?id=([0-9]*)[\\s\\S]*?&lt;strong&gt;(.*?)/&lt;/strong&gt;(.*?)&lt;/div&gt;&#x27;, re.S) # 其中 Count.*?id=([0-9]*) 中 id= 后的部分便是需要的id内容 ↑-----↑ items = re.findall(pattern, html) for item in items: response = requests.get( f&#x27;&quot;&quot;&quot;省略无关url&quot;&quot;&quot;/getDocReadCount.do?id=&#123;item[5]&#125;&#x27;) # &lt;--- 获阅返回读数页面的uri并爬取页面 yield &#123; # convert to dict &#x27;title&#x27;: item[0], &#x27;year&#x27;: item[1], &#x27;month&#x27;: item[2], &#x27;day&#x27;: item[3], &#x27;author&#x27;: item[4], &#x27;read&#x27;: response.text, # &lt;--- 写入到阅读数 &#x27;from&#x27;: item[6], &#x27;content&#x27;: &quot;&quot;&quot;省略无关解析内容的表达式（写太长了，又懒得改，只好掩人耳目了！）&quot;&quot;&quot; &#125; return 0 爬取成功！ 解决过程（使用火狐浏览器）F12打开开发者工具，点开network（网络）发现除了获取了主页面外，还通过POST获取了getDocReadCount的东西，如下图： 通过英文审计，这不就是我们需要的阅读数吗！ 另外看到上面的urn，似曾相识… 123&lt;span id=&quot;readcount&quot;&gt;&lt;/span&gt;&lt;script&gt; $.ajax(&#123;type:&#x27;post&#x27;,url:&#x27;/interFace/getDocReadCount.do?id=509488&#x27;,timeout:2000,success:function(ret)&#123;$(&#x27;#readcount&#x27;).html($.trim(ret))&#125;,error:function(ret)&#123;$.ajax(&#123;type:&#x27;post&#x27;,url:&#x27;/ecms_external?method=syncOfflineVisitCount&#x27;,data:&#x27;type=doc&amp;requestUrl=&#x27;+location.href,timeout:2000,success:function(ret)&#123;$(&#x27;#readcount&#x27;).html(ret);&#125;,error:function()&#123;$(&#x27;#readcount&#x27;).html(0);&#125;&#125;);&#125;&#125;); 这不就是上面看到的 12url:&#x27;/interFace/getDocReadCount.do?id=509488&#x27; 好了，我们只要构造request去获取 ‘(相关url)/interFace/getDocReadCount.do?id=509488’（组成成为一个网址）的页面即可！ 12345id = (&quot;&quot;&quot;已经爬到的id&quot;&quot;&quot;)response = requests.get( f&#x27;http://(相关url)/interFace/getDocReadCount.do?id=&#123;id&#125;&#x27;)","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://laclic.github.io/tags/python/"},{"name":"spider","slug":"spider","permalink":"http://laclic.github.io/tags/spider/"}]},{"title":"C语言实现 红黑树 源代码","slug":"RBtree","date":"2020-12-25T08:39:21.000Z","updated":"2020-12-27T07:35:17.150Z","comments":true,"path":"2020/12/25/RBtree/","link":"","permalink":"http://laclic.github.io/2020/12/25/RBtree/","excerpt":"","text":"int 型 红黑树&emsp;采用了双向结构，子节点可指向父节点&emsp;代码采用了多.c文件形式，需要在一个project下进行编译 函数名 英文释义 中文释义 treeCrt() Tree Create 创建树 treeAdd() Tree Add 向树添加节点 treePrt() Tree Print 打印树/输出树 \\ \\ \\ _treeAdd_recur() Tree Add Recursion 通过递归方式查找插入位点并插入 _treeJug() Tree Judge 比较判断节点值的大小关系 _treePrt_recur() Tree Print Recursion 通过递归方式打印树 _treeChk() Tree Check 检查节点附近的情况 _treeRot() Tree Rotate 选择树的结点 _nodeCrt() Node Create 创建并返回一个带值的节点 &emsp;注：开头带下划线的函数表示私有函数（不希望直接被访问，只是为了给非下划线函数使用方便） 头文件： 123456789101112131415161718192021222324252627282930#ifndef _TREE_H_#define _TREE_H_#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;typedef struct _node&#123; int value; struct _node *p[2]; // p[0]: left-son, p[1]: right-son struct _node *father; char BR; // 0: black; 1: red; &#125;Node;typedef struct _rbtree&#123; Node* head;&#125;RBTree;RBTree treeCrt();void treeAdd(RBTree* t,int value);void treePrt(RBTree t);void _treeAdd_recur(Node* now,const int value);void _treePrt_recur(Node* now,int layer);void _treeChk(Node* now,int son);int _treeJdg(Node* const now,const int value);void _treeRot(Node* now,const int drc); // lift the left or right one to now position, drc means directionNode* _nodeCrt(Node* father,int value);#endif 红黑树 的 创建 与 添加 函数名 英文释义 中文释义 treeCrt() Tree Create 创建树 treeAdd() Tree Add 向树添加节点 _treeAdd_recur() Tree Add Recursion 通过递归方式查找插入位点并插入 _treeJug() Tree Judge 比较判断节点值的大小关系 _nodeCrt() Node Create 创建并返回一个带值的节点 1234567#include &quot;tree.h&quot;RBTree treeCrt() &#123; RBTree t = &#123;NULL&#125;; return t;&#125; 1234567891011121314151617#include &quot;tree.h&quot;void treeAdd(RBTree*t,int value) &#123; // 将添加函数进行了封装，而非直接用主函数来进行递归 if(t-&gt;head) _treeAdd_recur(t-&gt;head,value); else t-&gt;head = _nodeCrt(NULL,value); t-&gt;head-&gt;BR = 0;&#125;void _treeAdd_recur(Node* now,int value) &#123; int drc = _treeJdg(now,value); // drc: direction, left(0) or right(1) // _treeJdg()函数用于判断大小以确定 if(now-&gt;p[drc]) _treeAdd_recur(now-&gt;p[drc],value); else &#123; now-&gt;p[drc] = _nodeCrt(now,value); _treeChk(now,drc); // 用于检查红黑关系的函数 &#125;&#125; 1234#include &quot;tree.h&quot;int _treeJdg(Node* const now,const int value) &#123; return now-&gt;value &lt; value; &#125; 12345678910#include &quot;tree.h&quot;Node* _nodeCrt(Node* father,int value) &#123; Node* node = (Node*) malloc(sizeof(Node)); node-&gt;father = father; node-&gt;p[0] = NULL; node-&gt;p[1] = NULL; node-&gt;value = value; node-&gt;BR = 1;&#125; 红黑树 的 打印/输出/展示&emsp;由于输出的特性，我们无法竖着输出我们所熟悉的二叉树，只能通过递归的方式来横向输出我们的二叉树 函数名 英文释义 中文释义 treePrt() Tree Print 打印树/输出树 _treePrt_recur() Tree Print Recursion 通过递归方式打印树 123456789101112131415#include &quot;tree.h&quot;void treePrt(RBTree t) &#123; // 同样是进行了封装 if(t.head) _treePrt_recur(t.head,0); // 判断空树，如果t上有结点（不是空树）就进入递归 else printf(&quot;This is an empty tree.\\n&quot;); // 否则，输出空树 printf(&quot;------------------------------------\\n&quot;); // 分隔符&#125;void _treePrt_recur(Node* now,int layer) &#123; // layer 代指当前所处的层数/递归的深度 if(now-&gt;p[1]) _treePrt_recur(now-&gt;p[1],layer+1); for(int i=0;i&lt;layer;++i) printf(&quot;\\t&quot;); // 制表符，让格式更好看 printf(&quot;%d(BR-%d)\\n&quot;,now-&gt;value,now-&gt;BR); if(now-&gt;p[0]) _treePrt_recur(now-&gt;p[0],layer+1);&#125; 红黑树 的 检查与旋转 函数名 英文释义 中文释义 _treeChk() Tree Check 检查节点附近的情况 _treeRot() Tree Rotate 选择树的结点 &emsp;检查新插入节点、其父节点，以及其祖父节点（父节点的父节点） 12345678910111213141516171819202122232425262728293031323334353637383940#include &quot;tree.h&quot;void _treeChk(Node* f,int son) &#123; // son of father(f) is the added node int status = 0b00; // if (son &gt; f) ==&gt; 0b1??, son &gt; gf ==&gt; 0b?1? Node* gf = f-&gt;father; Node* s; // s means son, Node* if(gf&amp;&amp;f-&gt;BR) &#123; if(gf-&gt;p[0]&amp;&amp;gf-&gt;p[1]&amp;&amp;gf-&gt;p[0]-&gt;BR&amp;&amp;gf-&gt;p[1]-&gt;BR) &#123; // left-son and right-son exists, left and right sons are both red gf-&gt;BR = 1; gf-&gt;p[0]-&gt;BR = 0; gf-&gt;p[1]-&gt;BR = 0; if(gf-&gt;father) &#123; _treeChk(gf-&gt;father,gf-&gt;value &gt; gf-&gt;father-&gt;value); &#125; &#125;else &#123; status = son; s = f-&gt;p[son]; // s means son of f, Node* status = (status &lt;&lt; 1) + (f-&gt;p[son]-&gt;value &gt; gf-&gt;value); switch(status) &#123; case 0b00 : ; case 0b11 : f-&gt;BR = 1; gf-&gt;BR = 0; _treeRot(gf,!(1&amp;status)); break; case 0b10 : ; case 0b01 : f-&gt;BR = 1; gf-&gt;BR = 0; _treeRot(f,!son); _treeRot(gf,!(1&amp;status)); break; default : ; &#125; &#125; &#125; return;&#125; &emsp;以下函数中的drc，0代表左旋，1代表右旋 12345678910111213#include &quot;tree.h&quot;void _treeRot(Node* now,const int drc) &#123; // left-rotate: 0 now-&gt;value ^= now-&gt;p[!drc]-&gt;value ^= now-&gt;value ^= now-&gt;p[!drc]-&gt;value; // swap value Node* temp = now-&gt;p[drc]; now-&gt;p[drc] = now-&gt;p[!drc]; now-&gt;p[!drc] = now-&gt;p[drc]-&gt;p[!drc]; now-&gt;p[drc]-&gt;p[!drc] = now-&gt;p[drc]-&gt;p[drc]; now-&gt;p[drc]-&gt;p[drc] = temp; if(temp) temp-&gt;father = now-&gt;p[drc]; if(now-&gt;p[!drc]) now-&gt;p[!drc]-&gt;father = now;&#125;","categories":[],"tags":[{"name":"algorithm","slug":"algorithm","permalink":"http://laclic.github.io/tags/algorithm/"},{"name":"data structure","slug":"data-structure","permalink":"http://laclic.github.io/tags/data-structure/"}]},{"title":"P1980 最优解（30ms）","slug":"P1980","date":"2020-12-24T05:07:50.000Z","updated":"2020-12-24T05:14:48.009Z","comments":true,"path":"2020/12/24/P1980/","link":"","permalink":"http://laclic.github.io/2020/12/24/P1980/","excerpt":"","text":"Copyright LacLic 思路每一位 = 去尾数据 + 此位值 * 此位后的输入 显然，需要重点考虑0出现的次数 举例记 输入为 26759，（不考虑x，直接把0~9全都算出来，最后再输出） 记 答案数组 为 A[0~9](26759)（10长度的数组） &emsp;其中，A是长度为10的数组，用以表示数字出现的次数，0~9表示0到9每一位，括号内表示输入 A[09](26759) = A[09](20000) + A[2](6759) A[09](6759) = A[09](6000) + A[6](759) A[09](759) = A[09](700) + A[7](59) A[09](59) = A[09](50) + A[5](9) A[09](759) = A[09](9) + A[9](0) A[9](0) = 0A[0~9] = {1,1,1,1,1,1,1,1,1,1} 此处考虑到方便，就先记0处为1，后续进行删除 最终代码（虽然用的是c++，但是完全用的是c的语法，30ms） 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253// copyright LacLic#include &lt;cstdio&gt;#include &lt;iostream&gt;using namespace std;#define BITS 8#define NUM 10unsigned long long storage[BITS] = &#123;1,20,300,4000,50000,600000,7000000,80000000&#125;;unsigned long long a[NUM] = &#123;0&#125;;inline int intPow(int base,int power) &#123; int ret = 1; for(;power;--power) &#123; ret *= base; &#125; return ret;&#125;int main(int argc, char const *argv[])&#123; int b[BITS]; // 10 000 000 int n,x,height; int LEN; // means the total bits-1 scanf(&quot;%d %d&quot;,&amp;n,&amp;x); ++n; // 这句只是因为发现最后算出来的数据会不到n，所以++后刚刚好 int N = n; for(LEN=0;1;++LEN) &#123; b[LEN] = n%10; n /= 10; if(!n) break; &#125; height = intPow(10,LEN); for(int i=LEN;i&gt;=0;--i) &#123; int numOfBit = intPow(NUM,i); for(int j=0;j&lt;b[i];++j) &#123; a[j] += numOfBit; for(int k=0;k&lt;NUM;++k) &#123; a[k] += storage[i-1]; &#125; &#125; a[b[i]] += N % numOfBit; &#125; for(;height;height/=10) &#123; // 发现0处有问题，所以添加这段来修正a[0] a[0] -= height; &#125; printf(&quot;%d&quot;,a[x]); return 0;&#125;// 30ms 普通递归算法(129ms) 12345678910111213141516171819202122232425262728#include &lt;cstdio&gt;#include &lt;iostream&gt;using namespace std;int a[10] = &#123;0&#125;;void count(int now) &#123; for(;now;now/=10) &#123; ++a[now%10]; &#125; return;&#125;int main(int argc, char const *argv[])&#123; int N,x; scanf(&quot;%d %d&quot;,&amp;N,&amp;x); for(int i=1;i&lt;=N;++i) &#123; count(i); &#125; // for(int i=0;i&lt;10;++i) &#123; // printf(&quot;a[%d] = %d\\n&quot;,i,a[i]); // &#125; printf(&quot;%d&quot;,a[x]); return 0;&#125;","categories":[],"tags":[{"name":"algorithm","slug":"algorithm","permalink":"http://laclic.github.io/tags/algorithm/"},{"name":"Leetcode","slug":"Leetcode","permalink":"http://laclic.github.io/tags/Leetcode/"}]},{"title":"Flutter autovalidate is deprecated","slug":"Flutter-autovalidate-is-deprecated","date":"2020-11-25T15:07:20.000Z","updated":"2020-12-03T10:09:26.969Z","comments":true,"path":"2020/11/25/Flutter-autovalidate-is-deprecated/","link":"","permalink":"http://laclic.github.io/2020/11/25/Flutter-autovalidate-is-deprecated/","excerpt":"","text":"Flutter Deprecated:&emsp;‘autovalidate’ is deprecated and shouldn’t be used.Created by: © LacLic 事件发生&emsp;在表单 (FormField) 中调用 autovalidate (自动生效)参数时，发生了如下现象（在 vscode 中）： autovalidate形式参数被划上了删除线 vscode提供了相应的提示信息（如下 / 如图） &emsp;Used to enable/disable form fields auto validation and update their error text. &emsp;autovalidate参数 曾用于启用 / 停用表单的 自动生效并更新他们的错误文本（错误文本大概是”密码应不少于6位”的提示文本） &emsp;’autovalidate’ is deprecated and shouldn’t be used. Use autoValidateMode parameter which provides more specific behavior related to auto validation. This feature was deprecated after v1.19.0.. &emsp;autovalidate参数 已经被逐步弃用。试着用用能提供更具体化的 autoValidateMode参数 来进行代替 autovalidate 功能。这个功能（原本的autovalidate参数）在版本1.19.0开始已经被弃用了。 Try replacing the use of the deprecated member with the replacement. &emsp;去用 autovalidateMode 参数吧 &emsp;flutter 中文网上的教程并没有关于这方面的阐述说明，以下资料参考自 StackoverFlow 等网站. 解决方案 &emsp;All you need to do is replace autovalidate: true with autovalidateMode: AutovalidateMode.always &emsp;翻译：把 autovalidate: true 换成 autovalidateMode: AutovalidateMode.always即可 例： 12345child: Form( key: _formKey, autovalidate: true, // &lt;- here child: null,), 12345child: Form( key: _formKey, autovalidateMode: AutovalidateMode.always, // &lt;- here child: null,), 关于 autovalidateMode The different supported modes are: AutovalidateMode.disabled: No auto validation will occur.· 表单不会自动更新 AutovalidateMode.always: Used to auto-validate FormField even without user interaction.· 实时更新表单 AutovalidateMode.onUserInteraction: Used to auto-validate FormField only after each user interaction.· 只有在用户交互后，才会更新表单","categories":[],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://laclic.github.io/tags/Flutter/"},{"name":"Deprecation","slug":"Deprecation","permalink":"http://laclic.github.io/tags/Deprecation/"}]},{"title":"Flutter_Exception_multiple_heroes","slug":"Flutter-Exception-multiple-heroes","date":"2020-11-16T14:31:23.000Z","updated":"2020-12-03T10:09:37.408Z","comments":true,"path":"2020/11/16/Flutter-Exception-multiple-heroes/","link":"","permalink":"http://laclic.github.io/2020/11/16/Flutter-Exception-multiple-heroes/","excerpt":"","text":"Flutter Exception： &emsp;There are multiple heroes that share the same tag within a subtreeCreated by: © LacLic 错误发生&emsp;这个异常(exception)主要出现于一个页面/路由(route)中有两个及以上的浮标按钮(FloatingActionButtom)。 &emsp;以下是异常报错代码及状况：*仅展示了部分代码* 123456789101112131415161718192021222324252627282930class _MyHomePageState extends State&lt;MyHomePage&gt; &#123;// ...省略无关代码@overrideWidget build(BuildContext context) &#123; return Scaffold( appBar: /* ...省略无关代码 */, body: Center( child: Column( mainAxisAlignment: MainAxisAlignment.center, children: &lt;Widget&gt;[ /*...省略无关widget代码 */ FloatingActionButton( onPressed: () =&gt; Navigator.pushNamed(context, &quot;test_form&quot;), child: Icon(Icons.plus_one), ), ], ), ), floatingActionButton: FloatingActionButton( onPressed: () &#123; Navigator.pushNamed(context, &quot;test_theme&quot;); _decrementCounter(); &#125;, tooltip: &#x27;new page&#x27;, child: Icon(Icons.home), ), );&#125; &emsp;会出现如图所示的异常(exception) 解决方案&emsp;只需要向各个浮标按钮的heroTag参数传入一个与其它浮标按钮不同的值（字符串）即可： 1234567FloatingActionButton( onPressed: () =&gt; Navigator.pushNamed(context, &quot;test_form&quot;), child: Icon(Icons.plus_one), heroTag: &#x27;example&#x27;, // &lt;- here), 里面的example可以替换成任意你想输入的值，只要不与其它的浮标按钮(FloatingActionButtom)的heroTag值相同即可 错误原理&emsp;首先得知道Hero是Flutter中的一种动画形式，两个带有同样hero标识的元素在页面切换时会有一个飞动的效果，该效果由flutter自动实现。该标识对应的属性名为heroTag，在同一个页面内，每个heroTag只能拥有一个独一无二的值（和 html 中的 id 一样），如果重复就会抛出标题所示的异常 ‘There are multiple heroes that share the same tag within a subtree.’ [^REF] &emsp;Flutter 相应部分源码： 1234567const FloatingActionButton(&#123; //省略无关参数 this.heroTag = const _DefaultHeroTag(), //省略无关参数&#125;) 其中： 1234567class _DefaultHeroTag &#123; const _DefaultHeroTag(); @override String toString() =&gt; &#x27;&lt;default FloatingActionButton tag&gt;&#x27;;&#125; &emsp;明显看出，heroTag会被默认初始化为 ‘&lt;default FloatingActionButton tag&gt;‘ ，导致未向heroTag传入参数的地方，全都默认为上面那段字符串 1234567final Object heroTag;/// The callback that is called when the button is tapped or otherwise activated.////// If this is set to null, the button will be disabled. &emsp;就是说这个参数是用来管理这个按钮的点击等事件的，如果多个按钮使用同一个heroTag则会触发联动，造成问题，为了防止问题，flutter提前进行了异常报错 [^REF]: CSDN id: in_motion 的博客.","categories":[],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://laclic.github.io/tags/Flutter/"},{"name":"Exception","slug":"Exception","permalink":"http://laclic.github.io/tags/Exception/"}]},{"title":"my-first-blog","slug":"my-first-blog","date":"2020-11-07T12:11:54.000Z","updated":"2020-12-03T10:07:27.701Z","comments":true,"path":"2020/11/07/my-first-blog/","link":"","permalink":"http://laclic.github.io/2020/11/07/my-first-blog/","excerpt":"","text":"Make it great!","categories":[],"tags":[{"name":"Default","slug":"Default","permalink":"http://laclic.github.io/tags/Default/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-11-07T08:26:14.862Z","updated":"2020-11-07T08:26:14.862Z","comments":true,"path":"2020/11/07/hello-world/","link":"","permalink":"http://laclic.github.io/2020/11/07/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"FZUACM","slug":"FZUACM","permalink":"http://laclic.github.io/tags/FZUACM/"},{"name":"c++","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"dynamic programming","slug":"dynamic-programming","permalink":"http://laclic.github.io/tags/dynamic-programming/"},{"name":"deep learning","slug":"deep-learning","permalink":"http://laclic.github.io/tags/deep-learning/"},{"name":"computer vision","slug":"computer-vision","permalink":"http://laclic.github.io/tags/computer-vision/"},{"name":"neural network","slug":"neural-network","permalink":"http://laclic.github.io/tags/neural-network/"},{"name":"search","slug":"search","permalink":"http://laclic.github.io/tags/search/"},{"name":"broad first search","slug":"broad-first-search","permalink":"http://laclic.github.io/tags/broad-first-search/"},{"name":"codeforces","slug":"codeforces","permalink":"http://laclic.github.io/tags/codeforces/"},{"name":"sort","slug":"sort","permalink":"http://laclic.github.io/tags/sort/"},{"name":"string","slug":"string","permalink":"http://laclic.github.io/tags/string/"},{"name":"map","slug":"map","permalink":"http://laclic.github.io/tags/map/"},{"name":"gcd","slug":"gcd","permalink":"http://laclic.github.io/tags/gcd/"},{"name":"python","slug":"python","permalink":"http://laclic.github.io/tags/python/"},{"name":"math","slug":"math","permalink":"http://laclic.github.io/tags/math/"},{"name":"brute-force","slug":"brute-force","permalink":"http://laclic.github.io/tags/brute-force/"},{"name":"existence","slug":"existence","permalink":"http://laclic.github.io/tags/existence/"},{"name":"binary","slug":"binary","permalink":"http://laclic.github.io/tags/binary/"},{"name":"array","slug":"array","permalink":"http://laclic.github.io/tags/array/"},{"name":"set","slug":"set","permalink":"http://laclic.github.io/tags/set/"},{"name":"multiset","slug":"multiset","permalink":"http://laclic.github.io/tags/multiset/"},{"name":"dpkt","slug":"dpkt","permalink":"http://laclic.github.io/tags/dpkt/"},{"name":"network","slug":"network","permalink":"http://laclic.github.io/tags/network/"},{"name":"packet capture","slug":"packet-capture","permalink":"http://laclic.github.io/tags/packet-capture/"},{"name":"recursion","slug":"recursion","permalink":"http://laclic.github.io/tags/recursion/"},{"name":"Problem Remains","slug":"Problem-Remains","permalink":"http://laclic.github.io/tags/Problem-Remains/"},{"name":"big(高精度)","slug":"big-高精度","permalink":"http://laclic.github.io/tags/big-%E9%AB%98%E7%B2%BE%E5%BA%A6/"},{"name":"linux","slug":"linux","permalink":"http://laclic.github.io/tags/linux/"},{"name":"c","slug":"c","permalink":"http://laclic.github.io/tags/c/"},{"name":"existence problem","slug":"existence-problem","permalink":"http://laclic.github.io/tags/existence-problem/"},{"name":"brute force","slug":"brute-force","permalink":"http://laclic.github.io/tags/brute-force/"},{"name":"format","slug":"format","permalink":"http://laclic.github.io/tags/format/"},{"name":"ubuntu","slug":"ubuntu","permalink":"http://laclic.github.io/tags/ubuntu/"},{"name":"shell","slug":"shell","permalink":"http://laclic.github.io/tags/shell/"},{"name":"vnt-chain","slug":"vnt-chain","permalink":"http://laclic.github.io/tags/vnt-chain/"},{"name":"block chain","slug":"block-chain","permalink":"http://laclic.github.io/tags/block-chain/"},{"name":"linked list","slug":"linked-list","permalink":"http://laclic.github.io/tags/linked-list/"},{"name":"array list","slug":"array-list","permalink":"http://laclic.github.io/tags/array-list/"},{"name":"wsl","slug":"wsl","permalink":"http://laclic.github.io/tags/wsl/"},{"name":"stack","slug":"stack","permalink":"http://laclic.github.io/tags/stack/"},{"name":"priority_queue","slug":"priority-queue","permalink":"http://laclic.github.io/tags/priority-queue/"},{"name":"string and point","slug":"string-and-point","permalink":"http://laclic.github.io/tags/string-and-point/"},{"name":"deque","slug":"deque","permalink":"http://laclic.github.io/tags/deque/"},{"name":"circle","slug":"circle","permalink":"http://laclic.github.io/tags/circle/"},{"name":"spider","slug":"spider","permalink":"http://laclic.github.io/tags/spider/"},{"name":"algorithm","slug":"algorithm","permalink":"http://laclic.github.io/tags/algorithm/"},{"name":"data structure","slug":"data-structure","permalink":"http://laclic.github.io/tags/data-structure/"},{"name":"Leetcode","slug":"Leetcode","permalink":"http://laclic.github.io/tags/Leetcode/"},{"name":"Flutter","slug":"Flutter","permalink":"http://laclic.github.io/tags/Flutter/"},{"name":"Deprecation","slug":"Deprecation","permalink":"http://laclic.github.io/tags/Deprecation/"},{"name":"Exception","slug":"Exception","permalink":"http://laclic.github.io/tags/Exception/"},{"name":"Default","slug":"Default","permalink":"http://laclic.github.io/tags/Default/"}]}